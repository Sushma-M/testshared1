/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * Payroll generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`payroll`")
public class Payroll implements Serializable {

    private Integer idPayroll;
    private Date startDate;
    private Date finalDate;
    @Type(type = "DateTime")
    private LocalDateTime developmentDate;
    private Boolean confirmation;
    @Type(type = "DateTime")
    private LocalDateTime confirmationDate;
    private Boolean impresa;
    @Type(type = "DateTime")
    private LocalDateTime imprintDate;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<ListCelphoneDetailPayroll> listCelphoneDetailPayrolls = new ArrayList<>();
    private Currency currency;
    private TypeGenerationForm typeGenerationForm;
    private User userByFkUserConfirmation;
    private User userByFkUserElaborate;
    private User userByFkUserPrints;
    private List<PayrollDetail> payrollDetails = new ArrayList<>();

    @Id
    @Column(name = "`id_payroll`", nullable = false, scale = 0, precision = 10)
    public Integer getIdPayroll() {
        return this.idPayroll;
    }

    public void setIdPayroll(Integer idPayroll) {
        this.idPayroll = idPayroll;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`start_date`", nullable = false)
    public Date getStartDate() {
        return this.startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`final_date`", nullable = false)
    public Date getFinalDate() {
        return this.finalDate;
    }

    public void setFinalDate(Date finalDate) {
        this.finalDate = finalDate;
    }

    @Column(name = "`development_date`", nullable = false)
    public LocalDateTime getDevelopmentDate() {
        return this.developmentDate;
    }

    public void setDevelopmentDate(LocalDateTime developmentDate) {
        this.developmentDate = developmentDate;
    }

    @Column(name = "`confirmation`", nullable = false)
    public Boolean isConfirmation() {
        return this.confirmation;
    }

    public void setConfirmation(Boolean confirmation) {
        this.confirmation = confirmation;
    }

    @Column(name = "`confirmation_date`", nullable = true)
    public LocalDateTime getConfirmationDate() {
        return this.confirmationDate;
    }

    public void setConfirmationDate(LocalDateTime confirmationDate) {
        this.confirmationDate = confirmationDate;
    }

    @Column(name = "`impresa`", nullable = false)
    public Boolean isImpresa() {
        return this.impresa;
    }

    public void setImpresa(Boolean impresa) {
        this.impresa = impresa;
    }

    @Column(name = "`imprint_date`", nullable = true)
    public LocalDateTime getImprintDate() {
        return this.imprintDate;
    }

    public void setImprintDate(LocalDateTime imprintDate) {
        this.imprintDate = imprintDate;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payroll")
    public List<ListCelphoneDetailPayroll> getListCelphoneDetailPayrolls() {
        return this.listCelphoneDetailPayrolls;
    }

    public void setListCelphoneDetailPayrolls(List<ListCelphoneDetailPayroll> listCelphoneDetailPayrolls) {
        this.listCelphoneDetailPayrolls = listCelphoneDetailPayrolls;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_currency`", referencedColumnName = "`id_currency`", insertable = true, updatable = true)
    public Currency getCurrency() {
        return this.currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_generation_form`", referencedColumnName = "`id_type_employee_payment_method`", insertable = true, updatable = true)
    public TypeGenerationForm getTypeGenerationForm() {
        return this.typeGenerationForm;
    }

    public void setTypeGenerationForm(TypeGenerationForm typeGenerationForm) {
        this.typeGenerationForm = typeGenerationForm;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_user_confirmation`", referencedColumnName = "`id_user`", insertable = true, updatable = true)
    public User getUserByFkUserConfirmation() {
        return this.userByFkUserConfirmation;
    }

    public void setUserByFkUserConfirmation(User userByFkUserConfirmation) {
        this.userByFkUserConfirmation = userByFkUserConfirmation;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_user_elaborate`", referencedColumnName = "`id_user`", insertable = true, updatable = true)
    public User getUserByFkUserElaborate() {
        return this.userByFkUserElaborate;
    }

    public void setUserByFkUserElaborate(User userByFkUserElaborate) {
        this.userByFkUserElaborate = userByFkUserElaborate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_user_prints`", referencedColumnName = "`id_user`", insertable = true, updatable = true)
    public User getUserByFkUserPrints() {
        return this.userByFkUserPrints;
    }

    public void setUserByFkUserPrints(User userByFkUserPrints) {
        this.userByFkUserPrints = userByFkUserPrints;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payroll")
    public List<PayrollDetail> getPayrollDetails() {
        return this.payrollDetails;
    }

    public void setPayrollDetails(List<PayrollDetail> payrollDetails) {
        this.payrollDetails = payrollDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Payroll)) return false;
        final Payroll payroll = (Payroll) o;
        return Objects.equals(getIdPayroll(), payroll.getIdPayroll());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdPayroll());
    }
}

