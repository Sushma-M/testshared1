/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * TravelExpense generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`travel_expense`")
public class TravelExpense implements Serializable {

    private Integer idTravelExpense;
    private String reason;
    private Double value_;
    @Type(type = "DateTime")
    private LocalDateTime creationDate;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private Currency currency;
    private TravelEmployee travelEmployee;
    private TypeTravellingExpense typeTravellingExpense;
    private List<JustifiedTravelExpenseFile> justifiedTravelExpenseFiles = new ArrayList<>();
    private List<ListTravelExpenseDetail> listTravelExpenseDetails = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_travel_expense`", nullable = false, scale = 0, precision = 10)
    public Integer getIdTravelExpense() {
        return this.idTravelExpense;
    }

    public void setIdTravelExpense(Integer idTravelExpense) {
        this.idTravelExpense = idTravelExpense;
    }

    @Column(name = "`reason`", nullable = false, length = 50)
    public String getReason() {
        return this.reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    @Column(name = "`value?`", nullable = false, scale = 4, precision = 19)
    public Double getValue_() {
        return this.value_;
    }

    public void setValue_(Double value_) {
        this.value_ = value_;
    }

    @Column(name = "`creation_date`", nullable = false)
    public LocalDateTime getCreationDate() {
        return this.creationDate;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    @Column(name = "`observation`", nullable = true, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_currency`", referencedColumnName = "`id_currency`", insertable = true, updatable = true)
    public Currency getCurrency() {
        return this.currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_travel`", referencedColumnName = "`id_travel_employee`", insertable = true, updatable = true)
    public TravelEmployee getTravelEmployee() {
        return this.travelEmployee;
    }

    public void setTravelEmployee(TravelEmployee travelEmployee) {
        this.travelEmployee = travelEmployee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_travelling_expense`", referencedColumnName = "`id_type_travelling_expense`", insertable = true, updatable = true)
    public TypeTravellingExpense getTypeTravellingExpense() {
        return this.typeTravellingExpense;
    }

    public void setTypeTravellingExpense(TypeTravellingExpense typeTravellingExpense) {
        this.typeTravellingExpense = typeTravellingExpense;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "travelExpense")
    public List<JustifiedTravelExpenseFile> getJustifiedTravelExpenseFiles() {
        return this.justifiedTravelExpenseFiles;
    }

    public void setJustifiedTravelExpenseFiles(List<JustifiedTravelExpenseFile> justifiedTravelExpenseFiles) {
        this.justifiedTravelExpenseFiles = justifiedTravelExpenseFiles;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "travelExpense")
    public List<ListTravelExpenseDetail> getListTravelExpenseDetails() {
        return this.listTravelExpenseDetails;
    }

    public void setListTravelExpenseDetails(List<ListTravelExpenseDetail> listTravelExpenseDetails) {
        this.listTravelExpenseDetails = listTravelExpenseDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TravelExpense)) return false;
        final TravelExpense travelExpense = (TravelExpense) o;
        return Objects.equals(getIdTravelExpense(), travelExpense.getIdTravelExpense());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdTravelExpense());
    }
}

