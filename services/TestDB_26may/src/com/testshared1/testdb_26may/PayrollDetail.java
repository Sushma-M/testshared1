/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * PayrollDetail generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`payroll_detail`")
public class PayrollDetail implements Serializable {

    private Integer idPayrollDetail;
    @Type(type = "DateTime")
    private LocalDateTime creationDate;
    private Boolean increasedIncomeOutflow;
    private Double basicSalary;
    private Double totalIncome;
    private Double totalExpenditures;
    private Double netSalary;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<ListLoanDetailPayroll> listLoanDetailPayrolls = new ArrayList<>();
    private List<ListCommissionPayroll> listCommissionPayrolls = new ArrayList<>();
    private List<PaymentCheck> paymentChecks = new ArrayList<>();
    private List<ListPeriodicDeductionPayroll> listPeriodicDeductionPayrolls = new ArrayList<>();
    private List<BonusEventual> bonusEventuals = new ArrayList<>();
    private List<ListPeriodicBonusPayroll> listPeriodicBonusPayrolls = new ArrayList<>();
    private List<DeductionEventual> deductionEventuals = new ArrayList<>();
    private List<ListOvertimePayroll> listOvertimePayrolls = new ArrayList<>();
    private List<ListTravelExpenseDetail> listTravelExpenseDetails = new ArrayList<>();
    private Currency currency;
    private Employee employee;
    private Payroll payroll;
    private TypeEmployeePaymentMethod typeEmployeePaymentMethod;
    private TypeGenerationForm typeGenerationForm;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_payroll_detail`", nullable = false, scale = 0, precision = 10)
    public Integer getIdPayrollDetail() {
        return this.idPayrollDetail;
    }

    public void setIdPayrollDetail(Integer idPayrollDetail) {
        this.idPayrollDetail = idPayrollDetail;
    }

    @Column(name = "`creation_date`", nullable = false)
    public LocalDateTime getCreationDate() {
        return this.creationDate;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    @Column(name = "`increased_income_outflow`", nullable = false)
    public Boolean isIncreasedIncomeOutflow() {
        return this.increasedIncomeOutflow;
    }

    public void setIncreasedIncomeOutflow(Boolean increasedIncomeOutflow) {
        this.increasedIncomeOutflow = increasedIncomeOutflow;
    }

    @Column(name = "`basic_salary`", nullable = false, scale = 4, precision = 19)
    public Double getBasicSalary() {
        return this.basicSalary;
    }

    public void setBasicSalary(Double basicSalary) {
        this.basicSalary = basicSalary;
    }

    @Column(name = "`total_income`", nullable = false, scale = 4, precision = 19)
    public Double getTotalIncome() {
        return this.totalIncome;
    }

    public void setTotalIncome(Double totalIncome) {
        this.totalIncome = totalIncome;
    }

    @Column(name = "`total_expenditures`", nullable = false, scale = 4, precision = 19)
    public Double getTotalExpenditures() {
        return this.totalExpenditures;
    }

    public void setTotalExpenditures(Double totalExpenditures) {
        this.totalExpenditures = totalExpenditures;
    }

    @Column(name = "`net_salary`", nullable = false, scale = 4, precision = 19)
    public Double getNetSalary() {
        return this.netSalary;
    }

    public void setNetSalary(Double netSalary) {
        this.netSalary = netSalary;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<ListLoanDetailPayroll> getListLoanDetailPayrolls() {
        return this.listLoanDetailPayrolls;
    }

    public void setListLoanDetailPayrolls(List<ListLoanDetailPayroll> listLoanDetailPayrolls) {
        this.listLoanDetailPayrolls = listLoanDetailPayrolls;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<ListCommissionPayroll> getListCommissionPayrolls() {
        return this.listCommissionPayrolls;
    }

    public void setListCommissionPayrolls(List<ListCommissionPayroll> listCommissionPayrolls) {
        this.listCommissionPayrolls = listCommissionPayrolls;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<PaymentCheck> getPaymentChecks() {
        return this.paymentChecks;
    }

    public void setPaymentChecks(List<PaymentCheck> paymentChecks) {
        this.paymentChecks = paymentChecks;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<ListPeriodicDeductionPayroll> getListPeriodicDeductionPayrolls() {
        return this.listPeriodicDeductionPayrolls;
    }

    public void setListPeriodicDeductionPayrolls(List<ListPeriodicDeductionPayroll> listPeriodicDeductionPayrolls) {
        this.listPeriodicDeductionPayrolls = listPeriodicDeductionPayrolls;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<BonusEventual> getBonusEventuals() {
        return this.bonusEventuals;
    }

    public void setBonusEventuals(List<BonusEventual> bonusEventuals) {
        this.bonusEventuals = bonusEventuals;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<ListPeriodicBonusPayroll> getListPeriodicBonusPayrolls() {
        return this.listPeriodicBonusPayrolls;
    }

    public void setListPeriodicBonusPayrolls(List<ListPeriodicBonusPayroll> listPeriodicBonusPayrolls) {
        this.listPeriodicBonusPayrolls = listPeriodicBonusPayrolls;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<DeductionEventual> getDeductionEventuals() {
        return this.deductionEventuals;
    }

    public void setDeductionEventuals(List<DeductionEventual> deductionEventuals) {
        this.deductionEventuals = deductionEventuals;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<ListOvertimePayroll> getListOvertimePayrolls() {
        return this.listOvertimePayrolls;
    }

    public void setListOvertimePayrolls(List<ListOvertimePayroll> listOvertimePayrolls) {
        this.listOvertimePayrolls = listOvertimePayrolls;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "payrollDetail")
    public List<ListTravelExpenseDetail> getListTravelExpenseDetails() {
        return this.listTravelExpenseDetails;
    }

    public void setListTravelExpenseDetails(List<ListTravelExpenseDetail> listTravelExpenseDetails) {
        this.listTravelExpenseDetails = listTravelExpenseDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_currency`", referencedColumnName = "`id_currency`", insertable = true, updatable = true)
    public Currency getCurrency() {
        return this.currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_payroll`", referencedColumnName = "`id_payroll`", insertable = true, updatable = true)
    public Payroll getPayroll() {
        return this.payroll;
    }

    public void setPayroll(Payroll payroll) {
        this.payroll = payroll;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_employee_payment_method`", referencedColumnName = "`id_type_employee_status`", insertable = true, updatable = true)
    public TypeEmployeePaymentMethod getTypeEmployeePaymentMethod() {
        return this.typeEmployeePaymentMethod;
    }

    public void setTypeEmployeePaymentMethod(TypeEmployeePaymentMethod typeEmployeePaymentMethod) {
        this.typeEmployeePaymentMethod = typeEmployeePaymentMethod;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_generation_form`", referencedColumnName = "`id_type_employee_payment_method`", insertable = true, updatable = true)
    public TypeGenerationForm getTypeGenerationForm() {
        return this.typeGenerationForm;
    }

    public void setTypeGenerationForm(TypeGenerationForm typeGenerationForm) {
        this.typeGenerationForm = typeGenerationForm;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PayrollDetail)) return false;
        final PayrollDetail payrollDetail = (PayrollDetail) o;
        return Objects.equals(getIdPayrollDetail(), payrollDetail.getIdPayrollDetail());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdPayrollDetail());
    }
}

