/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * Alert generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`alert`")
public class Alert implements Serializable {

    private Integer idAlert;
    private String message;
    @Type(type = "DateTime")
    private LocalDateTime alertDate;
    private Boolean confirmation;
    private Integer userLocation;
    private Date userFecha;
    private TypeAlert typeAlert;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_alert`", nullable = false, scale = 0, precision = 10)
    public Integer getIdAlert() {
        return this.idAlert;
    }

    public void setIdAlert(Integer idAlert) {
        this.idAlert = idAlert;
    }

    @Column(name = "`message`", nullable = false, length = 150)
    public String getMessage() {
        return this.message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    @Column(name = "`alert_date`", nullable = false)
    public LocalDateTime getAlertDate() {
        return this.alertDate;
    }

    public void setAlertDate(LocalDateTime alertDate) {
        this.alertDate = alertDate;
    }

    @Column(name = "`confirmation`", nullable = false)
    public Boolean isConfirmation() {
        return this.confirmation;
    }

    public void setConfirmation(Boolean confirmation) {
        this.confirmation = confirmation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_alert`", referencedColumnName = "`id_type_alert`", insertable = true, updatable = true)
    public TypeAlert getTypeAlert() {
        return this.typeAlert;
    }

    public void setTypeAlert(TypeAlert typeAlert) {
        this.typeAlert = typeAlert;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Alert)) return false;
        final Alert alert = (Alert) o;
        return Objects.equals(getIdAlert(), alert.getIdAlert());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdAlert());
    }
}

