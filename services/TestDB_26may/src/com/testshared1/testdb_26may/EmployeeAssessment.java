/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * EmployeeAssessment generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`employee_assessment`")
public class EmployeeAssessment implements Serializable {

    private Integer idEmployeeAssessment;
    @Type(type = "DateTime")
    private LocalDateTime evaluationDate;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<AssessmentEmployeeData> assessmentEmployeeDatas = new ArrayList<>();
    private Employee employeeByFkEvaluatedEmployee;
    private Employee employeeByFkEvaluatingEmployee;
    private User user;
    private WorkPosition workPosition;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_employee_assessment`", nullable = false, scale = 0, precision = 10)
    public Integer getIdEmployeeAssessment() {
        return this.idEmployeeAssessment;
    }

    public void setIdEmployeeAssessment(Integer idEmployeeAssessment) {
        this.idEmployeeAssessment = idEmployeeAssessment;
    }

    @Column(name = "`evaluation_date`", nullable = false)
    public LocalDateTime getEvaluationDate() {
        return this.evaluationDate;
    }

    public void setEvaluationDate(LocalDateTime evaluationDate) {
        this.evaluationDate = evaluationDate;
    }

    @Column(name = "`observation`", nullable = false, length = 150)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employeeAssessment")
    public List<AssessmentEmployeeData> getAssessmentEmployeeDatas() {
        return this.assessmentEmployeeDatas;
    }

    public void setAssessmentEmployeeDatas(List<AssessmentEmployeeData> assessmentEmployeeDatas) {
        this.assessmentEmployeeDatas = assessmentEmployeeDatas;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_evaluated_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployeeByFkEvaluatedEmployee() {
        return this.employeeByFkEvaluatedEmployee;
    }

    public void setEmployeeByFkEvaluatedEmployee(Employee employeeByFkEvaluatedEmployee) {
        this.employeeByFkEvaluatedEmployee = employeeByFkEvaluatedEmployee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_evaluating_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployeeByFkEvaluatingEmployee() {
        return this.employeeByFkEvaluatingEmployee;
    }

    public void setEmployeeByFkEvaluatingEmployee(Employee employeeByFkEvaluatingEmployee) {
        this.employeeByFkEvaluatingEmployee = employeeByFkEvaluatingEmployee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_user_data_entry`", referencedColumnName = "`id_user`", insertable = true, updatable = true)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_work_position_evaluated_employee`", referencedColumnName = "`id_work_position`", insertable = true, updatable = true)
    public WorkPosition getWorkPosition() {
        return this.workPosition;
    }

    public void setWorkPosition(WorkPosition workPosition) {
        this.workPosition = workPosition;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EmployeeAssessment)) return false;
        final EmployeeAssessment employeeAssessment = (EmployeeAssessment) o;
        return Objects.equals(getIdEmployeeAssessment(), employeeAssessment.getIdEmployeeAssessment());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdEmployeeAssessment());
    }
}

