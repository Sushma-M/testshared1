/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * WorkPositionVacant generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`work_position_vacant`")
public class WorkPositionVacant implements Serializable {

    private Integer idWorkPositionVacant;
    private String description_;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private ApplicantToPosition applicantToPositionByFkAspiranteAsignado;
    private WorkPosition workPosition;
    private List<ApplicantToPosition> applicantToPositionsForFkWorkPositionVacant = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_work_position_vacant`", nullable = false, scale = 0, precision = 10)
    public Integer getIdWorkPositionVacant() {
        return this.idWorkPositionVacant;
    }

    public void setIdWorkPositionVacant(Integer idWorkPositionVacant) {
        this.idWorkPositionVacant = idWorkPositionVacant;
    }

    @Column(name = "`description?`", nullable = false, length = 255)
    public String getDescription_() {
        return this.description_;
    }

    public void setDescription_(String description_) {
        this.description_ = description_;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_aspirante_asignado`", referencedColumnName = "`id_applicant_to_position`", insertable = true, updatable = true)
    public ApplicantToPosition getApplicantToPositionByFkAspiranteAsignado() {
        return this.applicantToPositionByFkAspiranteAsignado;
    }

    public void setApplicantToPositionByFkAspiranteAsignado(ApplicantToPosition applicantToPositionByFkAspiranteAsignado) {
        this.applicantToPositionByFkAspiranteAsignado = applicantToPositionByFkAspiranteAsignado;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_work_position`", referencedColumnName = "`id_work_position`", insertable = true, updatable = true)
    public WorkPosition getWorkPosition() {
        return this.workPosition;
    }

    public void setWorkPosition(WorkPosition workPosition) {
        this.workPosition = workPosition;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "workPositionVacantByFkWorkPositionVacant")
    public List<ApplicantToPosition> getApplicantToPositionsForFkWorkPositionVacant() {
        return this.applicantToPositionsForFkWorkPositionVacant;
    }

    public void setApplicantToPositionsForFkWorkPositionVacant(List<ApplicantToPosition> applicantToPositionsForFkWorkPositionVacant) {
        this.applicantToPositionsForFkWorkPositionVacant = applicantToPositionsForFkWorkPositionVacant;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WorkPositionVacant)) return false;
        final WorkPositionVacant workPositionVacant = (WorkPositionVacant) o;
        return Objects.equals(getIdWorkPositionVacant(), workPositionVacant.getIdWorkPositionVacant());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdWorkPositionVacant());
    }
}

