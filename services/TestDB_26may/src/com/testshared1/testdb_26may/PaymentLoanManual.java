/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PaymentLoanManual generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`payment_loan_manual`")
public class PaymentLoanManual implements Serializable {

    private Integer idPaymentLoanManual;
    private Double valuePaid;
    private Double interestRate;
    private Double interestValue;
    private Double totalValue;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private Currency currency;
    private Loan loan;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_payment_loan_manual`", nullable = false, scale = 0, precision = 10)
    public Integer getIdPaymentLoanManual() {
        return this.idPaymentLoanManual;
    }

    public void setIdPaymentLoanManual(Integer idPaymentLoanManual) {
        this.idPaymentLoanManual = idPaymentLoanManual;
    }

    @Column(name = "`value_paid`", nullable = false, scale = 4, precision = 19)
    public Double getValuePaid() {
        return this.valuePaid;
    }

    public void setValuePaid(Double valuePaid) {
        this.valuePaid = valuePaid;
    }

    @Column(name = "`interest_rate`", nullable = false, scale = 4, precision = 19)
    public Double getInterestRate() {
        return this.interestRate;
    }

    public void setInterestRate(Double interestRate) {
        this.interestRate = interestRate;
    }

    @Column(name = "`interest_value`", nullable = false, scale = 4, precision = 19)
    public Double getInterestValue() {
        return this.interestValue;
    }

    public void setInterestValue(Double interestValue) {
        this.interestValue = interestValue;
    }

    @Column(name = "`total_value`", nullable = false, scale = 4, precision = 19)
    public Double getTotalValue() {
        return this.totalValue;
    }

    public void setTotalValue(Double totalValue) {
        this.totalValue = totalValue;
    }

    @Column(name = "`observation`", nullable = true, length = 100)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_currency`", referencedColumnName = "`id_currency`", insertable = true, updatable = true)
    public Currency getCurrency() {
        return this.currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_loan`", referencedColumnName = "`id_loan`", insertable = true, updatable = true)
    public Loan getLoan() {
        return this.loan;
    }

    public void setLoan(Loan loan) {
        this.loan = loan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PaymentLoanManual)) return false;
        final PaymentLoanManual paymentLoanManual = (PaymentLoanManual) o;
        return Objects.equals(getIdPaymentLoanManual(), paymentLoanManual.getIdPaymentLoanManual());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdPaymentLoanManual());
    }
}

