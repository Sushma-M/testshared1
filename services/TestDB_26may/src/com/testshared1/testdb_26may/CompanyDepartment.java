/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * CompanyDepartment generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`company_department`")
public class CompanyDepartment implements Serializable {

    private Integer idCompanyDepartment;
    private String name;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<WorkPosition> workPositions = new ArrayList<>();
    private CompanyDepartment companyDepartmentByFkSuperiorDepartment;
    private List<CompanyDepartment> companyDepartmentsForFkSuperiorDepartment = new ArrayList<>();
    private Location location;
    private TypeCompanyDepartment typeCompanyDepartment;

    @Id
    @Column(name = "`id_company_department`", nullable = false, scale = 0, precision = 10)
    public Integer getIdCompanyDepartment() {
        return this.idCompanyDepartment;
    }

    public void setIdCompanyDepartment(Integer idCompanyDepartment) {
        this.idCompanyDepartment = idCompanyDepartment;
    }

    @Column(name = "`name`", nullable = false, length = 150)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`observation`", nullable = true, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "companyDepartment")
    public List<WorkPosition> getWorkPositions() {
        return this.workPositions;
    }

    public void setWorkPositions(List<WorkPosition> workPositions) {
        this.workPositions = workPositions;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"companyDepartmentByFkSuperiorDepartment", "companyDepartmentsForFkSuperiorDepartment"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_superior_department`", referencedColumnName = "`id_company_department`", insertable = true, updatable = true)
    public CompanyDepartment getCompanyDepartmentByFkSuperiorDepartment() {
        return this.companyDepartmentByFkSuperiorDepartment;
    }

    public void setCompanyDepartmentByFkSuperiorDepartment(CompanyDepartment companyDepartmentByFkSuperiorDepartment) {
        this.companyDepartmentByFkSuperiorDepartment = companyDepartmentByFkSuperiorDepartment;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"companyDepartmentByFkSuperiorDepartment", "companyDepartmentsForFkSuperiorDepartment"})
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "companyDepartmentByFkSuperiorDepartment")
    public List<CompanyDepartment> getCompanyDepartmentsForFkSuperiorDepartment() {
        return this.companyDepartmentsForFkSuperiorDepartment;
    }

    public void setCompanyDepartmentsForFkSuperiorDepartment(List<CompanyDepartment> companyDepartmentsForFkSuperiorDepartment) {
        this.companyDepartmentsForFkSuperiorDepartment = companyDepartmentsForFkSuperiorDepartment;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_location`", referencedColumnName = "`id_location`", insertable = true, updatable = true)
    public Location getLocation() {
        return this.location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_company_department`", referencedColumnName = "`id_type_company_department`", insertable = true, updatable = true)
    public TypeCompanyDepartment getTypeCompanyDepartment() {
        return this.typeCompanyDepartment;
    }

    public void setTypeCompanyDepartment(TypeCompanyDepartment typeCompanyDepartment) {
        this.typeCompanyDepartment = typeCompanyDepartment;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CompanyDepartment)) return false;
        final CompanyDepartment companyDepartment = (CompanyDepartment) o;
        return Objects.equals(getIdCompanyDepartment(), companyDepartment.getIdCompanyDepartment());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdCompanyDepartment());
    }
}

