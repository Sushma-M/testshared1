/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * BadgeTemplate generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`badge_template`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`template_name`"})})
public class BadgeTemplate implements Serializable {

    private Integer idBadgeTemplate;
    private String templateName;
    @JsonIgnore
    private byte[] information;
    @JsonIgnore
    private byte[] backgroundDataFront;
    @JsonIgnore
    private byte[] backgroundDataBehind;
    @JsonIgnore
    private byte[] dataThumbnailView;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_badge_template`", nullable = false, scale = 0, precision = 10)
    public Integer getIdBadgeTemplate() {
        return this.idBadgeTemplate;
    }

    public void setIdBadgeTemplate(Integer idBadgeTemplate) {
        this.idBadgeTemplate = idBadgeTemplate;
    }

    @Column(name = "`template_name`", nullable = false, length = 32)
    public String getTemplateName() {
        return this.templateName;
    }

    public void setTemplateName(String templateName) {
        this.templateName = templateName;
    }

    @Column(name = "`information`", nullable = false)
    public byte[] getInformation() {
        return this.information;
    }

    public void setInformation(byte[] information) {
        this.information = information;
    }

    @Column(name = "`background_data_front`", nullable = false)
    public byte[] getBackgroundDataFront() {
        return this.backgroundDataFront;
    }

    public void setBackgroundDataFront(byte[] backgroundDataFront) {
        this.backgroundDataFront = backgroundDataFront;
    }

    @Column(name = "`background_data_behind`", nullable = false)
    public byte[] getBackgroundDataBehind() {
        return this.backgroundDataBehind;
    }

    public void setBackgroundDataBehind(byte[] backgroundDataBehind) {
        this.backgroundDataBehind = backgroundDataBehind;
    }

    @Column(name = "`data_thumbnail_view`", nullable = false)
    public byte[] getDataThumbnailView() {
        return this.dataThumbnailView;
    }

    public void setDataThumbnailView(byte[] dataThumbnailView) {
        this.dataThumbnailView = dataThumbnailView;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIME)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BadgeTemplate)) return false;
        final BadgeTemplate badgeTemplate = (BadgeTemplate) o;
        return Objects.equals(getIdBadgeTemplate(), badgeTemplate.getIdBadgeTemplate());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdBadgeTemplate());
    }
}

