/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * EmployeeFileLocation generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`employee_file_location`")
public class EmployeeFileLocation implements Serializable {

    private Integer idEmployeeFileLocation;
    @Type(type = "DateTime")
    private LocalDateTime dateOfMovement;
    private Integer containerNumber;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private Employee employee;
    private TypeMovement typeMovement;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_employee_file_location`", nullable = false, scale = 0, precision = 10)
    public Integer getIdEmployeeFileLocation() {
        return this.idEmployeeFileLocation;
    }

    public void setIdEmployeeFileLocation(Integer idEmployeeFileLocation) {
        this.idEmployeeFileLocation = idEmployeeFileLocation;
    }

    @Column(name = "`date_of_movement`", nullable = false)
    public LocalDateTime getDateOfMovement() {
        return this.dateOfMovement;
    }

    public void setDateOfMovement(LocalDateTime dateOfMovement) {
        this.dateOfMovement = dateOfMovement;
    }

    @Column(name = "`container_number`", nullable = false, scale = 0, precision = 10)
    public Integer getContainerNumber() {
        return this.containerNumber;
    }

    public void setContainerNumber(Integer containerNumber) {
        this.containerNumber = containerNumber;
    }

    @Column(name = "`observation`", nullable = true, length = 150)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_movement`", referencedColumnName = "`id_type_movement`", insertable = true, updatable = true)
    public TypeMovement getTypeMovement() {
        return this.typeMovement;
    }

    public void setTypeMovement(TypeMovement typeMovement) {
        this.typeMovement = typeMovement;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EmployeeFileLocation)) return false;
        final EmployeeFileLocation employeeFileLocation = (EmployeeFileLocation) o;
        return Objects.equals(getIdEmployeeFileLocation(), employeeFileLocation.getIdEmployeeFileLocation());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdEmployeeFileLocation());
    }
}

