/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`user`")
public class User implements Serializable {

    private Integer idUser;
    private String userFullname;
    private String login;
    private String password;
    private String identityNumber;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<PaymentCheck> paymentChecks = new ArrayList<>();
    private Country country;
    private Role role;
    private List<Payroll> payrollsForFkUserConfirmation = new ArrayList<>();
    private List<Payroll> payrollsForFkUserElaborate = new ArrayList<>();
    private List<Payroll> payrollsForFkUserPrints = new ArrayList<>();
    private List<EmployeeAssessment> employeeAssessments = new ArrayList<>();
    private List<ApplicantNote> applicantNotes = new ArrayList<>();
    private List<EmployeeMessage> employeeMessagesForFkUserSends = new ArrayList<>();
    private List<EmployeeMessage> employeeMessagesForFkUserReceive = new ArrayList<>();
    private List<Log> logs = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_user`", nullable = false, scale = 0, precision = 10)
    public Integer getIdUser() {
        return this.idUser;
    }

    public void setIdUser(Integer idUser) {
        this.idUser = idUser;
    }

    @Column(name = "`user_fullname`", nullable = false, length = 150)
    public String getUserFullname() {
        return this.userFullname;
    }

    public void setUserFullname(String userFullname) {
        this.userFullname = userFullname;
    }

    @Column(name = "`login`", nullable = false, length = 50)
    public String getLogin() {
        return this.login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    @Column(name = "`password`", nullable = false, length = 64)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "`identity_number`", nullable = false, length = 25)
    public String getIdentityNumber() {
        return this.identityNumber;
    }

    public void setIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "user")
    public List<PaymentCheck> getPaymentChecks() {
        return this.paymentChecks;
    }

    public void setPaymentChecks(List<PaymentCheck> paymentChecks) {
        this.paymentChecks = paymentChecks;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_nationality`", referencedColumnName = "`id_country`", insertable = true, updatable = true)
    public Country getCountry() {
        return this.country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_role`", referencedColumnName = "`id_role`", insertable = true, updatable = true)
    public Role getRole() {
        return this.role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "userByFkUserConfirmation")
    public List<Payroll> getPayrollsForFkUserConfirmation() {
        return this.payrollsForFkUserConfirmation;
    }

    public void setPayrollsForFkUserConfirmation(List<Payroll> payrollsForFkUserConfirmation) {
        this.payrollsForFkUserConfirmation = payrollsForFkUserConfirmation;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "userByFkUserElaborate")
    public List<Payroll> getPayrollsForFkUserElaborate() {
        return this.payrollsForFkUserElaborate;
    }

    public void setPayrollsForFkUserElaborate(List<Payroll> payrollsForFkUserElaborate) {
        this.payrollsForFkUserElaborate = payrollsForFkUserElaborate;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "userByFkUserPrints")
    public List<Payroll> getPayrollsForFkUserPrints() {
        return this.payrollsForFkUserPrints;
    }

    public void setPayrollsForFkUserPrints(List<Payroll> payrollsForFkUserPrints) {
        this.payrollsForFkUserPrints = payrollsForFkUserPrints;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "user")
    public List<EmployeeAssessment> getEmployeeAssessments() {
        return this.employeeAssessments;
    }

    public void setEmployeeAssessments(List<EmployeeAssessment> employeeAssessments) {
        this.employeeAssessments = employeeAssessments;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "user")
    public List<ApplicantNote> getApplicantNotes() {
        return this.applicantNotes;
    }

    public void setApplicantNotes(List<ApplicantNote> applicantNotes) {
        this.applicantNotes = applicantNotes;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "userByFkUserSends")
    public List<EmployeeMessage> getEmployeeMessagesForFkUserSends() {
        return this.employeeMessagesForFkUserSends;
    }

    public void setEmployeeMessagesForFkUserSends(List<EmployeeMessage> employeeMessagesForFkUserSends) {
        this.employeeMessagesForFkUserSends = employeeMessagesForFkUserSends;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "userByFkUserReceive")
    public List<EmployeeMessage> getEmployeeMessagesForFkUserReceive() {
        return this.employeeMessagesForFkUserReceive;
    }

    public void setEmployeeMessagesForFkUserReceive(List<EmployeeMessage> employeeMessagesForFkUserReceive) {
        this.employeeMessagesForFkUserReceive = employeeMessagesForFkUserReceive;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "user")
    public List<Log> getLogs() {
        return this.logs;
    }

    public void setLogs(List<Log> logs) {
        this.logs = logs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof User)) return false;
        final User user = (User) o;
        return Objects.equals(getIdUser(), user.getIdUser());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdUser());
    }
}

