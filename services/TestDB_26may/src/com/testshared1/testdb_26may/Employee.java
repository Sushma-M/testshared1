/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Employee generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`employee`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`fk_nationality`", "`identity_number`"}),
        @UniqueConstraint(columnNames = {"`uuid`"})})
public class Employee implements Serializable {

    private Integer idEmployee;
    private String uuid;
    private String firstName;
    private String secondName;
    private String surname;
    private String secondSurname;
    private String marriageName;
    private Date workStartDate;
    private Character sex;
    private String identityNumber;
    private Date birthDate;
    private String email;
    private String observation;
    private Boolean completeRegistration;
    private Boolean activeEmployee;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<Asset> assets = new ArrayList<>();
    private List<EmployeeEducation> employeeEducations = new ArrayList<>();
    private List<AssetAssignDocument> assetAssignDocuments = new ArrayList<>();
    private List<IsrDetail> isrDetails = new ArrayList<>();
    private List<EmployeeContract> employeeContracts = new ArrayList<>();
    private List<TimeSheet> timeSheets = new ArrayList<>();
    private List<EmployeeLaborHistory> employeeLaborHistories = new ArrayList<>();
    private List<EmployeeFile> employeeFiles = new ArrayList<>();
    private List<ListPeriodicBonusEmployee> listPeriodicBonusEmployees = new ArrayList<>();
    private List<Loan> loans = new ArrayList<>();
    private List<EmployeeWorkProof> employeeWorkProofs = new ArrayList<>();
    private List<EmployeeWorkDay> employeeWorkDays = new ArrayList<>();
    private List<EmployeeTermination> employeeTerminations = new ArrayList<>();
    private List<EmployeeFileLocation> employeeFileLocations = new ArrayList<>();
    private List<VacationDayCredit> vacationDayCredits = new ArrayList<>();
    private List<EmployeeSalary> employeeSalaries = new ArrayList<>();
    private List<EmployeeGeneralDetail> employeeGeneralDetails = new ArrayList<>();
    private List<IncidenceEmployee> incidenceEmployees = new ArrayList<>();
    private List<VacationDayDebit> vacationDayDebits = new ArrayList<>();
    private List<CompensatoryDayCredit> compensatoryDayCredits = new ArrayList<>();
    private List<ListEmployeePosition> listEmployeePositions = new ArrayList<>();
    private List<TravelEmployee> travelEmployees = new ArrayList<>();
    private List<EmployeeAssessment> employeeAssessmentsForFkEvaluatedEmployee = new ArrayList<>();
    private List<EmployeeAssessment> employeeAssessmentsForFkEvaluatingEmployee = new ArrayList<>();
    private List<ListPeriodicDeductionEmployee> listPeriodicDeductionEmployees = new ArrayList<>();
    private List<JustifiedAbsense> justifiedAbsenses = new ArrayList<>();
    private List<EmployeeTraining> employeeTrainings = new ArrayList<>();
    private List<EmployeePersonalReference> employeePersonalReferences = new ArrayList<>();
    private List<ScheduleDynamic> scheduleDynamics = new ArrayList<>();
    private List<AssetDischargeDocument> assetDischargeDocuments = new ArrayList<>();
    private List<BadgeEmployee> badgeEmployees = new ArrayList<>();
    private ApplicantToPosition applicantToPosition;
    private Country country;
    private TypeEmployeeStatus typeEmployeeStatus;
    private TypeMaritalStatus typeMaritalStatus;
    private TypeRecruitment typeRecruitment;
    private List<OverTimeEmployee> overTimeEmployees = new ArrayList<>();
    private List<PayrollDetail> payrollDetails = new ArrayList<>();
    private List<ListEmployeePhone> listEmployeePhones = new ArrayList<>();
    private List<EmployeePhotoFile> employeePhotoFiles = new ArrayList<>();
    private List<CompensatoryDayDebit> compensatoryDayDebits = new ArrayList<>();
    private List<ListCommissionEmployee> listCommissionEmployees = new ArrayList<>();

    @Id
    @Column(name = "`id_employee`", nullable = false, scale = 0, precision = 10)
    public Integer getIdEmployee() {
        return this.idEmployee;
    }

    public void setIdEmployee(Integer idEmployee) {
        this.idEmployee = idEmployee;
    }

    @Column(name = "`uuid`", nullable = false, length = 36)
    public String getUuid() {
        return this.uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    @Column(name = "`first_name`", nullable = false, length = 25)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "`second_name`", nullable = true, length = 25)
    public String getSecondName() {
        return this.secondName;
    }

    public void setSecondName(String secondName) {
        this.secondName = secondName;
    }

    @Column(name = "`surname`", nullable = false, length = 25)
    public String getSurname() {
        return this.surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    @Column(name = "`second_surname`", nullable = true, length = 25)
    public String getSecondSurname() {
        return this.secondSurname;
    }

    public void setSecondSurname(String secondSurname) {
        this.secondSurname = secondSurname;
    }

    @Column(name = "`marriage_name`", nullable = true, length = 25)
    public String getMarriageName() {
        return this.marriageName;
    }

    public void setMarriageName(String marriageName) {
        this.marriageName = marriageName;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`work_start_date`", nullable = false)
    public Date getWorkStartDate() {
        return this.workStartDate;
    }

    public void setWorkStartDate(Date workStartDate) {
        this.workStartDate = workStartDate;
    }

    @Column(name = "`sex`", nullable = false, length = 1)
    public Character getSex() {
        return this.sex;
    }

    public void setSex(Character sex) {
        this.sex = sex;
    }

    @Column(name = "`identity_number`", nullable = false, length = 25)
    public String getIdentityNumber() {
        return this.identityNumber;
    }

    public void setIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`birth_date`", nullable = false)
    public Date getBirthDate() {
        return this.birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    @Column(name = "`email`", nullable = false, length = 60)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`observation`", nullable = true, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`complete_registration`", nullable = false)
    public Boolean isCompleteRegistration() {
        return this.completeRegistration;
    }

    public void setCompleteRegistration(Boolean completeRegistration) {
        this.completeRegistration = completeRegistration;
    }

    @Column(name = "`active_employee`", nullable = false)
    public Boolean isActiveEmployee() {
        return this.activeEmployee;
    }

    public void setActiveEmployee(Boolean activeEmployee) {
        this.activeEmployee = activeEmployee;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<Asset> getAssets() {
        return this.assets;
    }

    public void setAssets(List<Asset> assets) {
        this.assets = assets;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeEducation> getEmployeeEducations() {
        return this.employeeEducations;
    }

    public void setEmployeeEducations(List<EmployeeEducation> employeeEducations) {
        this.employeeEducations = employeeEducations;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<AssetAssignDocument> getAssetAssignDocuments() {
        return this.assetAssignDocuments;
    }

    public void setAssetAssignDocuments(List<AssetAssignDocument> assetAssignDocuments) {
        this.assetAssignDocuments = assetAssignDocuments;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<IsrDetail> getIsrDetails() {
        return this.isrDetails;
    }

    public void setIsrDetails(List<IsrDetail> isrDetails) {
        this.isrDetails = isrDetails;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeContract> getEmployeeContracts() {
        return this.employeeContracts;
    }

    public void setEmployeeContracts(List<EmployeeContract> employeeContracts) {
        this.employeeContracts = employeeContracts;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<TimeSheet> getTimeSheets() {
        return this.timeSheets;
    }

    public void setTimeSheets(List<TimeSheet> timeSheets) {
        this.timeSheets = timeSheets;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeLaborHistory> getEmployeeLaborHistories() {
        return this.employeeLaborHistories;
    }

    public void setEmployeeLaborHistories(List<EmployeeLaborHistory> employeeLaborHistories) {
        this.employeeLaborHistories = employeeLaborHistories;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeFile> getEmployeeFiles() {
        return this.employeeFiles;
    }

    public void setEmployeeFiles(List<EmployeeFile> employeeFiles) {
        this.employeeFiles = employeeFiles;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<ListPeriodicBonusEmployee> getListPeriodicBonusEmployees() {
        return this.listPeriodicBonusEmployees;
    }

    public void setListPeriodicBonusEmployees(List<ListPeriodicBonusEmployee> listPeriodicBonusEmployees) {
        this.listPeriodicBonusEmployees = listPeriodicBonusEmployees;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<Loan> getLoans() {
        return this.loans;
    }

    public void setLoans(List<Loan> loans) {
        this.loans = loans;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeWorkProof> getEmployeeWorkProofs() {
        return this.employeeWorkProofs;
    }

    public void setEmployeeWorkProofs(List<EmployeeWorkProof> employeeWorkProofs) {
        this.employeeWorkProofs = employeeWorkProofs;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeWorkDay> getEmployeeWorkDays() {
        return this.employeeWorkDays;
    }

    public void setEmployeeWorkDays(List<EmployeeWorkDay> employeeWorkDays) {
        this.employeeWorkDays = employeeWorkDays;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeTermination> getEmployeeTerminations() {
        return this.employeeTerminations;
    }

    public void setEmployeeTerminations(List<EmployeeTermination> employeeTerminations) {
        this.employeeTerminations = employeeTerminations;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeFileLocation> getEmployeeFileLocations() {
        return this.employeeFileLocations;
    }

    public void setEmployeeFileLocations(List<EmployeeFileLocation> employeeFileLocations) {
        this.employeeFileLocations = employeeFileLocations;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<VacationDayCredit> getVacationDayCredits() {
        return this.vacationDayCredits;
    }

    public void setVacationDayCredits(List<VacationDayCredit> vacationDayCredits) {
        this.vacationDayCredits = vacationDayCredits;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeSalary> getEmployeeSalaries() {
        return this.employeeSalaries;
    }

    public void setEmployeeSalaries(List<EmployeeSalary> employeeSalaries) {
        this.employeeSalaries = employeeSalaries;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeGeneralDetail> getEmployeeGeneralDetails() {
        return this.employeeGeneralDetails;
    }

    public void setEmployeeGeneralDetails(List<EmployeeGeneralDetail> employeeGeneralDetails) {
        this.employeeGeneralDetails = employeeGeneralDetails;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<IncidenceEmployee> getIncidenceEmployees() {
        return this.incidenceEmployees;
    }

    public void setIncidenceEmployees(List<IncidenceEmployee> incidenceEmployees) {
        this.incidenceEmployees = incidenceEmployees;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<VacationDayDebit> getVacationDayDebits() {
        return this.vacationDayDebits;
    }

    public void setVacationDayDebits(List<VacationDayDebit> vacationDayDebits) {
        this.vacationDayDebits = vacationDayDebits;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<CompensatoryDayCredit> getCompensatoryDayCredits() {
        return this.compensatoryDayCredits;
    }

    public void setCompensatoryDayCredits(List<CompensatoryDayCredit> compensatoryDayCredits) {
        this.compensatoryDayCredits = compensatoryDayCredits;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<ListEmployeePosition> getListEmployeePositions() {
        return this.listEmployeePositions;
    }

    public void setListEmployeePositions(List<ListEmployeePosition> listEmployeePositions) {
        this.listEmployeePositions = listEmployeePositions;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<TravelEmployee> getTravelEmployees() {
        return this.travelEmployees;
    }

    public void setTravelEmployees(List<TravelEmployee> travelEmployees) {
        this.travelEmployees = travelEmployees;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employeeByFkEvaluatedEmployee")
    public List<EmployeeAssessment> getEmployeeAssessmentsForFkEvaluatedEmployee() {
        return this.employeeAssessmentsForFkEvaluatedEmployee;
    }

    public void setEmployeeAssessmentsForFkEvaluatedEmployee(List<EmployeeAssessment> employeeAssessmentsForFkEvaluatedEmployee) {
        this.employeeAssessmentsForFkEvaluatedEmployee = employeeAssessmentsForFkEvaluatedEmployee;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employeeByFkEvaluatingEmployee")
    public List<EmployeeAssessment> getEmployeeAssessmentsForFkEvaluatingEmployee() {
        return this.employeeAssessmentsForFkEvaluatingEmployee;
    }

    public void setEmployeeAssessmentsForFkEvaluatingEmployee(List<EmployeeAssessment> employeeAssessmentsForFkEvaluatingEmployee) {
        this.employeeAssessmentsForFkEvaluatingEmployee = employeeAssessmentsForFkEvaluatingEmployee;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<ListPeriodicDeductionEmployee> getListPeriodicDeductionEmployees() {
        return this.listPeriodicDeductionEmployees;
    }

    public void setListPeriodicDeductionEmployees(List<ListPeriodicDeductionEmployee> listPeriodicDeductionEmployees) {
        this.listPeriodicDeductionEmployees = listPeriodicDeductionEmployees;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<JustifiedAbsense> getJustifiedAbsenses() {
        return this.justifiedAbsenses;
    }

    public void setJustifiedAbsenses(List<JustifiedAbsense> justifiedAbsenses) {
        this.justifiedAbsenses = justifiedAbsenses;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeeTraining> getEmployeeTrainings() {
        return this.employeeTrainings;
    }

    public void setEmployeeTrainings(List<EmployeeTraining> employeeTrainings) {
        this.employeeTrainings = employeeTrainings;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeePersonalReference> getEmployeePersonalReferences() {
        return this.employeePersonalReferences;
    }

    public void setEmployeePersonalReferences(List<EmployeePersonalReference> employeePersonalReferences) {
        this.employeePersonalReferences = employeePersonalReferences;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<ScheduleDynamic> getScheduleDynamics() {
        return this.scheduleDynamics;
    }

    public void setScheduleDynamics(List<ScheduleDynamic> scheduleDynamics) {
        this.scheduleDynamics = scheduleDynamics;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<AssetDischargeDocument> getAssetDischargeDocuments() {
        return this.assetDischargeDocuments;
    }

    public void setAssetDischargeDocuments(List<AssetDischargeDocument> assetDischargeDocuments) {
        this.assetDischargeDocuments = assetDischargeDocuments;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<BadgeEmployee> getBadgeEmployees() {
        return this.badgeEmployees;
    }

    public void setBadgeEmployees(List<BadgeEmployee> badgeEmployees) {
        this.badgeEmployees = badgeEmployees;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_applicant_to_positionp`", referencedColumnName = "`id_applicant_to_position`", insertable = true, updatable = true)
    public ApplicantToPosition getApplicantToPosition() {
        return this.applicantToPosition;
    }

    public void setApplicantToPosition(ApplicantToPosition applicantToPosition) {
        this.applicantToPosition = applicantToPosition;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_nationality`", referencedColumnName = "`id_country`", insertable = true, updatable = true)
    public Country getCountry() {
        return this.country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_employee_status`", referencedColumnName = "`id_type_applicant_status`", insertable = true, updatable = true)
    public TypeEmployeeStatus getTypeEmployeeStatus() {
        return this.typeEmployeeStatus;
    }

    public void setTypeEmployeeStatus(TypeEmployeeStatus typeEmployeeStatus) {
        this.typeEmployeeStatus = typeEmployeeStatus;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_marital_status`", referencedColumnName = "`id_type_employee_termination`", insertable = true, updatable = true)
    public TypeMaritalStatus getTypeMaritalStatus() {
        return this.typeMaritalStatus;
    }

    public void setTypeMaritalStatus(TypeMaritalStatus typeMaritalStatus) {
        this.typeMaritalStatus = typeMaritalStatus;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_recruitment`", referencedColumnName = "`id_type_recruitment`", insertable = true, updatable = true)
    public TypeRecruitment getTypeRecruitment() {
        return this.typeRecruitment;
    }

    public void setTypeRecruitment(TypeRecruitment typeRecruitment) {
        this.typeRecruitment = typeRecruitment;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<OverTimeEmployee> getOverTimeEmployees() {
        return this.overTimeEmployees;
    }

    public void setOverTimeEmployees(List<OverTimeEmployee> overTimeEmployees) {
        this.overTimeEmployees = overTimeEmployees;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<PayrollDetail> getPayrollDetails() {
        return this.payrollDetails;
    }

    public void setPayrollDetails(List<PayrollDetail> payrollDetails) {
        this.payrollDetails = payrollDetails;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<ListEmployeePhone> getListEmployeePhones() {
        return this.listEmployeePhones;
    }

    public void setListEmployeePhones(List<ListEmployeePhone> listEmployeePhones) {
        this.listEmployeePhones = listEmployeePhones;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<EmployeePhotoFile> getEmployeePhotoFiles() {
        return this.employeePhotoFiles;
    }

    public void setEmployeePhotoFiles(List<EmployeePhotoFile> employeePhotoFiles) {
        this.employeePhotoFiles = employeePhotoFiles;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<CompensatoryDayDebit> getCompensatoryDayDebits() {
        return this.compensatoryDayDebits;
    }

    public void setCompensatoryDayDebits(List<CompensatoryDayDebit> compensatoryDayDebits) {
        this.compensatoryDayDebits = compensatoryDayDebits;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "employee")
    public List<ListCommissionEmployee> getListCommissionEmployees() {
        return this.listCommissionEmployees;
    }

    public void setListCommissionEmployees(List<ListCommissionEmployee> listCommissionEmployees) {
        this.listCommissionEmployees = listCommissionEmployees;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Employee)) return false;
        final Employee employee = (Employee) o;
        return Objects.equals(getIdEmployee(), employee.getIdEmployee());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdEmployee());
    }
}

