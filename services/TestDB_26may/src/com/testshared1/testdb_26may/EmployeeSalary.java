/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * EmployeeSalary generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`employee_salary`")
public class EmployeeSalary implements Serializable {

    private Integer idEmployeeSalary;
    private String bankAccountNumber;
    private Boolean active;
    private Double monthlySalary;
    private Double biweeklySalary;
    private Double basicWageHour;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private Bank bank;
    private Currency currency;
    private Employee employee;
    private ScheduleDynamic scheduleDynamic;
    private ScheduleFixed scheduleFixed;
    private TypeEmployeePaymentMethod typeEmployeePaymentMethod;
    private TypeGenerationForm typeGenerationForm;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_employee_salary`", nullable = false, scale = 0, precision = 10)
    public Integer getIdEmployeeSalary() {
        return this.idEmployeeSalary;
    }

    public void setIdEmployeeSalary(Integer idEmployeeSalary) {
        this.idEmployeeSalary = idEmployeeSalary;
    }

    @Column(name = "`bank_account_number`", nullable = false, length = 25)
    public String getBankAccountNumber() {
        return this.bankAccountNumber;
    }

    public void setBankAccountNumber(String bankAccountNumber) {
        this.bankAccountNumber = bankAccountNumber;
    }

    @Column(name = "`active`", nullable = false)
    public Boolean isActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    @Column(name = "`monthly_salary`", nullable = false, scale = 4, precision = 19)
    public Double getMonthlySalary() {
        return this.monthlySalary;
    }

    public void setMonthlySalary(Double monthlySalary) {
        this.monthlySalary = monthlySalary;
    }

    @Column(name = "`biweekly_salary`", nullable = false, scale = 4, precision = 19)
    public Double getBiweeklySalary() {
        return this.biweeklySalary;
    }

    public void setBiweeklySalary(Double biweeklySalary) {
        this.biweeklySalary = biweeklySalary;
    }

    @Column(name = "`basic_wage_hour`", nullable = false, scale = 4, precision = 19)
    public Double getBasicWageHour() {
        return this.basicWageHour;
    }

    public void setBasicWageHour(Double basicWageHour) {
        this.basicWageHour = basicWageHour;
    }

    @Column(name = "`observation`", nullable = true, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_bank`", referencedColumnName = "`id_bank`", insertable = true, updatable = true)
    public Bank getBank() {
        return this.bank;
    }

    public void setBank(Bank bank) {
        this.bank = bank;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_currency`", referencedColumnName = "`id_currency`", insertable = true, updatable = true)
    public Currency getCurrency() {
        return this.currency;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_over_time_segment_payroll`", referencedColumnName = "`id_schedule_dynamic`", insertable = true, updatable = true)
    public ScheduleDynamic getScheduleDynamic() {
        return this.scheduleDynamic;
    }

    public void setScheduleDynamic(ScheduleDynamic scheduleDynamic) {
        this.scheduleDynamic = scheduleDynamic;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_schedule_fixed`", referencedColumnName = "`id_schedule_fixed`", insertable = true, updatable = true)
    public ScheduleFixed getScheduleFixed() {
        return this.scheduleFixed;
    }

    public void setScheduleFixed(ScheduleFixed scheduleFixed) {
        this.scheduleFixed = scheduleFixed;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_employee_payment_method`", referencedColumnName = "`id_type_employee_status`", insertable = true, updatable = true)
    public TypeEmployeePaymentMethod getTypeEmployeePaymentMethod() {
        return this.typeEmployeePaymentMethod;
    }

    public void setTypeEmployeePaymentMethod(TypeEmployeePaymentMethod typeEmployeePaymentMethod) {
        this.typeEmployeePaymentMethod = typeEmployeePaymentMethod;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_type_generation_form`", referencedColumnName = "`id_type_employee_payment_method`", insertable = true, updatable = true)
    public TypeGenerationForm getTypeGenerationForm() {
        return this.typeGenerationForm;
    }

    public void setTypeGenerationForm(TypeGenerationForm typeGenerationForm) {
        this.typeGenerationForm = typeGenerationForm;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EmployeeSalary)) return false;
        final EmployeeSalary employeeSalary = (EmployeeSalary) o;
        return Objects.equals(getIdEmployeeSalary(), employeeSalary.getIdEmployeeSalary());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdEmployeeSalary());
    }
}

