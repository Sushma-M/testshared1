/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * ApplicantNote generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`applicant_note`")
public class ApplicantNote implements Serializable {

    private Integer idApplicantNote;
    @Type(type = "DateTime")
    private LocalDateTime noteDate;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private ApplicantToPosition applicantToPosition;
    private User user;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_applicant_note`", nullable = false, scale = 0, precision = 10)
    public Integer getIdApplicantNote() {
        return this.idApplicantNote;
    }

    public void setIdApplicantNote(Integer idApplicantNote) {
        this.idApplicantNote = idApplicantNote;
    }

    @Column(name = "`note_date`", nullable = false)
    public LocalDateTime getNoteDate() {
        return this.noteDate;
    }

    public void setNoteDate(LocalDateTime noteDate) {
        this.noteDate = noteDate;
    }

    @Column(name = "`observation`", nullable = false, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_applicant_to_positionp`", referencedColumnName = "`id_applicant_to_position`", insertable = true, updatable = true)
    public ApplicantToPosition getApplicantToPosition() {
        return this.applicantToPosition;
    }

    public void setApplicantToPosition(ApplicantToPosition applicantToPosition) {
        this.applicantToPosition = applicantToPosition;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_user_note_auther`", referencedColumnName = "`id_user`", insertable = true, updatable = true)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ApplicantNote)) return false;
        final ApplicantNote applicantNote = (ApplicantNote) o;
        return Objects.equals(getIdApplicantNote(), applicantNote.getIdApplicantNote());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdApplicantNote());
    }
}

