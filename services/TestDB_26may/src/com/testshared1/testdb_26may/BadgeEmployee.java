/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * BadgeEmployee generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`badge_employee`")
public class BadgeEmployee implements Serializable {

    private Integer idBadgeEmployee;
    private Boolean impreso;
    @Type(type = "DateTime")
    private LocalDateTime dateQueue;
    private Integer userQueue;
    @Type(type = "DateTime")
    private LocalDateTime expirationDate;
    @Type(type = "DateTime")
    private LocalDateTime imprintDate;
    private Integer userPrinting;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private Employee employee;

    @Id
    @Column(name = "`id_badge_employee`", nullable = false, scale = 0, precision = 10)
    public Integer getIdBadgeEmployee() {
        return this.idBadgeEmployee;
    }

    public void setIdBadgeEmployee(Integer idBadgeEmployee) {
        this.idBadgeEmployee = idBadgeEmployee;
    }

    @Column(name = "`impreso`", nullable = false)
    public Boolean isImpreso() {
        return this.impreso;
    }

    public void setImpreso(Boolean impreso) {
        this.impreso = impreso;
    }

    @Column(name = "`date_queue`", nullable = false)
    public LocalDateTime getDateQueue() {
        return this.dateQueue;
    }

    public void setDateQueue(LocalDateTime dateQueue) {
        this.dateQueue = dateQueue;
    }

    @Column(name = "`user_queue`", nullable = false, scale = 0, precision = 10)
    public Integer getUserQueue() {
        return this.userQueue;
    }

    public void setUserQueue(Integer userQueue) {
        this.userQueue = userQueue;
    }

    @Column(name = "`expiration_date`", nullable = false)
    public LocalDateTime getExpirationDate() {
        return this.expirationDate;
    }

    public void setExpirationDate(LocalDateTime expirationDate) {
        this.expirationDate = expirationDate;
    }

    @Column(name = "`imprint_date`", nullable = true)
    public LocalDateTime getImprintDate() {
        return this.imprintDate;
    }

    public void setImprintDate(LocalDateTime imprintDate) {
        this.imprintDate = imprintDate;
    }

    @Column(name = "`user_printing`", nullable = true, scale = 0, precision = 10)
    public Integer getUserPrinting() {
        return this.userPrinting;
    }

    public void setUserPrinting(Integer userPrinting) {
        this.userPrinting = userPrinting;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof BadgeEmployee)) return false;
        final BadgeEmployee badgeEmployee = (BadgeEmployee) o;
        return Objects.equals(getIdBadgeEmployee(), badgeEmployee.getIdBadgeEmployee());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdBadgeEmployee());
    }
}

