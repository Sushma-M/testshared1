/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.AssessmentEmployeeData;
import com.testshared1.testdb_26may.EmployeeAssessment;
import com.testshared1.testdb_26may.service.AssessmentEmployeeDataService;
import com.testshared1.testdb_26may.service.EmployeeAssessmentService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class EmployeeAssessment.
 * @see EmployeeAssessment
 */
@RestController("TestDB_26may.EmployeeAssessmentController")
@RequestMapping("/TestDB_26may/EmployeeAssessment")
@Api(description = "Exposes APIs to work with EmployeeAssessment resource.", value = "EmployeeAssessmentController")
public class EmployeeAssessmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeAssessmentController.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeAssessmentService")
    private EmployeeAssessmentService employeeAssessmentService;

    @Autowired
    @Qualifier("TestDB_26may.AssessmentEmployeeDataService")
    private AssessmentEmployeeDataService assessmentEmployeeDataService;

    /**
     * @deprecated Use {@link #findEmployeeAssessments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of EmployeeAssessment instances matching the search criteria.")
    public Page<EmployeeAssessment> findEmployeeAssessments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeAssessments list");
        return employeeAssessmentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeAssessment instances matching the search criteria.")
    public Page<EmployeeAssessment> findEmployeeAssessments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeAssessments list");
        return employeeAssessmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeAssessments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employeeAssessmentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/assessmentEmployeeDatas", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the assessmentEmployeeDatas instance associated with the given id.")
    public Page<AssessmentEmployeeData> findAssociatedAssessmentEmployeeDatas(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessmentEmployeeDatas");
        return assessmentEmployeeDataService.findAssociatedValues(id, "AssessmentEmployeeData", "idEmployeeAssessment", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeAssessmentService instance
	 */
    protected void setEmployeeAssessmentService(EmployeeAssessmentService service) {
        this.employeeAssessmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentEmployeeDataService instance
	 */
    protected void setAssessmentEmployeeDataService(AssessmentEmployeeDataService service) {
        this.assessmentEmployeeDataService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new EmployeeAssessment instance.")
    public EmployeeAssessment createEmployeeAssessment(@RequestBody EmployeeAssessment employeeassessment) {
        LOGGER.debug("Create EmployeeAssessment with information: {}", employeeassessment);
        employeeassessment = employeeAssessmentService.create(employeeassessment);
        LOGGER.debug("Created EmployeeAssessment with information: {}", employeeassessment);
        return employeeassessment;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of EmployeeAssessment instances.")
    public Long countEmployeeAssessments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting EmployeeAssessments");
        return employeeAssessmentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the EmployeeAssessment instance associated with the given id.")
    public EmployeeAssessment getEmployeeAssessment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeAssessment with id: {}", id);
        EmployeeAssessment foundEmployeeAssessment = employeeAssessmentService.getById(id);
        LOGGER.debug("EmployeeAssessment details with id: {}", foundEmployeeAssessment);
        return foundEmployeeAssessment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the EmployeeAssessment instance associated with the given id.")
    public EmployeeAssessment editEmployeeAssessment(@PathVariable(value = "id") Integer id, @RequestBody EmployeeAssessment employeeassessment) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeAssessment with id: {}", employeeassessment.getIdEmployeeAssessment());
        employeeassessment.setIdEmployeeAssessment(id);
        employeeassessment = employeeAssessmentService.update(employeeassessment);
        LOGGER.debug("EmployeeAssessment details with id: {}", employeeassessment);
        return employeeassessment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the EmployeeAssessment instance associated with the given id.")
    public boolean deleteEmployeeAssessment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeAssessment with id: {}", id);
        EmployeeAssessment deletedEmployeeAssessment = employeeAssessmentService.delete(id);
        return deletedEmployeeAssessment != null;
    }
}
