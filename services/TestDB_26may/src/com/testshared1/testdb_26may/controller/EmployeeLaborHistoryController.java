/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeLaborHistory;
import com.testshared1.testdb_26may.service.EmployeeLaborHistoryService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class EmployeeLaborHistory.
 * @see EmployeeLaborHistory
 */
@RestController("TestDB_26may.EmployeeLaborHistoryController")
@RequestMapping("/TestDB_26may/EmployeeLaborHistory")
@Api(description = "Exposes APIs to work with EmployeeLaborHistory resource.", value = "EmployeeLaborHistoryController")
public class EmployeeLaborHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeLaborHistoryController.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeLaborHistoryService")
    private EmployeeLaborHistoryService employeeLaborHistoryService;

    /**
     * @deprecated Use {@link #findEmployeeLaborHistories(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of EmployeeLaborHistory instances matching the search criteria.")
    public Page<EmployeeLaborHistory> findEmployeeLaborHistories(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeLaborHistories list");
        return employeeLaborHistoryService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeLaborHistory instances matching the search criteria.")
    public Page<EmployeeLaborHistory> findEmployeeLaborHistories(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeLaborHistories list");
        return employeeLaborHistoryService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeLaborHistories(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employeeLaborHistoryService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeLaborHistoryService instance
	 */
    protected void setEmployeeLaborHistoryService(EmployeeLaborHistoryService service) {
        this.employeeLaborHistoryService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new EmployeeLaborHistory instance.")
    public EmployeeLaborHistory createEmployeeLaborHistory(@RequestBody EmployeeLaborHistory employeelaborhistory) {
        LOGGER.debug("Create EmployeeLaborHistory with information: {}", employeelaborhistory);
        employeelaborhistory = employeeLaborHistoryService.create(employeelaborhistory);
        LOGGER.debug("Created EmployeeLaborHistory with information: {}", employeelaborhistory);
        return employeelaborhistory;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of EmployeeLaborHistory instances.")
    public Long countEmployeeLaborHistories(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting EmployeeLaborHistories");
        return employeeLaborHistoryService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the EmployeeLaborHistory instance associated with the given id.")
    public EmployeeLaborHistory getEmployeeLaborHistory(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeLaborHistory with id: {}", id);
        EmployeeLaborHistory foundEmployeeLaborHistory = employeeLaborHistoryService.getById(id);
        LOGGER.debug("EmployeeLaborHistory details with id: {}", foundEmployeeLaborHistory);
        return foundEmployeeLaborHistory;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the EmployeeLaborHistory instance associated with the given id.")
    public EmployeeLaborHistory editEmployeeLaborHistory(@PathVariable(value = "id") Integer id, @RequestBody EmployeeLaborHistory employeelaborhistory) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeLaborHistory with id: {}", employeelaborhistory.getIdEmployeeLaborHistory());
        employeelaborhistory.setIdEmployeeLaborHistory(id);
        employeelaborhistory = employeeLaborHistoryService.update(employeelaborhistory);
        LOGGER.debug("EmployeeLaborHistory details with id: {}", employeelaborhistory);
        return employeelaborhistory;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the EmployeeLaborHistory instance associated with the given id.")
    public boolean deleteEmployeeLaborHistory(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeLaborHistory with id: {}", id);
        EmployeeLaborHistory deletedEmployeeLaborHistory = employeeLaborHistoryService.delete(id);
        return deletedEmployeeLaborHistory != null;
    }
}
