/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.EmployeePersonalReference;
import com.testshared1.testdb_26may.service.EmployeePersonalReferenceService;


/**
 * Controller object for domain model class EmployeePersonalReference.
 * @see EmployeePersonalReference
 */
@RestController("TestDB_26may.EmployeePersonalReferenceController")
@Api(value = "/TestDB_26may/EmployeePersonalReference", description = "Exposes APIs to work with EmployeePersonalReference resource.")
@RequestMapping("/TestDB_26may/EmployeePersonalReference")
public class EmployeePersonalReferenceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeePersonalReferenceController.class);

    @Autowired
	@Qualifier("TestDB_26may.EmployeePersonalReferenceService")
	private EmployeePersonalReferenceService employeePersonalReferenceService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeePersonalReference instance.")
	public EmployeePersonalReference createEmployeePersonalReference(@RequestBody EmployeePersonalReference employeepersonalreference) {
		LOGGER.debug("Create EmployeePersonalReference with information: {}" , employeepersonalreference);

		employeepersonalreference = employeePersonalReferenceService.create(employeepersonalreference);
		LOGGER.debug("Created EmployeePersonalReference with information: {}" , employeepersonalreference);

	    return employeepersonalreference;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeePersonalReference instance associated with the given id.")
    public EmployeePersonalReference getEmployeePersonalReference(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeePersonalReference with id: {}" , id);

        EmployeePersonalReference foundEmployeePersonalReference = employeePersonalReferenceService.getById(id);
        LOGGER.debug("EmployeePersonalReference details with id: {}" , foundEmployeePersonalReference);

        return foundEmployeePersonalReference;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeePersonalReference instance associated with the given id.")
    public EmployeePersonalReference editEmployeePersonalReference(@PathVariable("id") Integer id, @RequestBody EmployeePersonalReference employeepersonalreference) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeePersonalReference with id: {}" , employeepersonalreference.getIdEmployeePersonalReference());

        employeepersonalreference.setIdEmployeePersonalReference(id);
        employeepersonalreference = employeePersonalReferenceService.update(employeepersonalreference);
        LOGGER.debug("EmployeePersonalReference details with id: {}" , employeepersonalreference);

        return employeepersonalreference;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeePersonalReference instance associated with the given id.")
    public boolean deleteEmployeePersonalReference(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeePersonalReference with id: {}" , id);

        EmployeePersonalReference deletedEmployeePersonalReference = employeePersonalReferenceService.delete(id);

        return deletedEmployeePersonalReference != null;
    }
    /**
     * @deprecated Use {@link #findEmployeePersonalReferences(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeePersonalReference instances matching the search criteria.")
	public Page<EmployeePersonalReference> findEmployeePersonalReferences( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeePersonalReferences list");
		return employeePersonalReferenceService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeePersonalReference instances matching the search criteria.")
    public Page<EmployeePersonalReference> findEmployeePersonalReferences(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeePersonalReferences list");
    	return employeePersonalReferenceService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeePersonalReferences(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeePersonalReferenceService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeePersonalReference instances.")
	public Long countEmployeePersonalReferences(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeePersonalReferences");
		return employeePersonalReferenceService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeePersonalReferenceService instance
	 */
	protected void setEmployeePersonalReferenceService(EmployeePersonalReferenceService service) {
		this.employeePersonalReferenceService = service;
	}

}

