/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListRolePermission;
import com.testshared1.testdb_26may.Role;
import com.testshared1.testdb_26may.User;
import com.testshared1.testdb_26may.service.ListRolePermissionService;
import com.testshared1.testdb_26may.service.RoleService;
import com.testshared1.testdb_26may.service.UserService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Role.
 * @see Role
 */
@RestController("TestDB_26may.RoleController")
@RequestMapping("/TestDB_26may/Role")
@Api(description = "Exposes APIs to work with Role resource.", value = "RoleController")
public class RoleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RoleController.class);

    @Autowired
    @Qualifier("TestDB_26may.RoleService")
    private RoleService roleService;

    @Autowired
    @Qualifier("TestDB_26may.ListRolePermissionService")
    private ListRolePermissionService listRolePermissionService;

    @Autowired
    @Qualifier("TestDB_26may.UserService")
    private UserService userService;

    /**
     * @deprecated Use {@link #findRoles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Role instances matching the search criteria.")
    public Page<Role> findRoles(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Roles list");
        return roleService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Role instances matching the search criteria.")
    public Page<Role> findRoles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Roles list");
        return roleService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportRoles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return roleService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/users", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the users instance associated with the given id.")
    public Page<User> findAssociatedUsers(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated users");
        return userService.findAssociatedValues(id, "User", "idRole", pageable);
    }

    @RequestMapping(value = "/{id:.+}/listRolePermissions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listRolePermissions instance associated with the given id.")
    public Page<ListRolePermission> findAssociatedListRolePermissions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listRolePermissions");
        return listRolePermissionService.findAssociatedValues(id, "ListRolePermission", "idRole", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RoleService instance
	 */
    protected void setRoleService(RoleService service) {
        this.roleService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListRolePermissionService instance
	 */
    protected void setListRolePermissionService(ListRolePermissionService service) {
        this.listRolePermissionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserService instance
	 */
    protected void setUserService(UserService service) {
        this.userService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Role instance.")
    public Role createRole(@RequestBody Role role) {
        LOGGER.debug("Create Role with information: {}", role);
        role = roleService.create(role);
        LOGGER.debug("Created Role with information: {}", role);
        return role;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Role instances.")
    public Long countRoles(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Roles");
        return roleService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Role instance associated with the given id.")
    public Role getRole(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Role with id: {}", id);
        Role foundRole = roleService.getById(id);
        LOGGER.debug("Role details with id: {}", foundRole);
        return foundRole;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Role instance associated with the given id.")
    public Role editRole(@PathVariable(value = "id") Integer id, @RequestBody Role role) throws EntityNotFoundException {
        LOGGER.debug("Editing Role with id: {}", role.getIdRole());
        role.setIdRole(id);
        role = roleService.update(role);
        LOGGER.debug("Role details with id: {}", role);
        return role;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Role instance associated with the given id.")
    public boolean deleteRole(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Role with id: {}", id);
        Role deletedRole = roleService.delete(id);
        return deletedRole != null;
    }
}
