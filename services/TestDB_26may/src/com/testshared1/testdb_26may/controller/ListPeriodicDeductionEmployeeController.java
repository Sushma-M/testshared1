/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ListPeriodicDeductionEmployee;
import com.testshared1.testdb_26may.service.ListPeriodicDeductionEmployeeService;


/**
 * Controller object for domain model class ListPeriodicDeductionEmployee.
 * @see ListPeriodicDeductionEmployee
 */
@RestController("TestDB_26may.ListPeriodicDeductionEmployeeController")
@Api(value = "/TestDB_26may/ListPeriodicDeductionEmployee", description = "Exposes APIs to work with ListPeriodicDeductionEmployee resource.")
@RequestMapping("/TestDB_26may/ListPeriodicDeductionEmployee")
public class ListPeriodicDeductionEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionEmployeeController.class);

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicDeductionEmployeeService")
	private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListPeriodicDeductionEmployee instance.")
	public ListPeriodicDeductionEmployee createListPeriodicDeductionEmployee(@RequestBody ListPeriodicDeductionEmployee listperiodicdeductionemployee) {
		LOGGER.debug("Create ListPeriodicDeductionEmployee with information: {}" , listperiodicdeductionemployee);

		listperiodicdeductionemployee = listPeriodicDeductionEmployeeService.create(listperiodicdeductionemployee);
		LOGGER.debug("Created ListPeriodicDeductionEmployee with information: {}" , listperiodicdeductionemployee);

	    return listperiodicdeductionemployee;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListPeriodicDeductionEmployee instance associated with the given id.")
    public ListPeriodicDeductionEmployee getListPeriodicDeductionEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListPeriodicDeductionEmployee with id: {}" , id);

        ListPeriodicDeductionEmployee foundListPeriodicDeductionEmployee = listPeriodicDeductionEmployeeService.getById(id);
        LOGGER.debug("ListPeriodicDeductionEmployee details with id: {}" , foundListPeriodicDeductionEmployee);

        return foundListPeriodicDeductionEmployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListPeriodicDeductionEmployee instance associated with the given id.")
    public ListPeriodicDeductionEmployee editListPeriodicDeductionEmployee(@PathVariable("id") Integer id, @RequestBody ListPeriodicDeductionEmployee listperiodicdeductionemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing ListPeriodicDeductionEmployee with id: {}" , listperiodicdeductionemployee.getIdListPeriodicDeductionEmployee());

        listperiodicdeductionemployee.setIdListPeriodicDeductionEmployee(id);
        listperiodicdeductionemployee = listPeriodicDeductionEmployeeService.update(listperiodicdeductionemployee);
        LOGGER.debug("ListPeriodicDeductionEmployee details with id: {}" , listperiodicdeductionemployee);

        return listperiodicdeductionemployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListPeriodicDeductionEmployee instance associated with the given id.")
    public boolean deleteListPeriodicDeductionEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicDeductionEmployee with id: {}" , id);

        ListPeriodicDeductionEmployee deletedListPeriodicDeductionEmployee = listPeriodicDeductionEmployeeService.delete(id);

        return deletedListPeriodicDeductionEmployee != null;
    }
    /**
     * @deprecated Use {@link #findListPeriodicDeductionEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListPeriodicDeductionEmployee instances matching the search criteria.")
	public Page<ListPeriodicDeductionEmployee> findListPeriodicDeductionEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListPeriodicDeductionEmployees list");
		return listPeriodicDeductionEmployeeService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListPeriodicDeductionEmployee instances matching the search criteria.")
    public Page<ListPeriodicDeductionEmployee> findListPeriodicDeductionEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListPeriodicDeductionEmployees list");
    	return listPeriodicDeductionEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListPeriodicDeductionEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listPeriodicDeductionEmployeeService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListPeriodicDeductionEmployee instances.")
	public Long countListPeriodicDeductionEmployees(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListPeriodicDeductionEmployees");
		return listPeriodicDeductionEmployeeService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicDeductionEmployeeService instance
	 */
	protected void setListPeriodicDeductionEmployeeService(ListPeriodicDeductionEmployeeService service) {
		this.listPeriodicDeductionEmployeeService = service;
	}

}

