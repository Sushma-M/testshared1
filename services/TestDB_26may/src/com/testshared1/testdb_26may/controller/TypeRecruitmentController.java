/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.Employee;
import com.testshared1.testdb_26may.TypeRecruitment;
import com.testshared1.testdb_26may.service.EmployeeService;
import com.testshared1.testdb_26may.service.TypeRecruitmentService;


/**
 * Controller object for domain model class TypeRecruitment.
 * @see TypeRecruitment
 */
@RestController("TestDB_26may.TypeRecruitmentController")
@Api(value = "/TestDB_26may/TypeRecruitment", description = "Exposes APIs to work with TypeRecruitment resource.")
@RequestMapping("/TestDB_26may/TypeRecruitment")
public class TypeRecruitmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeRecruitmentController.class);

    @Autowired
	@Qualifier("TestDB_26may.TypeRecruitmentService")
	private TypeRecruitmentService typeRecruitmentService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeService")
	private EmployeeService employeeService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeRecruitment instance.")
	public TypeRecruitment createTypeRecruitment(@RequestBody TypeRecruitment typerecruitment) {
		LOGGER.debug("Create TypeRecruitment with information: {}" , typerecruitment);

		typerecruitment = typeRecruitmentService.create(typerecruitment);
		LOGGER.debug("Created TypeRecruitment with information: {}" , typerecruitment);

	    return typerecruitment;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeRecruitment instance associated with the given id.")
    public TypeRecruitment getTypeRecruitment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeRecruitment with id: {}" , id);

        TypeRecruitment foundTypeRecruitment = typeRecruitmentService.getById(id);
        LOGGER.debug("TypeRecruitment details with id: {}" , foundTypeRecruitment);

        return foundTypeRecruitment;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeRecruitment instance associated with the given id.")
    public TypeRecruitment editTypeRecruitment(@PathVariable("id") Integer id, @RequestBody TypeRecruitment typerecruitment) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeRecruitment with id: {}" , typerecruitment.getIdTypeRecruitment());

        typerecruitment.setIdTypeRecruitment(id);
        typerecruitment = typeRecruitmentService.update(typerecruitment);
        LOGGER.debug("TypeRecruitment details with id: {}" , typerecruitment);

        return typerecruitment;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeRecruitment instance associated with the given id.")
    public boolean deleteTypeRecruitment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeRecruitment with id: {}" , id);

        TypeRecruitment deletedTypeRecruitment = typeRecruitmentService.delete(id);

        return deletedTypeRecruitment != null;
    }
    /**
     * @deprecated Use {@link #findTypeRecruitments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeRecruitment instances matching the search criteria.")
	public Page<TypeRecruitment> findTypeRecruitments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeRecruitments list");
		return typeRecruitmentService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeRecruitment instances matching the search criteria.")
    public Page<TypeRecruitment> findTypeRecruitments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeRecruitments list");
    	return typeRecruitmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeRecruitments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return typeRecruitmentService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeRecruitment instances.")
	public Long countTypeRecruitments(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TypeRecruitments");
		return typeRecruitmentService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
     public Page<Employee>
        findAssociatedEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id, "Employee", "idTypeRecruitment", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeRecruitmentService instance
	 */
	protected void setTypeRecruitmentService(TypeRecruitmentService service) {
		this.typeRecruitmentService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeService instance
	 */
	protected void setEmployeeService(EmployeeService service) {
        this.employeeService = service;
    }
}

