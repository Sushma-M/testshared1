/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.Log;
import com.testshared1.testdb_26may.LogOperation;
import com.testshared1.testdb_26may.service.LogOperationService;
import com.testshared1.testdb_26may.service.LogService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class LogOperation.
 * @see LogOperation
 */
@RestController("TestDB_26may.LogOperationController")
@RequestMapping("/TestDB_26may/LogOperation")
@Api(description = "Exposes APIs to work with LogOperation resource.", value = "LogOperationController")
public class LogOperationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LogOperationController.class);

    @Autowired
    @Qualifier("TestDB_26may.LogOperationService")
    private LogOperationService logOperationService;

    @Autowired
    @Qualifier("TestDB_26may.LogService")
    private LogService logService;

    /**
     * @deprecated Use {@link #findLogOperations(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of LogOperation instances matching the search criteria.")
    public Page<LogOperation> findLogOperations(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LogOperations list");
        return logOperationService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of LogOperation instances matching the search criteria.")
    public Page<LogOperation> findLogOperations(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LogOperations list");
        return logOperationService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportLogOperations(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return logOperationService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/logs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the logs instance associated with the given id.")
    public Page<Log> findAssociatedLogs(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated logs");
        return logService.findAssociatedValues(id, "Log", "idLogOperation", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LogOperationService instance
	 */
    protected void setLogOperationService(LogOperationService service) {
        this.logOperationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LogService instance
	 */
    protected void setLogService(LogService service) {
        this.logService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new LogOperation instance.")
    public LogOperation createLogOperation(@RequestBody LogOperation logoperation) {
        LOGGER.debug("Create LogOperation with information: {}", logoperation);
        logoperation = logOperationService.create(logoperation);
        LOGGER.debug("Created LogOperation with information: {}", logoperation);
        return logoperation;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of LogOperation instances.")
    public Long countLogOperations(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting LogOperations");
        return logOperationService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the LogOperation instance associated with the given id.")
    public LogOperation getLogOperation(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LogOperation with id: {}", id);
        LogOperation foundLogOperation = logOperationService.getById(id);
        LOGGER.debug("LogOperation details with id: {}", foundLogOperation);
        return foundLogOperation;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the LogOperation instance associated with the given id.")
    public LogOperation editLogOperation(@PathVariable(value = "id") Integer id, @RequestBody LogOperation logoperation) throws EntityNotFoundException {
        LOGGER.debug("Editing LogOperation with id: {}", logoperation.getIdLogOperation());
        logoperation.setIdLogOperation(id);
        logoperation = logOperationService.update(logoperation);
        LOGGER.debug("LogOperation details with id: {}", logoperation);
        return logoperation;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the LogOperation instance associated with the given id.")
    public boolean deleteLogOperation(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LogOperation with id: {}", id);
        LogOperation deletedLogOperation = logOperationService.delete(id);
        return deletedLogOperation != null;
    }
}
