/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.DeductionEventual;
import com.testshared1.testdb_26may.service.DeductionEventualService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DeductionEventual.
 * @see DeductionEventual
 */
@RestController("TestDB_26may.DeductionEventualController")
@RequestMapping("/TestDB_26may/DeductionEventual")
@Api(description = "Exposes APIs to work with DeductionEventual resource.", value = "DeductionEventualController")
public class DeductionEventualController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeductionEventualController.class);

    @Autowired
    @Qualifier("TestDB_26may.DeductionEventualService")
    private DeductionEventualService deductionEventualService;

    /**
     * @deprecated Use {@link #findDeductionEventuals(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DeductionEventual instances matching the search criteria.")
    public Page<DeductionEventual> findDeductionEventuals(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DeductionEventuals list");
        return deductionEventualService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DeductionEventual instances matching the search criteria.")
    public Page<DeductionEventual> findDeductionEventuals(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DeductionEventuals list");
        return deductionEventualService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportDeductionEventuals(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return deductionEventualService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeductionEventualService instance
	 */
    protected void setDeductionEventualService(DeductionEventualService service) {
        this.deductionEventualService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DeductionEventual instance.")
    public DeductionEventual createDeductionEventual(@RequestBody DeductionEventual deductioneventual) {
        LOGGER.debug("Create DeductionEventual with information: {}", deductioneventual);
        deductioneventual = deductionEventualService.create(deductioneventual);
        LOGGER.debug("Created DeductionEventual with information: {}", deductioneventual);
        return deductioneventual;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DeductionEventual instances.")
    public Long countDeductionEventuals(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting DeductionEventuals");
        return deductionEventualService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DeductionEventual instance associated with the given id.")
    public DeductionEventual getDeductionEventual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DeductionEventual with id: {}", id);
        DeductionEventual foundDeductionEventual = deductionEventualService.getById(id);
        LOGGER.debug("DeductionEventual details with id: {}", foundDeductionEventual);
        return foundDeductionEventual;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DeductionEventual instance associated with the given id.")
    public DeductionEventual editDeductionEventual(@PathVariable(value = "id") Integer id, @RequestBody DeductionEventual deductioneventual) throws EntityNotFoundException {
        LOGGER.debug("Editing DeductionEventual with id: {}", deductioneventual.getIdDeductionEventual());
        deductioneventual.setIdDeductionEventual(id);
        deductioneventual = deductionEventualService.update(deductioneventual);
        LOGGER.debug("DeductionEventual details with id: {}", deductioneventual);
        return deductioneventual;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DeductionEventual instance associated with the given id.")
    public boolean deleteDeductionEventual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeductionEventual with id: {}", id);
        DeductionEventual deletedDeductionEventual = deductionEventualService.delete(id);
        return deletedDeductionEventual != null;
    }
}
