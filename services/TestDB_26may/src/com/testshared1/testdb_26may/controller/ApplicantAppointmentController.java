/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ApplicantAppointment;
import com.testshared1.testdb_26may.service.ApplicantAppointmentService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ApplicantAppointment.
 * @see ApplicantAppointment
 */
@RestController("TestDB_26may.ApplicantAppointmentController")
@RequestMapping("/TestDB_26may/ApplicantAppointment")
@Api(description = "Exposes APIs to work with ApplicantAppointment resource.", value = "ApplicantAppointmentController")
public class ApplicantAppointmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantAppointmentController.class);

    @Autowired
    @Qualifier("TestDB_26may.ApplicantAppointmentService")
    private ApplicantAppointmentService applicantAppointmentService;

    /**
     * @deprecated Use {@link #findApplicantAppointments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ApplicantAppointment instances matching the search criteria.")
    public Page<ApplicantAppointment> findApplicantAppointments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ApplicantAppointments list");
        return applicantAppointmentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ApplicantAppointment instances matching the search criteria.")
    public Page<ApplicantAppointment> findApplicantAppointments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ApplicantAppointments list");
        return applicantAppointmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportApplicantAppointments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return applicantAppointmentService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantAppointmentService instance
	 */
    protected void setApplicantAppointmentService(ApplicantAppointmentService service) {
        this.applicantAppointmentService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ApplicantAppointment instance.")
    public ApplicantAppointment createApplicantAppointment(@RequestBody ApplicantAppointment applicantappointment) {
        LOGGER.debug("Create ApplicantAppointment with information: {}", applicantappointment);
        applicantappointment = applicantAppointmentService.create(applicantappointment);
        LOGGER.debug("Created ApplicantAppointment with information: {}", applicantappointment);
        return applicantappointment;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ApplicantAppointment instances.")
    public Long countApplicantAppointments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ApplicantAppointments");
        return applicantAppointmentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ApplicantAppointment instance associated with the given id.")
    public ApplicantAppointment getApplicantAppointment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ApplicantAppointment with id: {}", id);
        ApplicantAppointment foundApplicantAppointment = applicantAppointmentService.getById(id);
        LOGGER.debug("ApplicantAppointment details with id: {}", foundApplicantAppointment);
        return foundApplicantAppointment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ApplicantAppointment instance associated with the given id.")
    public ApplicantAppointment editApplicantAppointment(@PathVariable(value = "id") Integer id, @RequestBody ApplicantAppointment applicantappointment) throws EntityNotFoundException {
        LOGGER.debug("Editing ApplicantAppointment with id: {}", applicantappointment.getIdApplicantAppointment());
        applicantappointment.setIdApplicantAppointment(id);
        applicantappointment = applicantAppointmentService.update(applicantappointment);
        LOGGER.debug("ApplicantAppointment details with id: {}", applicantappointment);
        return applicantappointment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ApplicantAppointment instance associated with the given id.")
    public boolean deleteApplicantAppointment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantAppointment with id: {}", id);
        ApplicantAppointment deletedApplicantAppointment = applicantAppointmentService.delete(id);
        return deletedApplicantAppointment != null;
    }
}
