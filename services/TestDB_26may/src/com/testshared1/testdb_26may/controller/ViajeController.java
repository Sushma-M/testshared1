/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.TravelEmployee;
import com.testshared1.testdb_26may.Viaje;
import com.testshared1.testdb_26may.service.TravelEmployeeService;
import com.testshared1.testdb_26may.service.ViajeService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Viaje.
 * @see Viaje
 */
@RestController("TestDB_26may.ViajeController")
@RequestMapping("/TestDB_26may/Viaje")
@Api(description = "Exposes APIs to work with Viaje resource.", value = "ViajeController")
public class ViajeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViajeController.class);

    @Autowired
    @Qualifier("TestDB_26may.ViajeService")
    private ViajeService viajeService;

    @Autowired
    @Qualifier("TestDB_26may.TravelEmployeeService")
    private TravelEmployeeService travelEmployeeService;

    /**
     * @deprecated Use {@link #findViajes(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Viaje instances matching the search criteria.")
    public Page<Viaje> findViajes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Viajes list");
        return viajeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Viaje instances matching the search criteria.")
    public Page<Viaje> findViajes(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Viajes list");
        return viajeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportViajes(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return viajeService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/travelEmployees", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the travelEmployees instance associated with the given id.")
    public Page<TravelEmployee> findAssociatedTravelEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated travelEmployees");
        return travelEmployeeService.findAssociatedValues(id, "TravelEmployee", "idTravel", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViajeService instance
	 */
    protected void setViajeService(ViajeService service) {
        this.viajeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelEmployeeService instance
	 */
    protected void setTravelEmployeeService(TravelEmployeeService service) {
        this.travelEmployeeService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Viaje instance.")
    public Viaje createViaje(@RequestBody Viaje viaje) {
        LOGGER.debug("Create Viaje with information: {}", viaje);
        viaje = viajeService.create(viaje);
        LOGGER.debug("Created Viaje with information: {}", viaje);
        return viaje;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Viaje instances.")
    public Long countViajes(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Viajes");
        return viajeService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Viaje instance associated with the given id.")
    public Viaje getViaje(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Viaje with id: {}", id);
        Viaje foundViaje = viajeService.getById(id);
        LOGGER.debug("Viaje details with id: {}", foundViaje);
        return foundViaje;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Viaje instance associated with the given id.")
    public Viaje editViaje(@PathVariable(value = "id") Integer id, @RequestBody Viaje viaje) throws EntityNotFoundException {
        LOGGER.debug("Editing Viaje with id: {}", viaje.getIdTravel());
        viaje.setIdTravel(id);
        viaje = viajeService.update(viaje);
        LOGGER.debug("Viaje details with id: {}", viaje);
        return viaje;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Viaje instance associated with the given id.")
    public boolean deleteViaje(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Viaje with id: {}", id);
        Viaje deletedViaje = viajeService.delete(id);
        return deletedViaje != null;
    }
}
