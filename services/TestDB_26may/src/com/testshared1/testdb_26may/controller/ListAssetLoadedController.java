/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListAssetLoaded;
import com.testshared1.testdb_26may.service.ListAssetLoadedService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ListAssetLoaded.
 * @see ListAssetLoaded
 */
@RestController("TestDB_26may.ListAssetLoadedController")
@RequestMapping("/TestDB_26may/ListAssetLoaded")
@Api(description = "Exposes APIs to work with ListAssetLoaded resource.", value = "ListAssetLoadedController")
public class ListAssetLoadedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetLoadedController.class);

    @Autowired
    @Qualifier("TestDB_26may.ListAssetLoadedService")
    private ListAssetLoadedService listAssetLoadedService;

    /**
     * @deprecated Use {@link #findListAssetLoadeds(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ListAssetLoaded instances matching the search criteria.")
    public Page<ListAssetLoaded> findListAssetLoadeds(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListAssetLoadeds list");
        return listAssetLoadedService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListAssetLoaded instances matching the search criteria.")
    public Page<ListAssetLoaded> findListAssetLoadeds(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListAssetLoadeds list");
        return listAssetLoadedService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListAssetLoadeds(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return listAssetLoadedService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListAssetLoadedService instance
	 */
    protected void setListAssetLoadedService(ListAssetLoadedService service) {
        this.listAssetLoadedService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ListAssetLoaded instance.")
    public ListAssetLoaded createListAssetLoaded(@RequestBody ListAssetLoaded listassetloaded) {
        LOGGER.debug("Create ListAssetLoaded with information: {}", listassetloaded);
        listassetloaded = listAssetLoadedService.create(listassetloaded);
        LOGGER.debug("Created ListAssetLoaded with information: {}", listassetloaded);
        return listassetloaded;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ListAssetLoaded instances.")
    public Long countListAssetLoadeds(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ListAssetLoadeds");
        return listAssetLoadedService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ListAssetLoaded instance associated with the given id.")
    public ListAssetLoaded getListAssetLoaded(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListAssetLoaded with id: {}", id);
        ListAssetLoaded foundListAssetLoaded = listAssetLoadedService.getById(id);
        LOGGER.debug("ListAssetLoaded details with id: {}", foundListAssetLoaded);
        return foundListAssetLoaded;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ListAssetLoaded instance associated with the given id.")
    public ListAssetLoaded editListAssetLoaded(@PathVariable(value = "id") Integer id, @RequestBody ListAssetLoaded listassetloaded) throws EntityNotFoundException {
        LOGGER.debug("Editing ListAssetLoaded with id: {}", listassetloaded.getIdListAssetLoaded());
        listassetloaded.setIdListAssetLoaded(id);
        listassetloaded = listAssetLoadedService.update(listassetloaded);
        LOGGER.debug("ListAssetLoaded details with id: {}", listassetloaded);
        return listassetloaded;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ListAssetLoaded instance associated with the given id.")
    public boolean deleteListAssetLoaded(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetLoaded with id: {}", id);
        ListAssetLoaded deletedListAssetLoaded = listAssetLoadedService.delete(id);
        return deletedListAssetLoaded != null;
    }
}
