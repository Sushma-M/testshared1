/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.IsrDetail;
import com.testshared1.testdb_26may.service.IsrDetailService;


/**
 * Controller object for domain model class IsrDetail.
 * @see IsrDetail
 */
@RestController("TestDB_26may.IsrDetailController")
@Api(value = "/TestDB_26may/IsrDetail", description = "Exposes APIs to work with IsrDetail resource.")
@RequestMapping("/TestDB_26may/IsrDetail")
public class IsrDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IsrDetailController.class);

    @Autowired
	@Qualifier("TestDB_26may.IsrDetailService")
	private IsrDetailService isrDetailService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new IsrDetail instance.")
	public IsrDetail createIsrDetail(@RequestBody IsrDetail isrdetail) {
		LOGGER.debug("Create IsrDetail with information: {}" , isrdetail);

		isrdetail = isrDetailService.create(isrdetail);
		LOGGER.debug("Created IsrDetail with information: {}" , isrdetail);

	    return isrdetail;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the IsrDetail instance associated with the given id.")
    public IsrDetail getIsrDetail(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IsrDetail with id: {}" , id);

        IsrDetail foundIsrDetail = isrDetailService.getById(id);
        LOGGER.debug("IsrDetail details with id: {}" , foundIsrDetail);

        return foundIsrDetail;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the IsrDetail instance associated with the given id.")
    public IsrDetail editIsrDetail(@PathVariable("id") Integer id, @RequestBody IsrDetail isrdetail) throws EntityNotFoundException {
        LOGGER.debug("Editing IsrDetail with id: {}" , isrdetail.getIdIsrDetail());

        isrdetail.setIdIsrDetail(id);
        isrdetail = isrDetailService.update(isrdetail);
        LOGGER.debug("IsrDetail details with id: {}" , isrdetail);

        return isrdetail;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the IsrDetail instance associated with the given id.")
    public boolean deleteIsrDetail(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IsrDetail with id: {}" , id);

        IsrDetail deletedIsrDetail = isrDetailService.delete(id);

        return deletedIsrDetail != null;
    }
    /**
     * @deprecated Use {@link #findIsrDetails(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of IsrDetail instances matching the search criteria.")
	public Page<IsrDetail> findIsrDetails( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering IsrDetails list");
		return isrDetailService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of IsrDetail instances matching the search criteria.")
    public Page<IsrDetail> findIsrDetails(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IsrDetails list");
    	return isrDetailService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportIsrDetails(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return isrDetailService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of IsrDetail instances.")
	public Long countIsrDetails(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting IsrDetails");
		return isrDetailService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IsrDetailService instance
	 */
	protected void setIsrDetailService(IsrDetailService service) {
		this.isrDetailService = service;
	}

}

