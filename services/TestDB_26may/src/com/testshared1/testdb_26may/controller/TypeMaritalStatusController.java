/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ApplicantToPosition;
import com.testshared1.testdb_26may.Employee;
import com.testshared1.testdb_26may.TypeMaritalStatus;
import com.testshared1.testdb_26may.service.ApplicantToPositionService;
import com.testshared1.testdb_26may.service.EmployeeService;
import com.testshared1.testdb_26may.service.TypeMaritalStatusService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypeMaritalStatus.
 * @see TypeMaritalStatus
 */
@RestController("TestDB_26may.TypeMaritalStatusController")
@RequestMapping("/TestDB_26may/TypeMaritalStatus")
@Api(description = "Exposes APIs to work with TypeMaritalStatus resource.", value = "TypeMaritalStatusController")
public class TypeMaritalStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeMaritalStatusController.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeMaritalStatusService")
    private TypeMaritalStatusService typeMaritalStatusService;

    @Autowired
    @Qualifier("TestDB_26may.EmployeeService")
    private EmployeeService employeeService;

    @Autowired
    @Qualifier("TestDB_26may.ApplicantToPositionService")
    private ApplicantToPositionService applicantToPositionService;

    /**
     * @deprecated Use {@link #findTypeMaritalStatuses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypeMaritalStatus instances matching the search criteria.")
    public Page<TypeMaritalStatus> findTypeMaritalStatuses(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypeMaritalStatuses list");
        return typeMaritalStatusService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeMaritalStatus instances matching the search criteria.")
    public Page<TypeMaritalStatus> findTypeMaritalStatuses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeMaritalStatuses list");
        return typeMaritalStatusService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeMaritalStatuses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return typeMaritalStatusService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/applicantToPositions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantToPositions instance associated with the given id.")
    public Page<ApplicantToPosition> findAssociatedApplicantToPositions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated applicantToPositions");
        return applicantToPositionService.findAssociatedValues(id, "ApplicantToPosition", "idTypeEmployeeTermination", pageable);
    }

    @RequestMapping(value = "/{id:.+}/employees", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
    public Page<Employee> findAssociatedEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id, "Employee", "idTypeEmployeeTermination", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeMaritalStatusService instance
	 */
    protected void setTypeMaritalStatusService(TypeMaritalStatusService service) {
        this.typeMaritalStatusService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeService instance
	 */
    protected void setEmployeeService(EmployeeService service) {
        this.employeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantToPositionService instance
	 */
    protected void setApplicantToPositionService(ApplicantToPositionService service) {
        this.applicantToPositionService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypeMaritalStatus instance.")
    public TypeMaritalStatus createTypeMaritalStatus(@RequestBody TypeMaritalStatus typemaritalstatus) {
        LOGGER.debug("Create TypeMaritalStatus with information: {}", typemaritalstatus);
        typemaritalstatus = typeMaritalStatusService.create(typemaritalstatus);
        LOGGER.debug("Created TypeMaritalStatus with information: {}", typemaritalstatus);
        return typemaritalstatus;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypeMaritalStatus instances.")
    public Long countTypeMaritalStatuses(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TypeMaritalStatuses");
        return typeMaritalStatusService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypeMaritalStatus instance associated with the given id.")
    public TypeMaritalStatus getTypeMaritalStatus(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeMaritalStatus with id: {}", id);
        TypeMaritalStatus foundTypeMaritalStatus = typeMaritalStatusService.getById(id);
        LOGGER.debug("TypeMaritalStatus details with id: {}", foundTypeMaritalStatus);
        return foundTypeMaritalStatus;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypeMaritalStatus instance associated with the given id.")
    public TypeMaritalStatus editTypeMaritalStatus(@PathVariable(value = "id") Integer id, @RequestBody TypeMaritalStatus typemaritalstatus) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeMaritalStatus with id: {}", typemaritalstatus.getIdTypeEmployeeTermination());
        typemaritalstatus.setIdTypeEmployeeTermination(id);
        typemaritalstatus = typeMaritalStatusService.update(typemaritalstatus);
        LOGGER.debug("TypeMaritalStatus details with id: {}", typemaritalstatus);
        return typemaritalstatus;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypeMaritalStatus instance associated with the given id.")
    public boolean deleteTypeMaritalStatus(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeMaritalStatus with id: {}", id);
        TypeMaritalStatus deletedTypeMaritalStatus = typeMaritalStatusService.delete(id);
        return deletedTypeMaritalStatus != null;
    }
}
