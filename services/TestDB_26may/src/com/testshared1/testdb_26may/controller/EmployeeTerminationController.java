/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.EmployeeTermination;
import com.testshared1.testdb_26may.service.EmployeeTerminationService;


/**
 * Controller object for domain model class EmployeeTermination.
 * @see EmployeeTermination
 */
@RestController("TestDB_26may.EmployeeTerminationController")
@Api(value = "/TestDB_26may/EmployeeTermination", description = "Exposes APIs to work with EmployeeTermination resource.")
@RequestMapping("/TestDB_26may/EmployeeTermination")
public class EmployeeTerminationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTerminationController.class);

    @Autowired
	@Qualifier("TestDB_26may.EmployeeTerminationService")
	private EmployeeTerminationService employeeTerminationService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeTermination instance.")
	public EmployeeTermination createEmployeeTermination(@RequestBody EmployeeTermination employeetermination) {
		LOGGER.debug("Create EmployeeTermination with information: {}" , employeetermination);

		employeetermination = employeeTerminationService.create(employeetermination);
		LOGGER.debug("Created EmployeeTermination with information: {}" , employeetermination);

	    return employeetermination;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeTermination instance associated with the given id.")
    public EmployeeTermination getEmployeeTermination(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeTermination with id: {}" , id);

        EmployeeTermination foundEmployeeTermination = employeeTerminationService.getById(id);
        LOGGER.debug("EmployeeTermination details with id: {}" , foundEmployeeTermination);

        return foundEmployeeTermination;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeTermination instance associated with the given id.")
    public EmployeeTermination editEmployeeTermination(@PathVariable("id") Integer id, @RequestBody EmployeeTermination employeetermination) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeTermination with id: {}" , employeetermination.getIdEmployeeTermination());

        employeetermination.setIdEmployeeTermination(id);
        employeetermination = employeeTerminationService.update(employeetermination);
        LOGGER.debug("EmployeeTermination details with id: {}" , employeetermination);

        return employeetermination;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeTermination instance associated with the given id.")
    public boolean deleteEmployeeTermination(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeTermination with id: {}" , id);

        EmployeeTermination deletedEmployeeTermination = employeeTerminationService.delete(id);

        return deletedEmployeeTermination != null;
    }
    /**
     * @deprecated Use {@link #findEmployeeTerminations(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeTermination instances matching the search criteria.")
	public Page<EmployeeTermination> findEmployeeTerminations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeTerminations list");
		return employeeTerminationService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeTermination instances matching the search criteria.")
    public Page<EmployeeTermination> findEmployeeTerminations(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeTerminations list");
    	return employeeTerminationService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeTerminations(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeTerminationService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeTermination instances.")
	public Long countEmployeeTerminations(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeTerminations");
		return employeeTerminationService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeTerminationService instance
	 */
	protected void setEmployeeTerminationService(EmployeeTerminationService service) {
		this.employeeTerminationService = service;
	}

}

