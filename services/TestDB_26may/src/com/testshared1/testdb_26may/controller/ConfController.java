/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.Conf;
import com.testshared1.testdb_26may.service.ConfService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Conf.
 * @see Conf
 */
@RestController("TestDB_26may.ConfController")
@RequestMapping("/TestDB_26may/Conf")
@Api(description = "Exposes APIs to work with Conf resource.", value = "ConfController")
public class ConfController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConfController.class);

    @Autowired
    @Qualifier("TestDB_26may.ConfService")
    private ConfService confService;

    /**
     * @deprecated Use {@link #findConfs(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Conf instances matching the search criteria.")
    public Page<Conf> findConfs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Confs list");
        return confService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Conf instances matching the search criteria.")
    public Page<Conf> findConfs(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Confs list");
        return confService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportConfs(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return confService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ConfService instance
	 */
    protected void setConfService(ConfService service) {
        this.confService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Conf instance.")
    public Conf createConf(@RequestBody Conf conf) {
        LOGGER.debug("Create Conf with information: {}", conf);
        conf = confService.create(conf);
        LOGGER.debug("Created Conf with information: {}", conf);
        return conf;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Conf instances.")
    public Long countConfs(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Confs");
        return confService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Conf instance associated with the given id.")
    public Conf getConf(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Conf with id: {}", id);
        Conf foundConf = confService.getById(id);
        LOGGER.debug("Conf details with id: {}", foundConf);
        return foundConf;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Conf instance associated with the given id.")
    public Conf editConf(@PathVariable(value = "id") Integer id, @RequestBody Conf conf) throws EntityNotFoundException {
        LOGGER.debug("Editing Conf with id: {}", conf.getIdConf());
        conf.setIdConf(id);
        conf = confService.update(conf);
        LOGGER.debug("Conf details with id: {}", conf);
        return conf;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Conf instance associated with the given id.")
    public boolean deleteConf(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Conf with id: {}", id);
        Conf deletedConf = confService.delete(id);
        return deletedConf != null;
    }
}
