/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ApplicantFile;
import com.testshared1.testdb_26may.service.ApplicantFileService;


/**
 * Controller object for domain model class ApplicantFile.
 * @see ApplicantFile
 */
@RestController("TestDB_26may.ApplicantFileController")
@Api(value = "/TestDB_26may/ApplicantFile", description = "Exposes APIs to work with ApplicantFile resource.")
@RequestMapping("/TestDB_26may/ApplicantFile")
public class ApplicantFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantFileController.class);

    @Autowired
	@Qualifier("TestDB_26may.ApplicantFileService")
	private ApplicantFileService applicantFileService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ApplicantFile instance.")
	public ApplicantFile createApplicantFile(@RequestBody ApplicantFile applicantfile) {
		LOGGER.debug("Create ApplicantFile with information: {}" , applicantfile);

		applicantfile = applicantFileService.create(applicantfile);
		LOGGER.debug("Created ApplicantFile with information: {}" , applicantfile);

	    return applicantfile;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ApplicantFile instance associated with the given id.")
    public ApplicantFile getApplicantFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ApplicantFile with id: {}" , id);

        ApplicantFile foundApplicantFile = applicantFileService.getById(id);
        LOGGER.debug("ApplicantFile details with id: {}" , foundApplicantFile);

        return foundApplicantFile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ApplicantFile instance associated with the given id.")
    public ApplicantFile editApplicantFile(@PathVariable("id") Integer id, @RequestBody ApplicantFile applicantfile) throws EntityNotFoundException {
        LOGGER.debug("Editing ApplicantFile with id: {}" , applicantfile.getIdApplicantFile());

        applicantfile.setIdApplicantFile(id);
        applicantfile = applicantFileService.update(applicantfile);
        LOGGER.debug("ApplicantFile details with id: {}" , applicantfile);

        return applicantfile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ApplicantFile instance associated with the given id.")
    public boolean deleteApplicantFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantFile with id: {}" , id);

        ApplicantFile deletedApplicantFile = applicantFileService.delete(id);

        return deletedApplicantFile != null;
    }
    /**
     * @deprecated Use {@link #findApplicantFiles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ApplicantFile instances matching the search criteria.")
	public Page<ApplicantFile> findApplicantFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ApplicantFiles list");
		return applicantFileService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ApplicantFile instances matching the search criteria.")
    public Page<ApplicantFile> findApplicantFiles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ApplicantFiles list");
    	return applicantFileService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportApplicantFiles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return applicantFileService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ApplicantFile instances.")
	public Long countApplicantFiles(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ApplicantFiles");
		return applicantFileService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantFileService instance
	 */
	protected void setApplicantFileService(ApplicantFileService service) {
		this.applicantFileService = service;
	}

}

