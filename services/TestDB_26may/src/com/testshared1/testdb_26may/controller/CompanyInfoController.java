/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.CompanyInfo;
import com.testshared1.testdb_26may.service.CompanyInfoService;


/**
 * Controller object for domain model class CompanyInfo.
 * @see CompanyInfo
 */
@RestController("TestDB_26may.CompanyInfoController")
@Api(value = "/TestDB_26may/CompanyInfo", description = "Exposes APIs to work with CompanyInfo resource.")
@RequestMapping("/TestDB_26may/CompanyInfo")
public class CompanyInfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyInfoController.class);

    @Autowired
	@Qualifier("TestDB_26may.CompanyInfoService")
	private CompanyInfoService companyInfoService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new CompanyInfo instance.")
	public CompanyInfo createCompanyInfo(@RequestBody CompanyInfo companyinfo) {
		LOGGER.debug("Create CompanyInfo with information: {}" , companyinfo);

		companyinfo = companyInfoService.create(companyinfo);
		LOGGER.debug("Created CompanyInfo with information: {}" , companyinfo);

	    return companyinfo;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the CompanyInfo instance associated with the given id.")
    public CompanyInfo getCompanyInfo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CompanyInfo with id: {}" , id);

        CompanyInfo foundCompanyInfo = companyInfoService.getById(id);
        LOGGER.debug("CompanyInfo details with id: {}" , foundCompanyInfo);

        return foundCompanyInfo;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the CompanyInfo instance associated with the given id.")
    public CompanyInfo editCompanyInfo(@PathVariable("id") Integer id, @RequestBody CompanyInfo companyinfo) throws EntityNotFoundException {
        LOGGER.debug("Editing CompanyInfo with id: {}" , companyinfo.getIdCompanyInfo());

        companyinfo.setIdCompanyInfo(id);
        companyinfo = companyInfoService.update(companyinfo);
        LOGGER.debug("CompanyInfo details with id: {}" , companyinfo);

        return companyinfo;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the CompanyInfo instance associated with the given id.")
    public boolean deleteCompanyInfo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompanyInfo with id: {}" , id);

        CompanyInfo deletedCompanyInfo = companyInfoService.delete(id);

        return deletedCompanyInfo != null;
    }
    /**
     * @deprecated Use {@link #findCompanyInfos(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of CompanyInfo instances matching the search criteria.")
	public Page<CompanyInfo> findCompanyInfos( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering CompanyInfos list");
		return companyInfoService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CompanyInfo instances matching the search criteria.")
    public Page<CompanyInfo> findCompanyInfos(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompanyInfos list");
    	return companyInfoService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCompanyInfos(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return companyInfoService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of CompanyInfo instances.")
	public Long countCompanyInfos(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompanyInfos");
		return companyInfoService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompanyInfoService instance
	 */
	protected void setCompanyInfoService(CompanyInfoService service) {
		this.companyInfoService = service;
	}

}

