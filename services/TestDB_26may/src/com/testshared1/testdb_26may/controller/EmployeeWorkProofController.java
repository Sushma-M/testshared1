/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeWorkProof;
import com.testshared1.testdb_26may.service.EmployeeWorkProofService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class EmployeeWorkProof.
 * @see EmployeeWorkProof
 */
@RestController("TestDB_26may.EmployeeWorkProofController")
@RequestMapping("/TestDB_26may/EmployeeWorkProof")
@Api(description = "Exposes APIs to work with EmployeeWorkProof resource.", value = "EmployeeWorkProofController")
public class EmployeeWorkProofController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeWorkProofController.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeWorkProofService")
    private EmployeeWorkProofService employeeWorkProofService;

    /**
     * @deprecated Use {@link #findEmployeeWorkProofs(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of EmployeeWorkProof instances matching the search criteria.")
    public Page<EmployeeWorkProof> findEmployeeWorkProofs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeWorkProofs list");
        return employeeWorkProofService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeWorkProof instances matching the search criteria.")
    public Page<EmployeeWorkProof> findEmployeeWorkProofs(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeWorkProofs list");
        return employeeWorkProofService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeWorkProofs(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employeeWorkProofService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeWorkProofService instance
	 */
    protected void setEmployeeWorkProofService(EmployeeWorkProofService service) {
        this.employeeWorkProofService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new EmployeeWorkProof instance.")
    public EmployeeWorkProof createEmployeeWorkProof(@RequestBody EmployeeWorkProof employeeworkproof) {
        LOGGER.debug("Create EmployeeWorkProof with information: {}", employeeworkproof);
        employeeworkproof = employeeWorkProofService.create(employeeworkproof);
        LOGGER.debug("Created EmployeeWorkProof with information: {}", employeeworkproof);
        return employeeworkproof;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of EmployeeWorkProof instances.")
    public Long countEmployeeWorkProofs(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting EmployeeWorkProofs");
        return employeeWorkProofService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the EmployeeWorkProof instance associated with the given id.")
    public EmployeeWorkProof getEmployeeWorkProof(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeWorkProof with id: {}", id);
        EmployeeWorkProof foundEmployeeWorkProof = employeeWorkProofService.getById(id);
        LOGGER.debug("EmployeeWorkProof details with id: {}", foundEmployeeWorkProof);
        return foundEmployeeWorkProof;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the EmployeeWorkProof instance associated with the given id.")
    public EmployeeWorkProof editEmployeeWorkProof(@PathVariable(value = "id") Integer id, @RequestBody EmployeeWorkProof employeeworkproof) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeWorkProof with id: {}", employeeworkproof.getIdEmployeeWorkProof());
        employeeworkproof.setIdEmployeeWorkProof(id);
        employeeworkproof = employeeWorkProofService.update(employeeworkproof);
        LOGGER.debug("EmployeeWorkProof details with id: {}", employeeworkproof);
        return employeeworkproof;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the EmployeeWorkProof instance associated with the given id.")
    public boolean deleteEmployeeWorkProof(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeWorkProof with id: {}", id);
        EmployeeWorkProof deletedEmployeeWorkProof = employeeWorkProofService.delete(id);
        return deletedEmployeeWorkProof != null;
    }
}
