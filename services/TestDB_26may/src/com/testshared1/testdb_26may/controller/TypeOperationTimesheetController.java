/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.TimeSheet;
import com.testshared1.testdb_26may.TypeOperationTimesheet;
import com.testshared1.testdb_26may.service.TimeSheetService;
import com.testshared1.testdb_26may.service.TypeOperationTimesheetService;


/**
 * Controller object for domain model class TypeOperationTimesheet.
 * @see TypeOperationTimesheet
 */
@RestController("TestDB_26may.TypeOperationTimesheetController")
@Api(value = "/TestDB_26may/TypeOperationTimesheet", description = "Exposes APIs to work with TypeOperationTimesheet resource.")
@RequestMapping("/TestDB_26may/TypeOperationTimesheet")
public class TypeOperationTimesheetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationTimesheetController.class);

    @Autowired
	@Qualifier("TestDB_26may.TypeOperationTimesheetService")
	private TypeOperationTimesheetService typeOperationTimesheetService;

    @Autowired
	@Qualifier("TestDB_26may.TimeSheetService")
	private TimeSheetService timeSheetService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeOperationTimesheet instance.")
	public TypeOperationTimesheet createTypeOperationTimesheet(@RequestBody TypeOperationTimesheet typeoperationtimesheet) {
		LOGGER.debug("Create TypeOperationTimesheet with information: {}" , typeoperationtimesheet);

		typeoperationtimesheet = typeOperationTimesheetService.create(typeoperationtimesheet);
		LOGGER.debug("Created TypeOperationTimesheet with information: {}" , typeoperationtimesheet);

	    return typeoperationtimesheet;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeOperationTimesheet instance associated with the given id.")
    public TypeOperationTimesheet getTypeOperationTimesheet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeOperationTimesheet with id: {}" , id);

        TypeOperationTimesheet foundTypeOperationTimesheet = typeOperationTimesheetService.getById(id);
        LOGGER.debug("TypeOperationTimesheet details with id: {}" , foundTypeOperationTimesheet);

        return foundTypeOperationTimesheet;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeOperationTimesheet instance associated with the given id.")
    public TypeOperationTimesheet editTypeOperationTimesheet(@PathVariable("id") Integer id, @RequestBody TypeOperationTimesheet typeoperationtimesheet) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeOperationTimesheet with id: {}" , typeoperationtimesheet.getIdTypeOperationTimesheet());

        typeoperationtimesheet.setIdTypeOperationTimesheet(id);
        typeoperationtimesheet = typeOperationTimesheetService.update(typeoperationtimesheet);
        LOGGER.debug("TypeOperationTimesheet details with id: {}" , typeoperationtimesheet);

        return typeoperationtimesheet;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeOperationTimesheet instance associated with the given id.")
    public boolean deleteTypeOperationTimesheet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeOperationTimesheet with id: {}" , id);

        TypeOperationTimesheet deletedTypeOperationTimesheet = typeOperationTimesheetService.delete(id);

        return deletedTypeOperationTimesheet != null;
    }
    /**
     * @deprecated Use {@link #findTypeOperationTimesheets(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeOperationTimesheet instances matching the search criteria.")
	public Page<TypeOperationTimesheet> findTypeOperationTimesheets( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeOperationTimesheets list");
		return typeOperationTimesheetService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeOperationTimesheet instances matching the search criteria.")
    public Page<TypeOperationTimesheet> findTypeOperationTimesheets(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeOperationTimesheets list");
    	return typeOperationTimesheetService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeOperationTimesheets(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return typeOperationTimesheetService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeOperationTimesheet instances.")
	public Long countTypeOperationTimesheets(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TypeOperationTimesheets");
		return typeOperationTimesheetService.count(query);
	}

    @RequestMapping(value="/{id:.+}/timeSheets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the timeSheets instance associated with the given id.")
     public Page<TimeSheet>
        findAssociatedTimeSheets(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated timeSheets");
        return timeSheetService.findAssociatedValues(id, "TimeSheet", "idTypeOperationTimesheet", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeOperationTimesheetService instance
	 */
	protected void setTypeOperationTimesheetService(TypeOperationTimesheetService service) {
		this.typeOperationTimesheetService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TimeSheetService instance
	 */
	protected void setTimeSheetService(TimeSheetService service) {
        this.timeSheetService = service;
    }
}

