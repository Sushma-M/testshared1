/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.EmployeeFile;
import com.testshared1.testdb_26may.service.EmployeeFileService;


/**
 * Controller object for domain model class EmployeeFile.
 * @see EmployeeFile
 */
@RestController("TestDB_26may.EmployeeFileController")
@Api(value = "/TestDB_26may/EmployeeFile", description = "Exposes APIs to work with EmployeeFile resource.")
@RequestMapping("/TestDB_26may/EmployeeFile")
public class EmployeeFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeFileController.class);

    @Autowired
	@Qualifier("TestDB_26may.EmployeeFileService")
	private EmployeeFileService employeeFileService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeFile instance.")
	public EmployeeFile createEmployeeFile(@RequestBody EmployeeFile employeefile) {
		LOGGER.debug("Create EmployeeFile with information: {}" , employeefile);

		employeefile = employeeFileService.create(employeefile);
		LOGGER.debug("Created EmployeeFile with information: {}" , employeefile);

	    return employeefile;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeFile instance associated with the given id.")
    public EmployeeFile getEmployeeFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeFile with id: {}" , id);

        EmployeeFile foundEmployeeFile = employeeFileService.getById(id);
        LOGGER.debug("EmployeeFile details with id: {}" , foundEmployeeFile);

        return foundEmployeeFile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeFile instance associated with the given id.")
    public EmployeeFile editEmployeeFile(@PathVariable("id") Integer id, @RequestBody EmployeeFile employeefile) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeFile with id: {}" , employeefile.getIdEmployeeFile());

        employeefile.setIdEmployeeFile(id);
        employeefile = employeeFileService.update(employeefile);
        LOGGER.debug("EmployeeFile details with id: {}" , employeefile);

        return employeefile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeFile instance associated with the given id.")
    public boolean deleteEmployeeFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeFile with id: {}" , id);

        EmployeeFile deletedEmployeeFile = employeeFileService.delete(id);

        return deletedEmployeeFile != null;
    }
    /**
     * @deprecated Use {@link #findEmployeeFiles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeFile instances matching the search criteria.")
	public Page<EmployeeFile> findEmployeeFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeFiles list");
		return employeeFileService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeFile instances matching the search criteria.")
    public Page<EmployeeFile> findEmployeeFiles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeFiles list");
    	return employeeFileService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeFiles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeFileService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeFile instances.")
	public Long countEmployeeFiles(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeFiles");
		return employeeFileService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeFileService instance
	 */
	protected void setEmployeeFileService(EmployeeFileService service) {
		this.employeeFileService = service;
	}

}

