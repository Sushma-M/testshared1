/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ScheduleFixedDay;
import com.testshared1.testdb_26may.service.ScheduleFixedDayService;


/**
 * Controller object for domain model class ScheduleFixedDay.
 * @see ScheduleFixedDay
 */
@RestController("TestDB_26may.ScheduleFixedDayController")
@Api(value = "/TestDB_26may/ScheduleFixedDay", description = "Exposes APIs to work with ScheduleFixedDay resource.")
@RequestMapping("/TestDB_26may/ScheduleFixedDay")
public class ScheduleFixedDayController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedDayController.class);

    @Autowired
	@Qualifier("TestDB_26may.ScheduleFixedDayService")
	private ScheduleFixedDayService scheduleFixedDayService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ScheduleFixedDay instance.")
	public ScheduleFixedDay createScheduleFixedDay(@RequestBody ScheduleFixedDay schedulefixedday) {
		LOGGER.debug("Create ScheduleFixedDay with information: {}" , schedulefixedday);

		schedulefixedday = scheduleFixedDayService.create(schedulefixedday);
		LOGGER.debug("Created ScheduleFixedDay with information: {}" , schedulefixedday);

	    return schedulefixedday;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ScheduleFixedDay instance associated with the given id.")
    public ScheduleFixedDay getScheduleFixedDay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScheduleFixedDay with id: {}" , id);

        ScheduleFixedDay foundScheduleFixedDay = scheduleFixedDayService.getById(id);
        LOGGER.debug("ScheduleFixedDay details with id: {}" , foundScheduleFixedDay);

        return foundScheduleFixedDay;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ScheduleFixedDay instance associated with the given id.")
    public ScheduleFixedDay editScheduleFixedDay(@PathVariable("id") Integer id, @RequestBody ScheduleFixedDay schedulefixedday) throws EntityNotFoundException {
        LOGGER.debug("Editing ScheduleFixedDay with id: {}" , schedulefixedday.getIdScheduleFixedDay());

        schedulefixedday.setIdScheduleFixedDay(id);
        schedulefixedday = scheduleFixedDayService.update(schedulefixedday);
        LOGGER.debug("ScheduleFixedDay details with id: {}" , schedulefixedday);

        return schedulefixedday;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ScheduleFixedDay instance associated with the given id.")
    public boolean deleteScheduleFixedDay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleFixedDay with id: {}" , id);

        ScheduleFixedDay deletedScheduleFixedDay = scheduleFixedDayService.delete(id);

        return deletedScheduleFixedDay != null;
    }
    /**
     * @deprecated Use {@link #findScheduleFixedDays(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ScheduleFixedDay instances matching the search criteria.")
	public Page<ScheduleFixedDay> findScheduleFixedDays( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ScheduleFixedDays list");
		return scheduleFixedDayService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ScheduleFixedDay instances matching the search criteria.")
    public Page<ScheduleFixedDay> findScheduleFixedDays(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ScheduleFixedDays list");
    	return scheduleFixedDayService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportScheduleFixedDays(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return scheduleFixedDayService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ScheduleFixedDay instances.")
	public Long countScheduleFixedDays(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ScheduleFixedDays");
		return scheduleFixedDayService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ScheduleFixedDayService instance
	 */
	protected void setScheduleFixedDayService(ScheduleFixedDayService service) {
		this.scheduleFixedDayService = service;
	}

}

