/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.Asset;
import com.testshared1.testdb_26may.TypeAsset;
import com.testshared1.testdb_26may.service.AssetService;
import com.testshared1.testdb_26may.service.TypeAssetService;


/**
 * Controller object for domain model class TypeAsset.
 * @see TypeAsset
 */
@RestController("TestDB_26may.TypeAssetController")
@Api(value = "/TestDB_26may/TypeAsset", description = "Exposes APIs to work with TypeAsset resource.")
@RequestMapping("/TestDB_26may/TypeAsset")
public class TypeAssetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAssetController.class);

    @Autowired
	@Qualifier("TestDB_26may.TypeAssetService")
	private TypeAssetService typeAssetService;

    @Autowired
	@Qualifier("TestDB_26may.AssetService")
	private AssetService assetService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeAsset instance.")
	public TypeAsset createTypeAsset(@RequestBody TypeAsset typeasset) {
		LOGGER.debug("Create TypeAsset with information: {}" , typeasset);

		typeasset = typeAssetService.create(typeasset);
		LOGGER.debug("Created TypeAsset with information: {}" , typeasset);

	    return typeasset;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeAsset instance associated with the given id.")
    public TypeAsset getTypeAsset(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeAsset with id: {}" , id);

        TypeAsset foundTypeAsset = typeAssetService.getById(id);
        LOGGER.debug("TypeAsset details with id: {}" , foundTypeAsset);

        return foundTypeAsset;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeAsset instance associated with the given id.")
    public TypeAsset editTypeAsset(@PathVariable("id") Integer id, @RequestBody TypeAsset typeasset) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeAsset with id: {}" , typeasset.getIdTypeAsset());

        typeasset.setIdTypeAsset(id);
        typeasset = typeAssetService.update(typeasset);
        LOGGER.debug("TypeAsset details with id: {}" , typeasset);

        return typeasset;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeAsset instance associated with the given id.")
    public boolean deleteTypeAsset(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeAsset with id: {}" , id);

        TypeAsset deletedTypeAsset = typeAssetService.delete(id);

        return deletedTypeAsset != null;
    }
    /**
     * @deprecated Use {@link #findTypeAssets(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeAsset instances matching the search criteria.")
	public Page<TypeAsset> findTypeAssets( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeAssets list");
		return typeAssetService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeAsset instances matching the search criteria.")
    public Page<TypeAsset> findTypeAssets(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeAssets list");
    	return typeAssetService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeAssets(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return typeAssetService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeAsset instances.")
	public Long countTypeAssets(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TypeAssets");
		return typeAssetService.count(query);
	}

    @RequestMapping(value="/{id:.+}/assets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assets instance associated with the given id.")
     public Page<Asset>
        findAssociatedAssets(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assets");
        return assetService.findAssociatedValues(id, "Asset", "idTypeAsset", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeAssetService instance
	 */
	protected void setTypeAssetService(TypeAssetService service) {
		this.typeAssetService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetService instance
	 */
	protected void setAssetService(AssetService service) {
        this.assetService = service;
    }
}

