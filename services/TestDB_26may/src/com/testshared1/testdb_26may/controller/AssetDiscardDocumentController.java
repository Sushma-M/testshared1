/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.AssetDiscardDocument;
import com.testshared1.testdb_26may.ListAssetDiscarded;
import com.testshared1.testdb_26may.service.AssetDiscardDocumentService;
import com.testshared1.testdb_26may.service.ListAssetDiscardedService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AssetDiscardDocument.
 * @see AssetDiscardDocument
 */
@RestController("TestDB_26may.AssetDiscardDocumentController")
@RequestMapping("/TestDB_26may/AssetDiscardDocument")
@Api(description = "Exposes APIs to work with AssetDiscardDocument resource.", value = "AssetDiscardDocumentController")
public class AssetDiscardDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDiscardDocumentController.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetDiscardDocumentService")
    private AssetDiscardDocumentService assetDiscardDocumentService;

    @Autowired
    @Qualifier("TestDB_26may.ListAssetDiscardedService")
    private ListAssetDiscardedService listAssetDiscardedService;

    /**
     * @deprecated Use {@link #findAssetDiscardDocuments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AssetDiscardDocument instances matching the search criteria.")
    public Page<AssetDiscardDocument> findAssetDiscardDocuments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AssetDiscardDocuments list");
        return assetDiscardDocumentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssetDiscardDocument instances matching the search criteria.")
    public Page<AssetDiscardDocument> findAssetDiscardDocuments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssetDiscardDocuments list");
        return assetDiscardDocumentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssetDiscardDocuments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return assetDiscardDocumentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/listAssetDiscardeds", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetDiscardeds instance associated with the given id.")
    public Page<ListAssetDiscarded> findAssociatedListAssetDiscardeds(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listAssetDiscardeds");
        return listAssetDiscardedService.findAssociatedValues(id, "ListAssetDiscarded", "idAssetDiscardDocument", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetDiscardDocumentService instance
	 */
    protected void setAssetDiscardDocumentService(AssetDiscardDocumentService service) {
        this.assetDiscardDocumentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListAssetDiscardedService instance
	 */
    protected void setListAssetDiscardedService(ListAssetDiscardedService service) {
        this.listAssetDiscardedService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AssetDiscardDocument instance.")
    public AssetDiscardDocument createAssetDiscardDocument(@RequestBody AssetDiscardDocument assetdiscarddocument) {
        LOGGER.debug("Create AssetDiscardDocument with information: {}", assetdiscarddocument);
        assetdiscarddocument = assetDiscardDocumentService.create(assetdiscarddocument);
        LOGGER.debug("Created AssetDiscardDocument with information: {}", assetdiscarddocument);
        return assetdiscarddocument;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AssetDiscardDocument instances.")
    public Long countAssetDiscardDocuments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AssetDiscardDocuments");
        return assetDiscardDocumentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AssetDiscardDocument instance associated with the given id.")
    public AssetDiscardDocument getAssetDiscardDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetDiscardDocument with id: {}", id);
        AssetDiscardDocument foundAssetDiscardDocument = assetDiscardDocumentService.getById(id);
        LOGGER.debug("AssetDiscardDocument details with id: {}", foundAssetDiscardDocument);
        return foundAssetDiscardDocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AssetDiscardDocument instance associated with the given id.")
    public AssetDiscardDocument editAssetDiscardDocument(@PathVariable(value = "id") Integer id, @RequestBody AssetDiscardDocument assetdiscarddocument) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetDiscardDocument with id: {}", assetdiscarddocument.getIdAssetDiscardDocument());
        assetdiscarddocument.setIdAssetDiscardDocument(id);
        assetdiscarddocument = assetDiscardDocumentService.update(assetdiscarddocument);
        LOGGER.debug("AssetDiscardDocument details with id: {}", assetdiscarddocument);
        return assetdiscarddocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AssetDiscardDocument instance associated with the given id.")
    public boolean deleteAssetDiscardDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetDiscardDocument with id: {}", id);
        AssetDiscardDocument deletedAssetDiscardDocument = assetDiscardDocumentService.delete(id);
        return deletedAssetDiscardDocument != null;
    }
}
