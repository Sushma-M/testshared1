/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ListCelphoneDetailPayroll;
import com.testshared1.testdb_26may.service.ListCelphoneDetailPayrollService;


/**
 * Controller object for domain model class ListCelphoneDetailPayroll.
 * @see ListCelphoneDetailPayroll
 */
@RestController("TestDB_26may.ListCelphoneDetailPayrollController")
@Api(value = "/TestDB_26may/ListCelphoneDetailPayroll", description = "Exposes APIs to work with ListCelphoneDetailPayroll resource.")
@RequestMapping("/TestDB_26may/ListCelphoneDetailPayroll")
public class ListCelphoneDetailPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCelphoneDetailPayrollController.class);

    @Autowired
	@Qualifier("TestDB_26may.ListCelphoneDetailPayrollService")
	private ListCelphoneDetailPayrollService listCelphoneDetailPayrollService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListCelphoneDetailPayroll instance.")
	public ListCelphoneDetailPayroll createListCelphoneDetailPayroll(@RequestBody ListCelphoneDetailPayroll listcelphonedetailpayroll) {
		LOGGER.debug("Create ListCelphoneDetailPayroll with information: {}" , listcelphonedetailpayroll);

		listcelphonedetailpayroll = listCelphoneDetailPayrollService.create(listcelphonedetailpayroll);
		LOGGER.debug("Created ListCelphoneDetailPayroll with information: {}" , listcelphonedetailpayroll);

	    return listcelphonedetailpayroll;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListCelphoneDetailPayroll instance associated with the given id.")
    public ListCelphoneDetailPayroll getListCelphoneDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListCelphoneDetailPayroll with id: {}" , id);

        ListCelphoneDetailPayroll foundListCelphoneDetailPayroll = listCelphoneDetailPayrollService.getById(id);
        LOGGER.debug("ListCelphoneDetailPayroll details with id: {}" , foundListCelphoneDetailPayroll);

        return foundListCelphoneDetailPayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListCelphoneDetailPayroll instance associated with the given id.")
    public ListCelphoneDetailPayroll editListCelphoneDetailPayroll(@PathVariable("id") Integer id, @RequestBody ListCelphoneDetailPayroll listcelphonedetailpayroll) throws EntityNotFoundException {
        LOGGER.debug("Editing ListCelphoneDetailPayroll with id: {}" , listcelphonedetailpayroll.getIdListCelphoneDetailPayroll());

        listcelphonedetailpayroll.setIdListCelphoneDetailPayroll(id);
        listcelphonedetailpayroll = listCelphoneDetailPayrollService.update(listcelphonedetailpayroll);
        LOGGER.debug("ListCelphoneDetailPayroll details with id: {}" , listcelphonedetailpayroll);

        return listcelphonedetailpayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListCelphoneDetailPayroll instance associated with the given id.")
    public boolean deleteListCelphoneDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCelphoneDetailPayroll with id: {}" , id);

        ListCelphoneDetailPayroll deletedListCelphoneDetailPayroll = listCelphoneDetailPayrollService.delete(id);

        return deletedListCelphoneDetailPayroll != null;
    }
    /**
     * @deprecated Use {@link #findListCelphoneDetailPayrolls(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListCelphoneDetailPayroll instances matching the search criteria.")
	public Page<ListCelphoneDetailPayroll> findListCelphoneDetailPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListCelphoneDetailPayrolls list");
		return listCelphoneDetailPayrollService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListCelphoneDetailPayroll instances matching the search criteria.")
    public Page<ListCelphoneDetailPayroll> findListCelphoneDetailPayrolls(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListCelphoneDetailPayrolls list");
    	return listCelphoneDetailPayrollService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListCelphoneDetailPayrolls(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listCelphoneDetailPayrollService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListCelphoneDetailPayroll instances.")
	public Long countListCelphoneDetailPayrolls(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListCelphoneDetailPayrolls");
		return listCelphoneDetailPayrollService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCelphoneDetailPayrollService instance
	 */
	protected void setListCelphoneDetailPayrollService(ListCelphoneDetailPayrollService service) {
		this.listCelphoneDetailPayrollService = service;
	}

}

