/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.TravelEmployee;
import com.testshared1.testdb_26may.TravelExpense;
import com.testshared1.testdb_26may.service.TravelEmployeeService;
import com.testshared1.testdb_26may.service.TravelExpenseService;


/**
 * Controller object for domain model class TravelEmployee.
 * @see TravelEmployee
 */
@RestController("TestDB_26may.TravelEmployeeController")
@Api(value = "/TestDB_26may/TravelEmployee", description = "Exposes APIs to work with TravelEmployee resource.")
@RequestMapping("/TestDB_26may/TravelEmployee")
public class TravelEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TravelEmployeeController.class);

    @Autowired
	@Qualifier("TestDB_26may.TravelEmployeeService")
	private TravelEmployeeService travelEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.TravelExpenseService")
	private TravelExpenseService travelExpenseService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TravelEmployee instance.")
	public TravelEmployee createTravelEmployee(@RequestBody TravelEmployee travelemployee) {
		LOGGER.debug("Create TravelEmployee with information: {}" , travelemployee);

		travelemployee = travelEmployeeService.create(travelemployee);
		LOGGER.debug("Created TravelEmployee with information: {}" , travelemployee);

	    return travelemployee;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TravelEmployee instance associated with the given id.")
    public TravelEmployee getTravelEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TravelEmployee with id: {}" , id);

        TravelEmployee foundTravelEmployee = travelEmployeeService.getById(id);
        LOGGER.debug("TravelEmployee details with id: {}" , foundTravelEmployee);

        return foundTravelEmployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TravelEmployee instance associated with the given id.")
    public TravelEmployee editTravelEmployee(@PathVariable("id") Integer id, @RequestBody TravelEmployee travelemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing TravelEmployee with id: {}" , travelemployee.getIdTravelEmployee());

        travelemployee.setIdTravelEmployee(id);
        travelemployee = travelEmployeeService.update(travelemployee);
        LOGGER.debug("TravelEmployee details with id: {}" , travelemployee);

        return travelemployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TravelEmployee instance associated with the given id.")
    public boolean deleteTravelEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TravelEmployee with id: {}" , id);

        TravelEmployee deletedTravelEmployee = travelEmployeeService.delete(id);

        return deletedTravelEmployee != null;
    }
    /**
     * @deprecated Use {@link #findTravelEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TravelEmployee instances matching the search criteria.")
	public Page<TravelEmployee> findTravelEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TravelEmployees list");
		return travelEmployeeService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TravelEmployee instances matching the search criteria.")
    public Page<TravelEmployee> findTravelEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TravelEmployees list");
    	return travelEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTravelEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return travelEmployeeService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TravelEmployee instances.")
	public Long countTravelEmployees(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TravelEmployees");
		return travelEmployeeService.count(query);
	}

    @RequestMapping(value="/{id:.+}/travelExpenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the travelExpenses instance associated with the given id.")
     public Page<TravelExpense>
        findAssociatedTravelExpenses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated travelExpenses");
        return travelExpenseService.findAssociatedValues(id, "TravelExpense", "idTravelEmployee", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelEmployeeService instance
	 */
	protected void setTravelEmployeeService(TravelEmployeeService service) {
		this.travelEmployeeService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelExpenseService instance
	 */
	protected void setTravelExpenseService(TravelExpenseService service) {
        this.travelExpenseService = service;
    }
}

