/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.PaymentLoanManual;
import com.testshared1.testdb_26may.service.PaymentLoanManualService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PaymentLoanManual.
 * @see PaymentLoanManual
 */
@RestController("TestDB_26may.PaymentLoanManualController")
@RequestMapping("/TestDB_26may/PaymentLoanManual")
@Api(description = "Exposes APIs to work with PaymentLoanManual resource.", value = "PaymentLoanManualController")
public class PaymentLoanManualController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentLoanManualController.class);

    @Autowired
    @Qualifier("TestDB_26may.PaymentLoanManualService")
    private PaymentLoanManualService paymentLoanManualService;

    /**
     * @deprecated Use {@link #findPaymentLoanManuals(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PaymentLoanManual instances matching the search criteria.")
    public Page<PaymentLoanManual> findPaymentLoanManuals(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PaymentLoanManuals list");
        return paymentLoanManualService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PaymentLoanManual instances matching the search criteria.")
    public Page<PaymentLoanManual> findPaymentLoanManuals(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PaymentLoanManuals list");
        return paymentLoanManualService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPaymentLoanManuals(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return paymentLoanManualService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentLoanManualService instance
	 */
    protected void setPaymentLoanManualService(PaymentLoanManualService service) {
        this.paymentLoanManualService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PaymentLoanManual instance.")
    public PaymentLoanManual createPaymentLoanManual(@RequestBody PaymentLoanManual paymentloanmanual) {
        LOGGER.debug("Create PaymentLoanManual with information: {}", paymentloanmanual);
        paymentloanmanual = paymentLoanManualService.create(paymentloanmanual);
        LOGGER.debug("Created PaymentLoanManual with information: {}", paymentloanmanual);
        return paymentloanmanual;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PaymentLoanManual instances.")
    public Long countPaymentLoanManuals(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PaymentLoanManuals");
        return paymentLoanManualService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PaymentLoanManual instance associated with the given id.")
    public PaymentLoanManual getPaymentLoanManual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PaymentLoanManual with id: {}", id);
        PaymentLoanManual foundPaymentLoanManual = paymentLoanManualService.getById(id);
        LOGGER.debug("PaymentLoanManual details with id: {}", foundPaymentLoanManual);
        return foundPaymentLoanManual;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PaymentLoanManual instance associated with the given id.")
    public PaymentLoanManual editPaymentLoanManual(@PathVariable(value = "id") Integer id, @RequestBody PaymentLoanManual paymentloanmanual) throws EntityNotFoundException {
        LOGGER.debug("Editing PaymentLoanManual with id: {}", paymentloanmanual.getIdPaymentLoanManual());
        paymentloanmanual.setIdPaymentLoanManual(id);
        paymentloanmanual = paymentLoanManualService.update(paymentloanmanual);
        LOGGER.debug("PaymentLoanManual details with id: {}", paymentloanmanual);
        return paymentloanmanual;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PaymentLoanManual instance associated with the given id.")
    public boolean deletePaymentLoanManual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PaymentLoanManual with id: {}", id);
        PaymentLoanManual deletedPaymentLoanManual = paymentLoanManualService.delete(id);
        return deletedPaymentLoanManual != null;
    }
}
