/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.Asset;
import com.testshared1.testdb_26may.AssetAssignDocument;
import com.testshared1.testdb_26may.AssetDischargeDocument;
import com.testshared1.testdb_26may.BadgeEmployee;
import com.testshared1.testdb_26may.CompensatoryDayCredit;
import com.testshared1.testdb_26may.CompensatoryDayDebit;
import com.testshared1.testdb_26may.Employee;
import com.testshared1.testdb_26may.EmployeeAssessment;
import com.testshared1.testdb_26may.EmployeeContract;
import com.testshared1.testdb_26may.EmployeeEducation;
import com.testshared1.testdb_26may.EmployeeFile;
import com.testshared1.testdb_26may.EmployeeFileLocation;
import com.testshared1.testdb_26may.EmployeeGeneralDetail;
import com.testshared1.testdb_26may.EmployeeLaborHistory;
import com.testshared1.testdb_26may.EmployeePersonalReference;
import com.testshared1.testdb_26may.EmployeePhotoFile;
import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.EmployeeTermination;
import com.testshared1.testdb_26may.EmployeeTraining;
import com.testshared1.testdb_26may.EmployeeWorkDay;
import com.testshared1.testdb_26may.EmployeeWorkProof;
import com.testshared1.testdb_26may.IncidenceEmployee;
import com.testshared1.testdb_26may.IsrDetail;
import com.testshared1.testdb_26may.JustifiedAbsense;
import com.testshared1.testdb_26may.ListCommissionEmployee;
import com.testshared1.testdb_26may.ListEmployeePhone;
import com.testshared1.testdb_26may.ListEmployeePosition;
import com.testshared1.testdb_26may.ListPeriodicBonusEmployee;
import com.testshared1.testdb_26may.ListPeriodicDeductionEmployee;
import com.testshared1.testdb_26may.Loan;
import com.testshared1.testdb_26may.OverTimeEmployee;
import com.testshared1.testdb_26may.PayrollDetail;
import com.testshared1.testdb_26may.ScheduleDynamic;
import com.testshared1.testdb_26may.TimeSheet;
import com.testshared1.testdb_26may.TravelEmployee;
import com.testshared1.testdb_26may.VacationDayCredit;
import com.testshared1.testdb_26may.VacationDayDebit;
import com.testshared1.testdb_26may.service.AssetAssignDocumentService;
import com.testshared1.testdb_26may.service.AssetDischargeDocumentService;
import com.testshared1.testdb_26may.service.AssetService;
import com.testshared1.testdb_26may.service.BadgeEmployeeService;
import com.testshared1.testdb_26may.service.CompensatoryDayCreditService;
import com.testshared1.testdb_26may.service.CompensatoryDayDebitService;
import com.testshared1.testdb_26may.service.EmployeeAssessmentService;
import com.testshared1.testdb_26may.service.EmployeeContractService;
import com.testshared1.testdb_26may.service.EmployeeEducationService;
import com.testshared1.testdb_26may.service.EmployeeFileLocationService;
import com.testshared1.testdb_26may.service.EmployeeFileService;
import com.testshared1.testdb_26may.service.EmployeeGeneralDetailService;
import com.testshared1.testdb_26may.service.EmployeeLaborHistoryService;
import com.testshared1.testdb_26may.service.EmployeePersonalReferenceService;
import com.testshared1.testdb_26may.service.EmployeePhotoFileService;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;
import com.testshared1.testdb_26may.service.EmployeeService;
import com.testshared1.testdb_26may.service.EmployeeTerminationService;
import com.testshared1.testdb_26may.service.EmployeeTrainingService;
import com.testshared1.testdb_26may.service.EmployeeWorkDayService;
import com.testshared1.testdb_26may.service.EmployeeWorkProofService;
import com.testshared1.testdb_26may.service.IncidenceEmployeeService;
import com.testshared1.testdb_26may.service.IsrDetailService;
import com.testshared1.testdb_26may.service.JustifiedAbsenseService;
import com.testshared1.testdb_26may.service.ListCommissionEmployeeService;
import com.testshared1.testdb_26may.service.ListEmployeePhoneService;
import com.testshared1.testdb_26may.service.ListEmployeePositionService;
import com.testshared1.testdb_26may.service.ListPeriodicBonusEmployeeService;
import com.testshared1.testdb_26may.service.ListPeriodicDeductionEmployeeService;
import com.testshared1.testdb_26may.service.LoanService;
import com.testshared1.testdb_26may.service.OverTimeEmployeeService;
import com.testshared1.testdb_26may.service.PayrollDetailService;
import com.testshared1.testdb_26may.service.ScheduleDynamicService;
import com.testshared1.testdb_26may.service.TimeSheetService;
import com.testshared1.testdb_26may.service.TravelEmployeeService;
import com.testshared1.testdb_26may.service.VacationDayCreditService;
import com.testshared1.testdb_26may.service.VacationDayDebitService;


/**
 * Controller object for domain model class Employee.
 * @see Employee
 */
@RestController("TestDB_26may.EmployeeController")
@Api(value = "/TestDB_26may/Employee", description = "Exposes APIs to work with Employee resource.")
@RequestMapping("/TestDB_26may/Employee")
public class EmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeController.class);

    @Autowired
	@Qualifier("TestDB_26may.EmployeeService")
	private EmployeeService employeeService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeFileLocationService")
	private EmployeeFileLocationService employeeFileLocationService;

    @Autowired
	@Qualifier("TestDB_26may.CompensatoryDayDebitService")
	private CompensatoryDayDebitService compensatoryDayDebitService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeEducationService")
	private EmployeeEducationService employeeEducationService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeTerminationService")
	private EmployeeTerminationService employeeTerminationService;

    @Autowired
	@Qualifier("TestDB_26may.JustifiedAbsenseService")
	private JustifiedAbsenseService justifiedAbsenseService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeLaborHistoryService")
	private EmployeeLaborHistoryService employeeLaborHistoryService;

    @Autowired
	@Qualifier("TestDB_26may.ListCommissionEmployeeService")
	private ListCommissionEmployeeService listCommissionEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.VacationDayCreditService")
	private VacationDayCreditService vacationDayCreditService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeSalaryService")
	private EmployeeSalaryService employeeSalaryService;

    @Autowired
	@Qualifier("TestDB_26may.ListEmployeePhoneService")
	private ListEmployeePhoneService listEmployeePhoneService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeWorkDayService")
	private EmployeeWorkDayService employeeWorkDayService;

    @Autowired
	@Qualifier("TestDB_26may.IsrDetailService")
	private IsrDetailService isrDetailService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeTrainingService")
	private EmployeeTrainingService employeeTrainingService;

    @Autowired
	@Qualifier("TestDB_26may.AssetService")
	private AssetService assetService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeFileService")
	private EmployeeFileService employeeFileService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeContractService")
	private EmployeeContractService employeeContractService;

    @Autowired
	@Qualifier("TestDB_26may.VacationDayDebitService")
	private VacationDayDebitService vacationDayDebitService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeWorkProofService")
	private EmployeeWorkProofService employeeWorkProofService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeePhotoFileService")
	private EmployeePhotoFileService employeePhotoFileService;

    @Autowired
	@Qualifier("TestDB_26may.IncidenceEmployeeService")
	private IncidenceEmployeeService incidenceEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicBonusEmployeeService")
	private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.TimeSheetService")
	private TimeSheetService timeSheetService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeePersonalReferenceService")
	private EmployeePersonalReferenceService employeePersonalReferenceService;

    @Autowired
	@Qualifier("TestDB_26may.TravelEmployeeService")
	private TravelEmployeeService travelEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.ListEmployeePositionService")
	private ListEmployeePositionService listEmployeePositionService;

    @Autowired
	@Qualifier("TestDB_26may.BadgeEmployeeService")
	private BadgeEmployeeService badgeEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.LoanService")
	private LoanService loanService;

    @Autowired
	@Qualifier("TestDB_26may.CompensatoryDayCreditService")
	private CompensatoryDayCreditService compensatoryDayCreditService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeAssessmentService")
	private EmployeeAssessmentService employeeAssessmentService;

    @Autowired
	@Qualifier("TestDB_26may.AssetDischargeDocumentService")
	private AssetDischargeDocumentService assetDischargeDocumentService;

    @Autowired
	@Qualifier("TestDB_26may.OverTimeEmployeeService")
	private OverTimeEmployeeService overTimeEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.ScheduleDynamicService")
	private ScheduleDynamicService scheduleDynamicService;

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicDeductionEmployeeService")
	private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.PayrollDetailService")
	private PayrollDetailService payrollDetailService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeGeneralDetailService")
	private EmployeeGeneralDetailService employeeGeneralDetailService;

    @Autowired
	@Qualifier("TestDB_26may.AssetAssignDocumentService")
	private AssetAssignDocumentService assetAssignDocumentService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Employee instance.")
	public Employee createEmployee(@RequestBody Employee employee) {
		LOGGER.debug("Create Employee with information: {}" , employee);

		employee = employeeService.create(employee);
		LOGGER.debug("Created Employee with information: {}" , employee);

	    return employee;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Employee instance associated with the given id.")
    public Employee getEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Employee with id: {}" , id);

        Employee foundEmployee = employeeService.getById(id);
        LOGGER.debug("Employee details with id: {}" , foundEmployee);

        return foundEmployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Employee instance associated with the given id.")
    public Employee editEmployee(@PathVariable("id") Integer id, @RequestBody Employee employee) throws EntityNotFoundException {
        LOGGER.debug("Editing Employee with id: {}" , employee.getIdEmployee());

        employee.setIdEmployee(id);
        employee = employeeService.update(employee);
        LOGGER.debug("Employee details with id: {}" , employee);

        return employee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Employee instance associated with the given id.")
    public boolean deleteEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employee with id: {}" , id);

        Employee deletedEmployee = employeeService.delete(id);

        return deletedEmployee != null;
    }
    /**
     * @deprecated Use {@link #findEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Employee instances matching the search criteria.")
	public Page<Employee> findEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Employees list");
		return employeeService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Employee instances matching the search criteria.")
    public Page<Employee> findEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employees list");
    	return employeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Employee instances.")
	public Long countEmployees(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Employees");
		return employeeService.count(query);
	}

    @RequestMapping(value="/{id:.+}/assets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assets instance associated with the given id.")
     public Page<Asset>
        findAssociatedAssets(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assets");
        return assetService.findAssociatedValues(id, "Asset", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeEducations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeEducations instance associated with the given id.")
     public Page<EmployeeEducation>
        findAssociatedEmployeeEducations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeEducations");
        return employeeEducationService.findAssociatedValues(id, "EmployeeEducation", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/assetAssignDocuments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assetAssignDocuments instance associated with the given id.")
     public Page<AssetAssignDocument>
        findAssociatedAssetAssignDocuments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assetAssignDocuments");
        return assetAssignDocumentService.findAssociatedValues(id, "AssetAssignDocument", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/isrDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the isrDetails instance associated with the given id.")
     public Page<IsrDetail>
        findAssociatedIsrDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated isrDetails");
        return isrDetailService.findAssociatedValues(id, "IsrDetail", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeContracts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeContracts instance associated with the given id.")
     public Page<EmployeeContract>
        findAssociatedEmployeeContracts(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeContracts");
        return employeeContractService.findAssociatedValues(id, "EmployeeContract", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/timeSheets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the timeSheets instance associated with the given id.")
     public Page<TimeSheet>
        findAssociatedTimeSheets(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated timeSheets");
        return timeSheetService.findAssociatedValues(id, "TimeSheet", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeLaborHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeLaborHistories instance associated with the given id.")
     public Page<EmployeeLaborHistory>
        findAssociatedEmployeeLaborHistories(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeLaborHistories");
        return employeeLaborHistoryService.findAssociatedValues(id, "EmployeeLaborHistory", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeFiles instance associated with the given id.")
     public Page<EmployeeFile>
        findAssociatedEmployeeFiles(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeFiles");
        return employeeFileService.findAssociatedValues(id, "EmployeeFile", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicBonusEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusEmployees instance associated with the given id.")
     public Page<ListPeriodicBonusEmployee>
        findAssociatedListPeriodicBonusEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listPeriodicBonusEmployees");
        return listPeriodicBonusEmployeeService.findAssociatedValues(id, "ListPeriodicBonusEmployee", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/loans", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the loans instance associated with the given id.")
     public Page<Loan>
        findAssociatedLoans(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated loans");
        return loanService.findAssociatedValues(id, "Loan", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeWorkProofs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeWorkProofs instance associated with the given id.")
     public Page<EmployeeWorkProof>
        findAssociatedEmployeeWorkProofs(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeWorkProofs");
        return employeeWorkProofService.findAssociatedValues(id, "EmployeeWorkProof", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeWorkDays", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeWorkDays instance associated with the given id.")
     public Page<EmployeeWorkDay>
        findAssociatedEmployeeWorkDays(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeWorkDays");
        return employeeWorkDayService.findAssociatedValues(id, "EmployeeWorkDay", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeTerminations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeTerminations instance associated with the given id.")
     public Page<EmployeeTermination>
        findAssociatedEmployeeTerminations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeTerminations");
        return employeeTerminationService.findAssociatedValues(id, "EmployeeTermination", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeFileLocations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeFileLocations instance associated with the given id.")
     public Page<EmployeeFileLocation>
        findAssociatedEmployeeFileLocations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeFileLocations");
        return employeeFileLocationService.findAssociatedValues(id, "EmployeeFileLocation", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/vacationDayCredits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the vacationDayCredits instance associated with the given id.")
     public Page<VacationDayCredit>
        findAssociatedVacationDayCredits(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated vacationDayCredits");
        return vacationDayCreditService.findAssociatedValues(id, "VacationDayCredit", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary>
        findAssociatedEmployeeSalaries(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id, "EmployeeSalary", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeGeneralDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeGeneralDetails instance associated with the given id.")
     public Page<EmployeeGeneralDetail>
        findAssociatedEmployeeGeneralDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeGeneralDetails");
        return employeeGeneralDetailService.findAssociatedValues(id, "EmployeeGeneralDetail", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/incidenceEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the incidenceEmployees instance associated with the given id.")
     public Page<IncidenceEmployee>
        findAssociatedIncidenceEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated incidenceEmployees");
        return incidenceEmployeeService.findAssociatedValues(id, "IncidenceEmployee", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/vacationDayDebits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the vacationDayDebits instance associated with the given id.")
     public Page<VacationDayDebit>
        findAssociatedVacationDayDebits(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated vacationDayDebits");
        return vacationDayDebitService.findAssociatedValues(id, "VacationDayDebit", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/compensatoryDayCredits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compensatoryDayCredits instance associated with the given id.")
     public Page<CompensatoryDayCredit>
        findAssociatedCompensatoryDayCredits(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated compensatoryDayCredits");
        return compensatoryDayCreditService.findAssociatedValues(id, "CompensatoryDayCredit", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listEmployeePositions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listEmployeePositions instance associated with the given id.")
     public Page<ListEmployeePosition>
        findAssociatedListEmployeePositions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listEmployeePositions");
        return listEmployeePositionService.findAssociatedValues(id, "ListEmployeePosition", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/travelEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the travelEmployees instance associated with the given id.")
     public Page<TravelEmployee>
        findAssociatedTravelEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated travelEmployees");
        return travelEmployeeService.findAssociatedValues(id, "TravelEmployee", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeAssessmentsForFkEvaluatedEmployee", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeAssessmentsForFkEvaluatedEmployee instance associated with the given id.")
     public Page<EmployeeAssessment>
        findAssociatedEmployeeAssessmentsForFkEvaluatedEmployee(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeAssessmentsForFkEvaluatedEmployee");
        return employeeAssessmentService.findAssociatedValues(id, "EmployeeAssessment", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeAssessmentsForFkEvaluatingEmployee", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeAssessmentsForFkEvaluatingEmployee instance associated with the given id.")
     public Page<EmployeeAssessment>
        findAssociatedEmployeeAssessmentsForFkEvaluatingEmployee(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeAssessmentsForFkEvaluatingEmployee");
        return employeeAssessmentService.findAssociatedValues(id, "EmployeeAssessment", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicDeductionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionEmployees instance associated with the given id.")
     public Page<ListPeriodicDeductionEmployee>
        findAssociatedListPeriodicDeductionEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listPeriodicDeductionEmployees");
        return listPeriodicDeductionEmployeeService.findAssociatedValues(id, "ListPeriodicDeductionEmployee", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/justifiedAbsenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedAbsenses instance associated with the given id.")
     public Page<JustifiedAbsense>
        findAssociatedJustifiedAbsenses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated justifiedAbsenses");
        return justifiedAbsenseService.findAssociatedValues(id, "JustifiedAbsense", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeTrainings", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeTrainings instance associated with the given id.")
     public Page<EmployeeTraining>
        findAssociatedEmployeeTrainings(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeTrainings");
        return employeeTrainingService.findAssociatedValues(id, "EmployeeTraining", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeePersonalReferences", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeePersonalReferences instance associated with the given id.")
     public Page<EmployeePersonalReference>
        findAssociatedEmployeePersonalReferences(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeePersonalReferences");
        return employeePersonalReferenceService.findAssociatedValues(id, "EmployeePersonalReference", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/scheduleDynamics", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the scheduleDynamics instance associated with the given id.")
     public Page<ScheduleDynamic>
        findAssociatedScheduleDynamics(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated scheduleDynamics");
        return scheduleDynamicService.findAssociatedValues(id, "ScheduleDynamic", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/assetDischargeDocuments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assetDischargeDocuments instance associated with the given id.")
     public Page<AssetDischargeDocument>
        findAssociatedAssetDischargeDocuments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assetDischargeDocuments");
        return assetDischargeDocumentService.findAssociatedValues(id, "AssetDischargeDocument", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/badgeEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the badgeEmployees instance associated with the given id.")
     public Page<BadgeEmployee>
        findAssociatedBadgeEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated badgeEmployees");
        return badgeEmployeeService.findAssociatedValues(id, "BadgeEmployee", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/overTimeEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeEmployees instance associated with the given id.")
     public Page<OverTimeEmployee>
        findAssociatedOverTimeEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated overTimeEmployees");
        return overTimeEmployeeService.findAssociatedValues(id, "OverTimeEmployee", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail>
        findAssociatedPayrollDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id, "PayrollDetail", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listEmployeePhones", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listEmployeePhones instance associated with the given id.")
     public Page<ListEmployeePhone>
        findAssociatedListEmployeePhones(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listEmployeePhones");
        return listEmployeePhoneService.findAssociatedValues(id, "ListEmployeePhone", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeePhotoFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeePhotoFiles instance associated with the given id.")
     public Page<EmployeePhotoFile>
        findAssociatedEmployeePhotoFiles(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeePhotoFiles");
        return employeePhotoFileService.findAssociatedValues(id, "EmployeePhotoFile", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/compensatoryDayDebits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compensatoryDayDebits instance associated with the given id.")
     public Page<CompensatoryDayDebit>
        findAssociatedCompensatoryDayDebits(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated compensatoryDayDebits");
        return compensatoryDayDebitService.findAssociatedValues(id, "CompensatoryDayDebit", "idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCommissionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCommissionEmployees instance associated with the given id.")
     public Page<ListCommissionEmployee>
        findAssociatedListCommissionEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listCommissionEmployees");
        return listCommissionEmployeeService.findAssociatedValues(id, "ListCommissionEmployee", "idEmployee", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeService instance
	 */
	protected void setEmployeeService(EmployeeService service) {
		this.employeeService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeFileLocationService instance
	 */
	protected void setEmployeeFileLocationService(EmployeeFileLocationService service) {
        this.employeeFileLocationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompensatoryDayDebitService instance
	 */
	protected void setCompensatoryDayDebitService(CompensatoryDayDebitService service) {
        this.compensatoryDayDebitService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeEducationService instance
	 */
	protected void setEmployeeEducationService(EmployeeEducationService service) {
        this.employeeEducationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeTerminationService instance
	 */
	protected void setEmployeeTerminationService(EmployeeTerminationService service) {
        this.employeeTerminationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JustifiedAbsenseService instance
	 */
	protected void setJustifiedAbsenseService(JustifiedAbsenseService service) {
        this.justifiedAbsenseService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeLaborHistoryService instance
	 */
	protected void setEmployeeLaborHistoryService(EmployeeLaborHistoryService service) {
        this.employeeLaborHistoryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCommissionEmployeeService instance
	 */
	protected void setListCommissionEmployeeService(ListCommissionEmployeeService service) {
        this.listCommissionEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VacationDayCreditService instance
	 */
	protected void setVacationDayCreditService(VacationDayCreditService service) {
        this.vacationDayCreditService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
	protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListEmployeePhoneService instance
	 */
	protected void setListEmployeePhoneService(ListEmployeePhoneService service) {
        this.listEmployeePhoneService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeWorkDayService instance
	 */
	protected void setEmployeeWorkDayService(EmployeeWorkDayService service) {
        this.employeeWorkDayService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IsrDetailService instance
	 */
	protected void setIsrDetailService(IsrDetailService service) {
        this.isrDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeTrainingService instance
	 */
	protected void setEmployeeTrainingService(EmployeeTrainingService service) {
        this.employeeTrainingService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetService instance
	 */
	protected void setAssetService(AssetService service) {
        this.assetService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeFileService instance
	 */
	protected void setEmployeeFileService(EmployeeFileService service) {
        this.employeeFileService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeContractService instance
	 */
	protected void setEmployeeContractService(EmployeeContractService service) {
        this.employeeContractService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VacationDayDebitService instance
	 */
	protected void setVacationDayDebitService(VacationDayDebitService service) {
        this.vacationDayDebitService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeWorkProofService instance
	 */
	protected void setEmployeeWorkProofService(EmployeeWorkProofService service) {
        this.employeeWorkProofService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeePhotoFileService instance
	 */
	protected void setEmployeePhotoFileService(EmployeePhotoFileService service) {
        this.employeePhotoFileService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IncidenceEmployeeService instance
	 */
	protected void setIncidenceEmployeeService(IncidenceEmployeeService service) {
        this.incidenceEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicBonusEmployeeService instance
	 */
	protected void setListPeriodicBonusEmployeeService(ListPeriodicBonusEmployeeService service) {
        this.listPeriodicBonusEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TimeSheetService instance
	 */
	protected void setTimeSheetService(TimeSheetService service) {
        this.timeSheetService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeePersonalReferenceService instance
	 */
	protected void setEmployeePersonalReferenceService(EmployeePersonalReferenceService service) {
        this.employeePersonalReferenceService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelEmployeeService instance
	 */
	protected void setTravelEmployeeService(TravelEmployeeService service) {
        this.travelEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListEmployeePositionService instance
	 */
	protected void setListEmployeePositionService(ListEmployeePositionService service) {
        this.listEmployeePositionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BadgeEmployeeService instance
	 */
	protected void setBadgeEmployeeService(BadgeEmployeeService service) {
        this.badgeEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoanService instance
	 */
	protected void setLoanService(LoanService service) {
        this.loanService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompensatoryDayCreditService instance
	 */
	protected void setCompensatoryDayCreditService(CompensatoryDayCreditService service) {
        this.compensatoryDayCreditService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeAssessmentService instance
	 */
	protected void setEmployeeAssessmentService(EmployeeAssessmentService service) {
        this.employeeAssessmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetDischargeDocumentService instance
	 */
	protected void setAssetDischargeDocumentService(AssetDischargeDocumentService service) {
        this.assetDischargeDocumentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OverTimeEmployeeService instance
	 */
	protected void setOverTimeEmployeeService(OverTimeEmployeeService service) {
        this.overTimeEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ScheduleDynamicService instance
	 */
	protected void setScheduleDynamicService(ScheduleDynamicService service) {
        this.scheduleDynamicService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicDeductionEmployeeService instance
	 */
	protected void setListPeriodicDeductionEmployeeService(ListPeriodicDeductionEmployeeService service) {
        this.listPeriodicDeductionEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PayrollDetailService instance
	 */
	protected void setPayrollDetailService(PayrollDetailService service) {
        this.payrollDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeGeneralDetailService instance
	 */
	protected void setEmployeeGeneralDetailService(EmployeeGeneralDetailService service) {
        this.employeeGeneralDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetAssignDocumentService instance
	 */
	protected void setAssetAssignDocumentService(AssetAssignDocumentService service) {
        this.assetAssignDocumentService = service;
    }
}

