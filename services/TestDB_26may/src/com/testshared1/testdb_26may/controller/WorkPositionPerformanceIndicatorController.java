/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.AssessmentField;
import com.testshared1.testdb_26may.WorkPositionPerformanceIndicator;
import com.testshared1.testdb_26may.service.AssessmentFieldService;
import com.testshared1.testdb_26may.service.WorkPositionPerformanceIndicatorService;


/**
 * Controller object for domain model class WorkPositionPerformanceIndicator.
 * @see WorkPositionPerformanceIndicator
 */
@RestController("TestDB_26may.WorkPositionPerformanceIndicatorController")
@Api(value = "/TestDB_26may/WorkPositionPerformanceIndicator", description = "Exposes APIs to work with WorkPositionPerformanceIndicator resource.")
@RequestMapping("/TestDB_26may/WorkPositionPerformanceIndicator")
public class WorkPositionPerformanceIndicatorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionPerformanceIndicatorController.class);

    @Autowired
	@Qualifier("TestDB_26may.WorkPositionPerformanceIndicatorService")
	private WorkPositionPerformanceIndicatorService workPositionPerformanceIndicatorService;

    @Autowired
	@Qualifier("TestDB_26may.AssessmentFieldService")
	private AssessmentFieldService assessmentFieldService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new WorkPositionPerformanceIndicator instance.")
	public WorkPositionPerformanceIndicator createWorkPositionPerformanceIndicator(@RequestBody WorkPositionPerformanceIndicator workpositionperformanceindicator) {
		LOGGER.debug("Create WorkPositionPerformanceIndicator with information: {}" , workpositionperformanceindicator);

		workpositionperformanceindicator = workPositionPerformanceIndicatorService.create(workpositionperformanceindicator);
		LOGGER.debug("Created WorkPositionPerformanceIndicator with information: {}" , workpositionperformanceindicator);

	    return workpositionperformanceindicator;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the WorkPositionPerformanceIndicator instance associated with the given id.")
    public WorkPositionPerformanceIndicator getWorkPositionPerformanceIndicator(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting WorkPositionPerformanceIndicator with id: {}" , id);

        WorkPositionPerformanceIndicator foundWorkPositionPerformanceIndicator = workPositionPerformanceIndicatorService.getById(id);
        LOGGER.debug("WorkPositionPerformanceIndicator details with id: {}" , foundWorkPositionPerformanceIndicator);

        return foundWorkPositionPerformanceIndicator;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the WorkPositionPerformanceIndicator instance associated with the given id.")
    public WorkPositionPerformanceIndicator editWorkPositionPerformanceIndicator(@PathVariable("id") Integer id, @RequestBody WorkPositionPerformanceIndicator workpositionperformanceindicator) throws EntityNotFoundException {
        LOGGER.debug("Editing WorkPositionPerformanceIndicator with id: {}" , workpositionperformanceindicator.getIdWorkPositionPerformanceIndicator());

        workpositionperformanceindicator.setIdWorkPositionPerformanceIndicator(id);
        workpositionperformanceindicator = workPositionPerformanceIndicatorService.update(workpositionperformanceindicator);
        LOGGER.debug("WorkPositionPerformanceIndicator details with id: {}" , workpositionperformanceindicator);

        return workpositionperformanceindicator;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the WorkPositionPerformanceIndicator instance associated with the given id.")
    public boolean deleteWorkPositionPerformanceIndicator(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPositionPerformanceIndicator with id: {}" , id);

        WorkPositionPerformanceIndicator deletedWorkPositionPerformanceIndicator = workPositionPerformanceIndicatorService.delete(id);

        return deletedWorkPositionPerformanceIndicator != null;
    }
    /**
     * @deprecated Use {@link #findWorkPositionPerformanceIndicators(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of WorkPositionPerformanceIndicator instances matching the search criteria.")
	public Page<WorkPositionPerformanceIndicator> findWorkPositionPerformanceIndicators( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering WorkPositionPerformanceIndicators list");
		return workPositionPerformanceIndicatorService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of WorkPositionPerformanceIndicator instances matching the search criteria.")
    public Page<WorkPositionPerformanceIndicator> findWorkPositionPerformanceIndicators(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WorkPositionPerformanceIndicators list");
    	return workPositionPerformanceIndicatorService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportWorkPositionPerformanceIndicators(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return workPositionPerformanceIndicatorService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of WorkPositionPerformanceIndicator instances.")
	public Long countWorkPositionPerformanceIndicators(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting WorkPositionPerformanceIndicators");
		return workPositionPerformanceIndicatorService.count(query);
	}

    @RequestMapping(value="/{id:.+}/assessmentFields", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assessmentFields instance associated with the given id.")
     public Page<AssessmentField>
        findAssociatedAssessmentFields(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessmentFields");
        return assessmentFieldService.findAssociatedValues(id, "AssessmentField", "idWorkPositionPerformanceIndicator", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionPerformanceIndicatorService instance
	 */
	protected void setWorkPositionPerformanceIndicatorService(WorkPositionPerformanceIndicatorService service) {
		this.workPositionPerformanceIndicatorService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentFieldService instance
	 */
	protected void setAssessmentFieldService(AssessmentFieldService service) {
        this.assessmentFieldService = service;
    }
}

