/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.RateOvertimeHour;
import com.testshared1.testdb_26may.service.RateOvertimeHourService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class RateOvertimeHour.
 * @see RateOvertimeHour
 */
@RestController("TestDB_26may.RateOvertimeHourController")
@RequestMapping("/TestDB_26may/RateOvertimeHour")
@Api(description = "Exposes APIs to work with RateOvertimeHour resource.", value = "RateOvertimeHourController")
public class RateOvertimeHourController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RateOvertimeHourController.class);

    @Autowired
    @Qualifier("TestDB_26may.RateOvertimeHourService")
    private RateOvertimeHourService rateOvertimeHourService;

    /**
     * @deprecated Use {@link #findRateOvertimeHours(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of RateOvertimeHour instances matching the search criteria.")
    public Page<RateOvertimeHour> findRateOvertimeHours(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RateOvertimeHours list");
        return rateOvertimeHourService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of RateOvertimeHour instances matching the search criteria.")
    public Page<RateOvertimeHour> findRateOvertimeHours(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RateOvertimeHours list");
        return rateOvertimeHourService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportRateOvertimeHours(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return rateOvertimeHourService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RateOvertimeHourService instance
	 */
    protected void setRateOvertimeHourService(RateOvertimeHourService service) {
        this.rateOvertimeHourService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new RateOvertimeHour instance.")
    public RateOvertimeHour createRateOvertimeHour(@RequestBody RateOvertimeHour rateovertimehour) {
        LOGGER.debug("Create RateOvertimeHour with information: {}", rateovertimehour);
        rateovertimehour = rateOvertimeHourService.create(rateovertimehour);
        LOGGER.debug("Created RateOvertimeHour with information: {}", rateovertimehour);
        return rateovertimehour;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of RateOvertimeHour instances.")
    public Long countRateOvertimeHours(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting RateOvertimeHours");
        return rateOvertimeHourService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the RateOvertimeHour instance associated with the given id.")
    public RateOvertimeHour getRateOvertimeHour(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RateOvertimeHour with id: {}", id);
        RateOvertimeHour foundRateOvertimeHour = rateOvertimeHourService.getById(id);
        LOGGER.debug("RateOvertimeHour details with id: {}", foundRateOvertimeHour);
        return foundRateOvertimeHour;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the RateOvertimeHour instance associated with the given id.")
    public RateOvertimeHour editRateOvertimeHour(@PathVariable(value = "id") Integer id, @RequestBody RateOvertimeHour rateovertimehour) throws EntityNotFoundException {
        LOGGER.debug("Editing RateOvertimeHour with id: {}", rateovertimehour.getIdTypeGenerationForm());
        rateovertimehour.setIdTypeGenerationForm(id);
        rateovertimehour = rateOvertimeHourService.update(rateovertimehour);
        LOGGER.debug("RateOvertimeHour details with id: {}", rateovertimehour);
        return rateovertimehour;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the RateOvertimeHour instance associated with the given id.")
    public boolean deleteRateOvertimeHour(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RateOvertimeHour with id: {}", id);
        RateOvertimeHour deletedRateOvertimeHour = rateOvertimeHourService.delete(id);
        return deletedRateOvertimeHour != null;
    }
}
