/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.AssessmentEmployeeData;
import com.testshared1.testdb_26may.service.AssessmentEmployeeDataService;


/**
 * Controller object for domain model class AssessmentEmployeeData.
 * @see AssessmentEmployeeData
 */
@RestController("TestDB_26may.AssessmentEmployeeDataController")
@Api(value = "/TestDB_26may/AssessmentEmployeeData", description = "Exposes APIs to work with AssessmentEmployeeData resource.")
@RequestMapping("/TestDB_26may/AssessmentEmployeeData")
public class AssessmentEmployeeDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentEmployeeDataController.class);

    @Autowired
	@Qualifier("TestDB_26may.AssessmentEmployeeDataService")
	private AssessmentEmployeeDataService assessmentEmployeeDataService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssessmentEmployeeData instance.")
	public AssessmentEmployeeData createAssessmentEmployeeData(@RequestBody AssessmentEmployeeData assessmentemployeedata) {
		LOGGER.debug("Create AssessmentEmployeeData with information: {}" , assessmentemployeedata);

		assessmentemployeedata = assessmentEmployeeDataService.create(assessmentemployeedata);
		LOGGER.debug("Created AssessmentEmployeeData with information: {}" , assessmentemployeedata);

	    return assessmentemployeedata;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssessmentEmployeeData instance associated with the given id.")
    public AssessmentEmployeeData getAssessmentEmployeeData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssessmentEmployeeData with id: {}" , id);

        AssessmentEmployeeData foundAssessmentEmployeeData = assessmentEmployeeDataService.getById(id);
        LOGGER.debug("AssessmentEmployeeData details with id: {}" , foundAssessmentEmployeeData);

        return foundAssessmentEmployeeData;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssessmentEmployeeData instance associated with the given id.")
    public AssessmentEmployeeData editAssessmentEmployeeData(@PathVariable("id") Integer id, @RequestBody AssessmentEmployeeData assessmentemployeedata) throws EntityNotFoundException {
        LOGGER.debug("Editing AssessmentEmployeeData with id: {}" , assessmentemployeedata.getIdAssessmentEmployeeData());

        assessmentemployeedata.setIdAssessmentEmployeeData(id);
        assessmentemployeedata = assessmentEmployeeDataService.update(assessmentemployeedata);
        LOGGER.debug("AssessmentEmployeeData details with id: {}" , assessmentemployeedata);

        return assessmentemployeedata;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssessmentEmployeeData instance associated with the given id.")
    public boolean deleteAssessmentEmployeeData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssessmentEmployeeData with id: {}" , id);

        AssessmentEmployeeData deletedAssessmentEmployeeData = assessmentEmployeeDataService.delete(id);

        return deletedAssessmentEmployeeData != null;
    }
    /**
     * @deprecated Use {@link #findAssessmentEmployeeDatas(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssessmentEmployeeData instances matching the search criteria.")
	public Page<AssessmentEmployeeData> findAssessmentEmployeeDatas( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssessmentEmployeeDatas list");
		return assessmentEmployeeDataService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssessmentEmployeeData instances matching the search criteria.")
    public Page<AssessmentEmployeeData> findAssessmentEmployeeDatas(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssessmentEmployeeDatas list");
    	return assessmentEmployeeDataService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssessmentEmployeeDatas(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return assessmentEmployeeDataService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssessmentEmployeeData instances.")
	public Long countAssessmentEmployeeDatas(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AssessmentEmployeeDatas");
		return assessmentEmployeeDataService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentEmployeeDataService instance
	 */
	protected void setAssessmentEmployeeDataService(AssessmentEmployeeDataService service) {
		this.assessmentEmployeeDataService = service;
	}

}

