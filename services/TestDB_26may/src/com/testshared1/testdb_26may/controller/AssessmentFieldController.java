/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.AssessmentEmployeeData;
import com.testshared1.testdb_26may.AssessmentField;
import com.testshared1.testdb_26may.service.AssessmentEmployeeDataService;
import com.testshared1.testdb_26may.service.AssessmentFieldService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AssessmentField.
 * @see AssessmentField
 */
@RestController("TestDB_26may.AssessmentFieldController")
@RequestMapping("/TestDB_26may/AssessmentField")
@Api(description = "Exposes APIs to work with AssessmentField resource.", value = "AssessmentFieldController")
public class AssessmentFieldController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentFieldController.class);

    @Autowired
    @Qualifier("TestDB_26may.AssessmentFieldService")
    private AssessmentFieldService assessmentFieldService;

    @Autowired
    @Qualifier("TestDB_26may.AssessmentEmployeeDataService")
    private AssessmentEmployeeDataService assessmentEmployeeDataService;

    /**
     * @deprecated Use {@link #findAssessmentFields(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AssessmentField instances matching the search criteria.")
    public Page<AssessmentField> findAssessmentFields(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AssessmentFields list");
        return assessmentFieldService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssessmentField instances matching the search criteria.")
    public Page<AssessmentField> findAssessmentFields(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssessmentFields list");
        return assessmentFieldService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssessmentFields(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return assessmentFieldService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/assessmentEmployeeDatas", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the assessmentEmployeeDatas instance associated with the given id.")
    public Page<AssessmentEmployeeData> findAssociatedAssessmentEmployeeDatas(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessmentEmployeeDatas");
        return assessmentEmployeeDataService.findAssociatedValues(id, "AssessmentEmployeeData", "idAssessmentField", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentFieldService instance
	 */
    protected void setAssessmentFieldService(AssessmentFieldService service) {
        this.assessmentFieldService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentEmployeeDataService instance
	 */
    protected void setAssessmentEmployeeDataService(AssessmentEmployeeDataService service) {
        this.assessmentEmployeeDataService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AssessmentField instance.")
    public AssessmentField createAssessmentField(@RequestBody AssessmentField assessmentfield) {
        LOGGER.debug("Create AssessmentField with information: {}", assessmentfield);
        assessmentfield = assessmentFieldService.create(assessmentfield);
        LOGGER.debug("Created AssessmentField with information: {}", assessmentfield);
        return assessmentfield;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AssessmentField instances.")
    public Long countAssessmentFields(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AssessmentFields");
        return assessmentFieldService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AssessmentField instance associated with the given id.")
    public AssessmentField getAssessmentField(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssessmentField with id: {}", id);
        AssessmentField foundAssessmentField = assessmentFieldService.getById(id);
        LOGGER.debug("AssessmentField details with id: {}", foundAssessmentField);
        return foundAssessmentField;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AssessmentField instance associated with the given id.")
    public AssessmentField editAssessmentField(@PathVariable(value = "id") Integer id, @RequestBody AssessmentField assessmentfield) throws EntityNotFoundException {
        LOGGER.debug("Editing AssessmentField with id: {}", assessmentfield.getIdAssessmentField());
        assessmentfield.setIdAssessmentField(id);
        assessmentfield = assessmentFieldService.update(assessmentfield);
        LOGGER.debug("AssessmentField details with id: {}", assessmentfield);
        return assessmentfield;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AssessmentField instance associated with the given id.")
    public boolean deleteAssessmentField(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssessmentField with id: {}", id);
        AssessmentField deletedAssessmentField = assessmentFieldService.delete(id);
        return deletedAssessmentField != null;
    }
}
