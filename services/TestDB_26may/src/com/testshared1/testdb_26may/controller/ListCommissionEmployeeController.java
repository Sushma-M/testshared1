/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListCommissionEmployee;
import com.testshared1.testdb_26may.service.ListCommissionEmployeeService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ListCommissionEmployee.
 * @see ListCommissionEmployee
 */
@RestController("TestDB_26may.ListCommissionEmployeeController")
@RequestMapping("/TestDB_26may/ListCommissionEmployee")
@Api(description = "Exposes APIs to work with ListCommissionEmployee resource.", value = "ListCommissionEmployeeController")
public class ListCommissionEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCommissionEmployeeController.class);

    @Autowired
    @Qualifier("TestDB_26may.ListCommissionEmployeeService")
    private ListCommissionEmployeeService listCommissionEmployeeService;

    /**
     * @deprecated Use {@link #findListCommissionEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ListCommissionEmployee instances matching the search criteria.")
    public Page<ListCommissionEmployee> findListCommissionEmployees(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListCommissionEmployees list");
        return listCommissionEmployeeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListCommissionEmployee instances matching the search criteria.")
    public Page<ListCommissionEmployee> findListCommissionEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListCommissionEmployees list");
        return listCommissionEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListCommissionEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return listCommissionEmployeeService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCommissionEmployeeService instance
	 */
    protected void setListCommissionEmployeeService(ListCommissionEmployeeService service) {
        this.listCommissionEmployeeService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ListCommissionEmployee instance.")
    public ListCommissionEmployee createListCommissionEmployee(@RequestBody ListCommissionEmployee listcommissionemployee) {
        LOGGER.debug("Create ListCommissionEmployee with information: {}", listcommissionemployee);
        listcommissionemployee = listCommissionEmployeeService.create(listcommissionemployee);
        LOGGER.debug("Created ListCommissionEmployee with information: {}", listcommissionemployee);
        return listcommissionemployee;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ListCommissionEmployee instances.")
    public Long countListCommissionEmployees(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ListCommissionEmployees");
        return listCommissionEmployeeService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ListCommissionEmployee instance associated with the given id.")
    public ListCommissionEmployee getListCommissionEmployee(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListCommissionEmployee with id: {}", id);
        ListCommissionEmployee foundListCommissionEmployee = listCommissionEmployeeService.getById(id);
        LOGGER.debug("ListCommissionEmployee details with id: {}", foundListCommissionEmployee);
        return foundListCommissionEmployee;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ListCommissionEmployee instance associated with the given id.")
    public ListCommissionEmployee editListCommissionEmployee(@PathVariable(value = "id") Integer id, @RequestBody ListCommissionEmployee listcommissionemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing ListCommissionEmployee with id: {}", listcommissionemployee.getIdListCommissionEmployee());
        listcommissionemployee.setIdListCommissionEmployee(id);
        listcommissionemployee = listCommissionEmployeeService.update(listcommissionemployee);
        LOGGER.debug("ListCommissionEmployee details with id: {}", listcommissionemployee);
        return listcommissionemployee;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ListCommissionEmployee instance associated with the given id.")
    public boolean deleteListCommissionEmployee(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCommissionEmployee with id: {}", id);
        ListCommissionEmployee deletedListCommissionEmployee = listCommissionEmployeeService.delete(id);
        return deletedListCommissionEmployee != null;
    }
}
