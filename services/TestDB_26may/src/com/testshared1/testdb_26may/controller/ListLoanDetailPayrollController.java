/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ListLoanDetailPayroll;
import com.testshared1.testdb_26may.service.ListLoanDetailPayrollService;


/**
 * Controller object for domain model class ListLoanDetailPayroll.
 * @see ListLoanDetailPayroll
 */
@RestController("TestDB_26may.ListLoanDetailPayrollController")
@Api(value = "/TestDB_26may/ListLoanDetailPayroll", description = "Exposes APIs to work with ListLoanDetailPayroll resource.")
@RequestMapping("/TestDB_26may/ListLoanDetailPayroll")
public class ListLoanDetailPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListLoanDetailPayrollController.class);

    @Autowired
	@Qualifier("TestDB_26may.ListLoanDetailPayrollService")
	private ListLoanDetailPayrollService listLoanDetailPayrollService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListLoanDetailPayroll instance.")
	public ListLoanDetailPayroll createListLoanDetailPayroll(@RequestBody ListLoanDetailPayroll listloandetailpayroll) {
		LOGGER.debug("Create ListLoanDetailPayroll with information: {}" , listloandetailpayroll);

		listloandetailpayroll = listLoanDetailPayrollService.create(listloandetailpayroll);
		LOGGER.debug("Created ListLoanDetailPayroll with information: {}" , listloandetailpayroll);

	    return listloandetailpayroll;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListLoanDetailPayroll instance associated with the given id.")
    public ListLoanDetailPayroll getListLoanDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListLoanDetailPayroll with id: {}" , id);

        ListLoanDetailPayroll foundListLoanDetailPayroll = listLoanDetailPayrollService.getById(id);
        LOGGER.debug("ListLoanDetailPayroll details with id: {}" , foundListLoanDetailPayroll);

        return foundListLoanDetailPayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListLoanDetailPayroll instance associated with the given id.")
    public ListLoanDetailPayroll editListLoanDetailPayroll(@PathVariable("id") Integer id, @RequestBody ListLoanDetailPayroll listloandetailpayroll) throws EntityNotFoundException {
        LOGGER.debug("Editing ListLoanDetailPayroll with id: {}" , listloandetailpayroll.getIdListLoanDetailPayroll());

        listloandetailpayroll.setIdListLoanDetailPayroll(id);
        listloandetailpayroll = listLoanDetailPayrollService.update(listloandetailpayroll);
        LOGGER.debug("ListLoanDetailPayroll details with id: {}" , listloandetailpayroll);

        return listloandetailpayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListLoanDetailPayroll instance associated with the given id.")
    public boolean deleteListLoanDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListLoanDetailPayroll with id: {}" , id);

        ListLoanDetailPayroll deletedListLoanDetailPayroll = listLoanDetailPayrollService.delete(id);

        return deletedListLoanDetailPayroll != null;
    }
    /**
     * @deprecated Use {@link #findListLoanDetailPayrolls(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListLoanDetailPayroll instances matching the search criteria.")
	public Page<ListLoanDetailPayroll> findListLoanDetailPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListLoanDetailPayrolls list");
		return listLoanDetailPayrollService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListLoanDetailPayroll instances matching the search criteria.")
    public Page<ListLoanDetailPayroll> findListLoanDetailPayrolls(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListLoanDetailPayrolls list");
    	return listLoanDetailPayrollService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListLoanDetailPayrolls(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listLoanDetailPayrollService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListLoanDetailPayroll instances.")
	public Long countListLoanDetailPayrolls(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListLoanDetailPayrolls");
		return listLoanDetailPayrollService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListLoanDetailPayrollService instance
	 */
	protected void setListLoanDetailPayrollService(ListLoanDetailPayrollService service) {
		this.listLoanDetailPayrollService = service;
	}

}

