/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ListCelphoneDetailPayroll;
import com.testshared1.testdb_26may.Payroll;
import com.testshared1.testdb_26may.PayrollDetail;
import com.testshared1.testdb_26may.service.ListCelphoneDetailPayrollService;
import com.testshared1.testdb_26may.service.PayrollDetailService;
import com.testshared1.testdb_26may.service.PayrollService;


/**
 * Controller object for domain model class Payroll.
 * @see Payroll
 */
@RestController("TestDB_26may.PayrollController")
@Api(value = "/TestDB_26may/Payroll", description = "Exposes APIs to work with Payroll resource.")
@RequestMapping("/TestDB_26may/Payroll")
public class PayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PayrollController.class);

    @Autowired
	@Qualifier("TestDB_26may.PayrollService")
	private PayrollService payrollService;

    @Autowired
	@Qualifier("TestDB_26may.PayrollDetailService")
	private PayrollDetailService payrollDetailService;

    @Autowired
	@Qualifier("TestDB_26may.ListCelphoneDetailPayrollService")
	private ListCelphoneDetailPayrollService listCelphoneDetailPayrollService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Payroll instance.")
	public Payroll createPayroll(@RequestBody Payroll payroll) {
		LOGGER.debug("Create Payroll with information: {}" , payroll);

		payroll = payrollService.create(payroll);
		LOGGER.debug("Created Payroll with information: {}" , payroll);

	    return payroll;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Payroll instance associated with the given id.")
    public Payroll getPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Payroll with id: {}" , id);

        Payroll foundPayroll = payrollService.getById(id);
        LOGGER.debug("Payroll details with id: {}" , foundPayroll);

        return foundPayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Payroll instance associated with the given id.")
    public Payroll editPayroll(@PathVariable("id") Integer id, @RequestBody Payroll payroll) throws EntityNotFoundException {
        LOGGER.debug("Editing Payroll with id: {}" , payroll.getIdPayroll());

        payroll.setIdPayroll(id);
        payroll = payrollService.update(payroll);
        LOGGER.debug("Payroll details with id: {}" , payroll);

        return payroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Payroll instance associated with the given id.")
    public boolean deletePayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Payroll with id: {}" , id);

        Payroll deletedPayroll = payrollService.delete(id);

        return deletedPayroll != null;
    }
    /**
     * @deprecated Use {@link #findPayrolls(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Payroll instances matching the search criteria.")
	public Page<Payroll> findPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Payrolls list");
		return payrollService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Payroll instances matching the search criteria.")
    public Page<Payroll> findPayrolls(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Payrolls list");
    	return payrollService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPayrolls(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return payrollService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Payroll instances.")
	public Long countPayrolls(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Payrolls");
		return payrollService.count(query);
	}

    @RequestMapping(value="/{id:.+}/listCelphoneDetailPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCelphoneDetailPayrolls instance associated with the given id.")
     public Page<ListCelphoneDetailPayroll>
        findAssociatedListCelphoneDetailPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listCelphoneDetailPayrolls");
        return listCelphoneDetailPayrollService.findAssociatedValues(id, "ListCelphoneDetailPayroll", "idPayroll", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail>
        findAssociatedPayrollDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id, "PayrollDetail", "idPayroll", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PayrollService instance
	 */
	protected void setPayrollService(PayrollService service) {
		this.payrollService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PayrollDetailService instance
	 */
	protected void setPayrollDetailService(PayrollDetailService service) {
        this.payrollDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCelphoneDetailPayrollService instance
	 */
	protected void setListCelphoneDetailPayrollService(ListCelphoneDetailPayrollService service) {
        this.listCelphoneDetailPayrollService = service;
    }
}

