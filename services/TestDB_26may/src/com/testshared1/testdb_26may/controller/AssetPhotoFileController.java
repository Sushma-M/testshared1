/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.AssetPhotoFile;
import com.testshared1.testdb_26may.service.AssetPhotoFileService;


/**
 * Controller object for domain model class AssetPhotoFile.
 * @see AssetPhotoFile
 */
@RestController("TestDB_26may.AssetPhotoFileController")
@Api(value = "/TestDB_26may/AssetPhotoFile", description = "Exposes APIs to work with AssetPhotoFile resource.")
@RequestMapping("/TestDB_26may/AssetPhotoFile")
public class AssetPhotoFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetPhotoFileController.class);

    @Autowired
	@Qualifier("TestDB_26may.AssetPhotoFileService")
	private AssetPhotoFileService assetPhotoFileService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssetPhotoFile instance.")
	public AssetPhotoFile createAssetPhotoFile(@RequestBody AssetPhotoFile assetphotofile) {
		LOGGER.debug("Create AssetPhotoFile with information: {}" , assetphotofile);

		assetphotofile = assetPhotoFileService.create(assetphotofile);
		LOGGER.debug("Created AssetPhotoFile with information: {}" , assetphotofile);

	    return assetphotofile;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssetPhotoFile instance associated with the given id.")
    public AssetPhotoFile getAssetPhotoFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetPhotoFile with id: {}" , id);

        AssetPhotoFile foundAssetPhotoFile = assetPhotoFileService.getById(id);
        LOGGER.debug("AssetPhotoFile details with id: {}" , foundAssetPhotoFile);

        return foundAssetPhotoFile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssetPhotoFile instance associated with the given id.")
    public AssetPhotoFile editAssetPhotoFile(@PathVariable("id") Integer id, @RequestBody AssetPhotoFile assetphotofile) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetPhotoFile with id: {}" , assetphotofile.getIdAssetPhotoFile());

        assetphotofile.setIdAssetPhotoFile(id);
        assetphotofile = assetPhotoFileService.update(assetphotofile);
        LOGGER.debug("AssetPhotoFile details with id: {}" , assetphotofile);

        return assetphotofile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssetPhotoFile instance associated with the given id.")
    public boolean deleteAssetPhotoFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetPhotoFile with id: {}" , id);

        AssetPhotoFile deletedAssetPhotoFile = assetPhotoFileService.delete(id);

        return deletedAssetPhotoFile != null;
    }
    /**
     * @deprecated Use {@link #findAssetPhotoFiles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssetPhotoFile instances matching the search criteria.")
	public Page<AssetPhotoFile> findAssetPhotoFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssetPhotoFiles list");
		return assetPhotoFileService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssetPhotoFile instances matching the search criteria.")
    public Page<AssetPhotoFile> findAssetPhotoFiles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssetPhotoFiles list");
    	return assetPhotoFileService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssetPhotoFiles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return assetPhotoFileService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssetPhotoFile instances.")
	public Long countAssetPhotoFiles(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AssetPhotoFiles");
		return assetPhotoFileService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetPhotoFileService instance
	 */
	protected void setAssetPhotoFileService(AssetPhotoFileService service) {
		this.assetPhotoFileService = service;
	}

}

