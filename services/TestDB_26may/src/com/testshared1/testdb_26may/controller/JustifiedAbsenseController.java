/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.JustifiedAbsense;
import com.testshared1.testdb_26may.JustifiedLeaveFile;
import com.testshared1.testdb_26may.service.JustifiedAbsenseService;
import com.testshared1.testdb_26may.service.JustifiedLeaveFileService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class JustifiedAbsense.
 * @see JustifiedAbsense
 */
@RestController("TestDB_26may.JustifiedAbsenseController")
@RequestMapping("/TestDB_26may/JustifiedAbsense")
@Api(description = "Exposes APIs to work with JustifiedAbsense resource.", value = "JustifiedAbsenseController")
public class JustifiedAbsenseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedAbsenseController.class);

    @Autowired
    @Qualifier("TestDB_26may.JustifiedAbsenseService")
    private JustifiedAbsenseService justifiedAbsenseService;

    @Autowired
    @Qualifier("TestDB_26may.JustifiedLeaveFileService")
    private JustifiedLeaveFileService justifiedLeaveFileService;

    /**
     * @deprecated Use {@link #findJustifiedAbsenses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of JustifiedAbsense instances matching the search criteria.")
    public Page<JustifiedAbsense> findJustifiedAbsenses(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering JustifiedAbsenses list");
        return justifiedAbsenseService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of JustifiedAbsense instances matching the search criteria.")
    public Page<JustifiedAbsense> findJustifiedAbsenses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering JustifiedAbsenses list");
        return justifiedAbsenseService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportJustifiedAbsenses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return justifiedAbsenseService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/justifiedLeaveFiles", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedLeaveFiles instance associated with the given id.")
    public Page<JustifiedLeaveFile> findAssociatedJustifiedLeaveFiles(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated justifiedLeaveFiles");
        return justifiedLeaveFileService.findAssociatedValues(id, "JustifiedLeaveFile", "idJustifiedAbsense", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JustifiedAbsenseService instance
	 */
    protected void setJustifiedAbsenseService(JustifiedAbsenseService service) {
        this.justifiedAbsenseService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JustifiedLeaveFileService instance
	 */
    protected void setJustifiedLeaveFileService(JustifiedLeaveFileService service) {
        this.justifiedLeaveFileService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new JustifiedAbsense instance.")
    public JustifiedAbsense createJustifiedAbsense(@RequestBody JustifiedAbsense justifiedabsense) {
        LOGGER.debug("Create JustifiedAbsense with information: {}", justifiedabsense);
        justifiedabsense = justifiedAbsenseService.create(justifiedabsense);
        LOGGER.debug("Created JustifiedAbsense with information: {}", justifiedabsense);
        return justifiedabsense;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of JustifiedAbsense instances.")
    public Long countJustifiedAbsenses(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting JustifiedAbsenses");
        return justifiedAbsenseService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the JustifiedAbsense instance associated with the given id.")
    public JustifiedAbsense getJustifiedAbsense(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting JustifiedAbsense with id: {}", id);
        JustifiedAbsense foundJustifiedAbsense = justifiedAbsenseService.getById(id);
        LOGGER.debug("JustifiedAbsense details with id: {}", foundJustifiedAbsense);
        return foundJustifiedAbsense;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the JustifiedAbsense instance associated with the given id.")
    public JustifiedAbsense editJustifiedAbsense(@PathVariable(value = "id") Integer id, @RequestBody JustifiedAbsense justifiedabsense) throws EntityNotFoundException {
        LOGGER.debug("Editing JustifiedAbsense with id: {}", justifiedabsense.getIdJustifiedAbsense());
        justifiedabsense.setIdJustifiedAbsense(id);
        justifiedabsense = justifiedAbsenseService.update(justifiedabsense);
        LOGGER.debug("JustifiedAbsense details with id: {}", justifiedabsense);
        return justifiedabsense;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the JustifiedAbsense instance associated with the given id.")
    public boolean deleteJustifiedAbsense(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedAbsense with id: {}", id);
        JustifiedAbsense deletedJustifiedAbsense = justifiedAbsenseService.delete(id);
        return deletedJustifiedAbsense != null;
    }
}
