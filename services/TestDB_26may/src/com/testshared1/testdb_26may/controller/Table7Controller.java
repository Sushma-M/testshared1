/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.Table7;
import com.testshared1.testdb_26may.service.Table7Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table7.
 * @see Table7
 */
@RestController("TestDB_26may.Table7Controller")
@RequestMapping("/TestDB_26may/Table7")
@Api(description = "Exposes APIs to work with Table7 resource.", value = "Table7Controller")
public class Table7Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table7Controller.class);

    @Autowired
    @Qualifier("TestDB_26may.Table7Service")
    private Table7Service table7Service;

    /**
     * @deprecated Use {@link #findTable7s(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table7 instances matching the search criteria.")
    public Page<Table7> findTable7s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table7 instances matching the search criteria.")
    public Page<Table7> findTable7s(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable7s(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table7Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table7Service instance
	 */
    protected void setTable7Service(Table7Service service) {
        this.table7Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table7 instance.")
    public Table7 createTable7(@RequestBody Table7 table7) {
        LOGGER.debug("Create Table7 with information: {}", table7);
        table7 = table7Service.create(table7);
        LOGGER.debug("Created Table7 with information: {}", table7);
        return table7;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table7 instances.")
    public Long countTable7s(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table7s");
        return table7Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table7 instance associated with the given id.")
    public Table7 getTable7(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table7 with id: {}", id);
        Table7 foundTable7 = table7Service.getById(id);
        LOGGER.debug("Table7 details with id: {}", foundTable7);
        return foundTable7;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table7 instance associated with the given id.")
    public Table7 editTable7(@PathVariable(value = "id") Integer id, @RequestBody Table7 table7) throws EntityNotFoundException {
        LOGGER.debug("Editing Table7 with id: {}", table7.getId());
        table7.setId(id);
        table7 = table7Service.update(table7);
        LOGGER.debug("Table7 details with id: {}", table7);
        return table7;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table7 instance associated with the given id.")
    public boolean deleteTable7(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table7 with id: {}", id);
        Table7 deletedTable7 = table7Service.delete(id);
        return deletedTable7 != null;
    }
}
