/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.VacationDayDebit;
import com.testshared1.testdb_26may.service.VacationDayDebitService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class VacationDayDebit.
 * @see VacationDayDebit
 */
@RestController("TestDB_26may.VacationDayDebitController")
@RequestMapping("/TestDB_26may/VacationDayDebit")
@Api(description = "Exposes APIs to work with VacationDayDebit resource.", value = "VacationDayDebitController")
public class VacationDayDebitController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VacationDayDebitController.class);

    @Autowired
    @Qualifier("TestDB_26may.VacationDayDebitService")
    private VacationDayDebitService vacationDayDebitService;

    /**
     * @deprecated Use {@link #findVacationDayDebits(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of VacationDayDebit instances matching the search criteria.")
    public Page<VacationDayDebit> findVacationDayDebits(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VacationDayDebits list");
        return vacationDayDebitService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of VacationDayDebit instances matching the search criteria.")
    public Page<VacationDayDebit> findVacationDayDebits(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VacationDayDebits list");
        return vacationDayDebitService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportVacationDayDebits(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return vacationDayDebitService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VacationDayDebitService instance
	 */
    protected void setVacationDayDebitService(VacationDayDebitService service) {
        this.vacationDayDebitService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new VacationDayDebit instance.")
    public VacationDayDebit createVacationDayDebit(@RequestBody VacationDayDebit vacationdaydebit) {
        LOGGER.debug("Create VacationDayDebit with information: {}", vacationdaydebit);
        vacationdaydebit = vacationDayDebitService.create(vacationdaydebit);
        LOGGER.debug("Created VacationDayDebit with information: {}", vacationdaydebit);
        return vacationdaydebit;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of VacationDayDebit instances.")
    public Long countVacationDayDebits(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting VacationDayDebits");
        return vacationDayDebitService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the VacationDayDebit instance associated with the given id.")
    public VacationDayDebit getVacationDayDebit(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting VacationDayDebit with id: {}", id);
        VacationDayDebit foundVacationDayDebit = vacationDayDebitService.getById(id);
        LOGGER.debug("VacationDayDebit details with id: {}", foundVacationDayDebit);
        return foundVacationDayDebit;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the VacationDayDebit instance associated with the given id.")
    public VacationDayDebit editVacationDayDebit(@PathVariable(value = "id") Integer id, @RequestBody VacationDayDebit vacationdaydebit) throws EntityNotFoundException {
        LOGGER.debug("Editing VacationDayDebit with id: {}", vacationdaydebit.getIdVacationDayDebit());
        vacationdaydebit.setIdVacationDayDebit(id);
        vacationdaydebit = vacationDayDebitService.update(vacationdaydebit);
        LOGGER.debug("VacationDayDebit details with id: {}", vacationdaydebit);
        return vacationdaydebit;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the VacationDayDebit instance associated with the given id.")
    public boolean deleteVacationDayDebit(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VacationDayDebit with id: {}", id);
        VacationDayDebit deletedVacationDayDebit = vacationDayDebitService.delete(id);
        return deletedVacationDayDebit != null;
    }
}
