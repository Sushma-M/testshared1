/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.BadgeTemplate;
import com.testshared1.testdb_26may.service.BadgeTemplateService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BadgeTemplate.
 * @see BadgeTemplate
 */
@RestController("TestDB_26may.BadgeTemplateController")
@RequestMapping("/TestDB_26may/BadgeTemplate")
@Api(description = "Exposes APIs to work with BadgeTemplate resource.", value = "BadgeTemplateController")
public class BadgeTemplateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BadgeTemplateController.class);

    @Autowired
    @Qualifier("TestDB_26may.BadgeTemplateService")
    private BadgeTemplateService badgeTemplateService;

    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Retrieves content for the given BLOB field in BadgeTemplate instance")
    public DownloadResponse getBadgeTemplateBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value = "download", defaultValue = "false") boolean download) {
        LOGGER.debug("Retrieves content for the given BLOB field {} in BadgeTemplate instance", fieldName);
        if (!WMRuntimeUtils.isLob(BadgeTemplate.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        BadgeTemplate badgetemplate = badgeTemplateService.getById(id);
        return WMMultipartUtils.buildDownloadResponseForBlob(badgetemplate, fieldName, httpServletRequest, download);
    }

    /**
     * @deprecated Use {@link #findBadgeTemplates(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BadgeTemplate instances matching the search criteria.")
    public Page<BadgeTemplate> findBadgeTemplates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BadgeTemplates list");
        return badgeTemplateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BadgeTemplate instances matching the search criteria.")
    public Page<BadgeTemplate> findBadgeTemplates(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BadgeTemplates list");
        return badgeTemplateService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBadgeTemplates(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return badgeTemplateService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BadgeTemplateService instance
	 */
    protected void setBadgeTemplateService(BadgeTemplateService service) {
        this.badgeTemplateService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BadgeTemplate instance.")
    public BadgeTemplate createBadgeTemplate(@RequestBody BadgeTemplate badgetemplate) {
        LOGGER.debug("Create BadgeTemplate with information: {}", badgetemplate);
        badgetemplate = badgeTemplateService.create(badgetemplate);
        LOGGER.debug("Created BadgeTemplate with information: {}", badgetemplate);
        return badgetemplate;
    }

    @RequestMapping(method = RequestMethod.POST, consumes = { "multipart/form-data" })
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BadgeTemplate instance.This API should be used when the BadgeTemplate instance has fields that requires multipart data.")
    public BadgeTemplate createBadgeTemplate(MultipartHttpServletRequest multipartHttpServletRequest) {
        BadgeTemplate badgetemplate = WMMultipartUtils.toObject(multipartHttpServletRequest, BadgeTemplate.class, "TestDB_26may");
        LOGGER.debug("Creating a new BadgeTemplate with information: {}", badgetemplate);
        return badgeTemplateService.create(badgetemplate);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BadgeTemplate instances.")
    public Long countBadgeTemplates(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting BadgeTemplates");
        return badgeTemplateService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BadgeTemplate instance associated with the given id.")
    public BadgeTemplate getBadgeTemplate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BadgeTemplate with id: {}", id);
        BadgeTemplate foundBadgeTemplate = badgeTemplateService.getById(id);
        LOGGER.debug("BadgeTemplate details with id: {}", foundBadgeTemplate);
        return foundBadgeTemplate;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BadgeTemplate instance associated with the given id.")
    public BadgeTemplate editBadgeTemplate(@PathVariable(value = "id") Integer id, @RequestBody BadgeTemplate badgetemplate) throws EntityNotFoundException {
        LOGGER.debug("Editing BadgeTemplate with id: {}", badgetemplate.getIdBadgeTemplate());
        badgetemplate.setIdBadgeTemplate(id);
        badgetemplate = badgeTemplateService.update(badgetemplate);
        LOGGER.debug("BadgeTemplate details with id: {}", badgetemplate);
        return badgetemplate;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.POST, consumes = { "multipart/form-data" })
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BadgeTemplate instance associated with the given id.This API should be used when BadgeTemplate instance fields that require multipart data.")
    public BadgeTemplate editBadgeTemplate(@PathVariable(value = "id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        BadgeTemplate newBadgeTemplate = WMMultipartUtils.toObject(multipartHttpServletRequest, BadgeTemplate.class, "TestDB_26may");
        newBadgeTemplate.setIdBadgeTemplate(id);
        BadgeTemplate oldBadgeTemplate = badgeTemplateService.getById(id);
        WMMultipartUtils.updateLobsContent(oldBadgeTemplate, newBadgeTemplate);
        LOGGER.debug("Updating BadgeTemplate with information: {}", newBadgeTemplate);
        return badgeTemplateService.update(newBadgeTemplate);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BadgeTemplate instance associated with the given id.")
    public boolean deleteBadgeTemplate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BadgeTemplate with id: {}", id);
        BadgeTemplate deletedBadgeTemplate = badgeTemplateService.delete(id);
        return deletedBadgeTemplate != null;
    }
}
