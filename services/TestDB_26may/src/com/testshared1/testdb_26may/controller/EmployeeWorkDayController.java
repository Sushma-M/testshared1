/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeWorkDay;
import com.testshared1.testdb_26may.service.EmployeeWorkDayService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class EmployeeWorkDay.
 * @see EmployeeWorkDay
 */
@RestController("TestDB_26may.EmployeeWorkDayController")
@RequestMapping("/TestDB_26may/EmployeeWorkDay")
@Api(description = "Exposes APIs to work with EmployeeWorkDay resource.", value = "EmployeeWorkDayController")
public class EmployeeWorkDayController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeWorkDayController.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeWorkDayService")
    private EmployeeWorkDayService employeeWorkDayService;

    /**
     * @deprecated Use {@link #findEmployeeWorkDays(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of EmployeeWorkDay instances matching the search criteria.")
    public Page<EmployeeWorkDay> findEmployeeWorkDays(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeWorkDays list");
        return employeeWorkDayService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeWorkDay instances matching the search criteria.")
    public Page<EmployeeWorkDay> findEmployeeWorkDays(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeWorkDays list");
        return employeeWorkDayService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeWorkDays(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employeeWorkDayService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeWorkDayService instance
	 */
    protected void setEmployeeWorkDayService(EmployeeWorkDayService service) {
        this.employeeWorkDayService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new EmployeeWorkDay instance.")
    public EmployeeWorkDay createEmployeeWorkDay(@RequestBody EmployeeWorkDay employeeworkday) {
        LOGGER.debug("Create EmployeeWorkDay with information: {}", employeeworkday);
        employeeworkday = employeeWorkDayService.create(employeeworkday);
        LOGGER.debug("Created EmployeeWorkDay with information: {}", employeeworkday);
        return employeeworkday;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of EmployeeWorkDay instances.")
    public Long countEmployeeWorkDays(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting EmployeeWorkDays");
        return employeeWorkDayService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the EmployeeWorkDay instance associated with the given id.")
    public EmployeeWorkDay getEmployeeWorkDay(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeWorkDay with id: {}", id);
        EmployeeWorkDay foundEmployeeWorkDay = employeeWorkDayService.getById(id);
        LOGGER.debug("EmployeeWorkDay details with id: {}", foundEmployeeWorkDay);
        return foundEmployeeWorkDay;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the EmployeeWorkDay instance associated with the given id.")
    public EmployeeWorkDay editEmployeeWorkDay(@PathVariable(value = "id") Integer id, @RequestBody EmployeeWorkDay employeeworkday) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeWorkDay with id: {}", employeeworkday.getIdEmployeeWorkDay());
        employeeworkday.setIdEmployeeWorkDay(id);
        employeeworkday = employeeWorkDayService.update(employeeworkday);
        LOGGER.debug("EmployeeWorkDay details with id: {}", employeeworkday);
        return employeeworkday;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the EmployeeWorkDay instance associated with the given id.")
    public boolean deleteEmployeeWorkDay(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeWorkDay with id: {}", id);
        EmployeeWorkDay deletedEmployeeWorkDay = employeeWorkDayService.delete(id);
        return deletedEmployeeWorkDay != null;
    }
}
