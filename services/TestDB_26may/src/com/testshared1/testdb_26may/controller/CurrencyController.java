/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.BonusEventual;
import com.testshared1.testdb_26may.BonusPeriodic;
import com.testshared1.testdb_26may.Currency;
import com.testshared1.testdb_26may.DeductionEventual;
import com.testshared1.testdb_26may.DeductionPeriodic;
import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.IsrDetail;
import com.testshared1.testdb_26may.ListCelphoneDetailPayroll;
import com.testshared1.testdb_26may.ListCommissionEmployee;
import com.testshared1.testdb_26may.ListCommissionPayroll;
import com.testshared1.testdb_26may.ListEmployeePhone;
import com.testshared1.testdb_26may.ListLoanDetailPayroll;
import com.testshared1.testdb_26may.ListOvertimePayroll;
import com.testshared1.testdb_26may.ListPeriodicBonusEmployee;
import com.testshared1.testdb_26may.ListPeriodicBonusPayroll;
import com.testshared1.testdb_26may.ListPeriodicDeductionEmployee;
import com.testshared1.testdb_26may.ListPeriodicDeductionPayroll;
import com.testshared1.testdb_26may.ListTravelExpenseDetail;
import com.testshared1.testdb_26may.Loan;
import com.testshared1.testdb_26may.MobileNumber;
import com.testshared1.testdb_26may.OverTimeSegmentPayroll;
import com.testshared1.testdb_26may.PaymentLoanManual;
import com.testshared1.testdb_26may.Payroll;
import com.testshared1.testdb_26may.PayrollDetail;
import com.testshared1.testdb_26may.TravelExpense;
import com.testshared1.testdb_26may.TypeExtraHourSegment;
import com.testshared1.testdb_26may.service.BonusEventualService;
import com.testshared1.testdb_26may.service.BonusPeriodicService;
import com.testshared1.testdb_26may.service.CurrencyService;
import com.testshared1.testdb_26may.service.DeductionEventualService;
import com.testshared1.testdb_26may.service.DeductionPeriodicService;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;
import com.testshared1.testdb_26may.service.IsrDetailService;
import com.testshared1.testdb_26may.service.ListCelphoneDetailPayrollService;
import com.testshared1.testdb_26may.service.ListCommissionEmployeeService;
import com.testshared1.testdb_26may.service.ListCommissionPayrollService;
import com.testshared1.testdb_26may.service.ListEmployeePhoneService;
import com.testshared1.testdb_26may.service.ListLoanDetailPayrollService;
import com.testshared1.testdb_26may.service.ListOvertimePayrollService;
import com.testshared1.testdb_26may.service.ListPeriodicBonusEmployeeService;
import com.testshared1.testdb_26may.service.ListPeriodicBonusPayrollService;
import com.testshared1.testdb_26may.service.ListPeriodicDeductionEmployeeService;
import com.testshared1.testdb_26may.service.ListPeriodicDeductionPayrollService;
import com.testshared1.testdb_26may.service.ListTravelExpenseDetailService;
import com.testshared1.testdb_26may.service.LoanService;
import com.testshared1.testdb_26may.service.MobileNumberService;
import com.testshared1.testdb_26may.service.OverTimeSegmentPayrollService;
import com.testshared1.testdb_26may.service.PaymentLoanManualService;
import com.testshared1.testdb_26may.service.PayrollDetailService;
import com.testshared1.testdb_26may.service.PayrollService;
import com.testshared1.testdb_26may.service.TravelExpenseService;
import com.testshared1.testdb_26may.service.TypeExtraHourSegmentService;


/**
 * Controller object for domain model class Currency.
 * @see Currency
 */
@RestController("TestDB_26may.CurrencyController")
@Api(value = "/TestDB_26may/Currency", description = "Exposes APIs to work with Currency resource.")
@RequestMapping("/TestDB_26may/Currency")
public class CurrencyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CurrencyController.class);

    @Autowired
	@Qualifier("TestDB_26may.CurrencyService")
	private CurrencyService currencyService;

    @Autowired
	@Qualifier("TestDB_26may.TravelExpenseService")
	private TravelExpenseService travelExpenseService;

    @Autowired
	@Qualifier("TestDB_26may.BonusPeriodicService")
	private BonusPeriodicService bonusPeriodicService;

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicBonusEmployeeService")
	private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.OverTimeSegmentPayrollService")
	private OverTimeSegmentPayrollService overTimeSegmentPayrollService;

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicDeductionPayrollService")
	private ListPeriodicDeductionPayrollService listPeriodicDeductionPayrollService;

    @Autowired
	@Qualifier("TestDB_26may.DeductionEventualService")
	private DeductionEventualService deductionEventualService;

    @Autowired
	@Qualifier("TestDB_26may.ListCelphoneDetailPayrollService")
	private ListCelphoneDetailPayrollService listCelphoneDetailPayrollService;

    @Autowired
	@Qualifier("TestDB_26may.ListCommissionEmployeeService")
	private ListCommissionEmployeeService listCommissionEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.TypeExtraHourSegmentService")
	private TypeExtraHourSegmentService typeExtraHourSegmentService;

    @Autowired
	@Qualifier("TestDB_26may.LoanService")
	private LoanService loanService;

    @Autowired
	@Qualifier("TestDB_26may.ListOvertimePayrollService")
	private ListOvertimePayrollService listOvertimePayrollService;

    @Autowired
	@Qualifier("TestDB_26may.ListLoanDetailPayrollService")
	private ListLoanDetailPayrollService listLoanDetailPayrollService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeSalaryService")
	private EmployeeSalaryService employeeSalaryService;

    @Autowired
	@Qualifier("TestDB_26may.ListTravelExpenseDetailService")
	private ListTravelExpenseDetailService listTravelExpenseDetailService;

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicBonusPayrollService")
	private ListPeriodicBonusPayrollService listPeriodicBonusPayrollService;

    @Autowired
	@Qualifier("TestDB_26may.DeductionPeriodicService")
	private DeductionPeriodicService deductionPeriodicService;

    @Autowired
	@Qualifier("TestDB_26may.ListEmployeePhoneService")
	private ListEmployeePhoneService listEmployeePhoneService;

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicDeductionEmployeeService")
	private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;

    @Autowired
	@Qualifier("TestDB_26may.BonusEventualService")
	private BonusEventualService bonusEventualService;

    @Autowired
	@Qualifier("TestDB_26may.IsrDetailService")
	private IsrDetailService isrDetailService;

    @Autowired
	@Qualifier("TestDB_26may.MobileNumberService")
	private MobileNumberService mobileNumberService;

    @Autowired
	@Qualifier("TestDB_26may.PayrollDetailService")
	private PayrollDetailService payrollDetailService;

    @Autowired
	@Qualifier("TestDB_26may.ListCommissionPayrollService")
	private ListCommissionPayrollService listCommissionPayrollService;

    @Autowired
	@Qualifier("TestDB_26may.PaymentLoanManualService")
	private PaymentLoanManualService paymentLoanManualService;

    @Autowired
	@Qualifier("TestDB_26may.PayrollService")
	private PayrollService payrollService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Currency instance.")
	public Currency createCurrency(@RequestBody Currency currency) {
		LOGGER.debug("Create Currency with information: {}" , currency);

		currency = currencyService.create(currency);
		LOGGER.debug("Created Currency with information: {}" , currency);

	    return currency;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Currency instance associated with the given id.")
    public Currency getCurrency(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Currency with id: {}" , id);

        Currency foundCurrency = currencyService.getById(id);
        LOGGER.debug("Currency details with id: {}" , foundCurrency);

        return foundCurrency;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Currency instance associated with the given id.")
    public Currency editCurrency(@PathVariable("id") Integer id, @RequestBody Currency currency) throws EntityNotFoundException {
        LOGGER.debug("Editing Currency with id: {}" , currency.getIdCurrency());

        currency.setIdCurrency(id);
        currency = currencyService.update(currency);
        LOGGER.debug("Currency details with id: {}" , currency);

        return currency;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Currency instance associated with the given id.")
    public boolean deleteCurrency(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Currency with id: {}" , id);

        Currency deletedCurrency = currencyService.delete(id);

        return deletedCurrency != null;
    }
    /**
     * @deprecated Use {@link #findCurrencies(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Currency instances matching the search criteria.")
	public Page<Currency> findCurrencies( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Currencies list");
		return currencyService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Currency instances matching the search criteria.")
    public Page<Currency> findCurrencies(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Currencies list");
    	return currencyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCurrencies(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return currencyService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Currency instances.")
	public Long countCurrencies(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Currencies");
		return currencyService.count(query);
	}

    @RequestMapping(value="/{id:.+}/listLoanDetailPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listLoanDetailPayrolls instance associated with the given id.")
     public Page<ListLoanDetailPayroll>
        findAssociatedListLoanDetailPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listLoanDetailPayrolls");
        return listLoanDetailPayrollService.findAssociatedValues(id, "ListLoanDetailPayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCommissionPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCommissionPayrolls instance associated with the given id.")
     public Page<ListCommissionPayroll>
        findAssociatedListCommissionPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listCommissionPayrolls");
        return listCommissionPayrollService.findAssociatedValues(id, "ListCommissionPayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/isrDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the isrDetails instance associated with the given id.")
     public Page<IsrDetail>
        findAssociatedIsrDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated isrDetails");
        return isrDetailService.findAssociatedValues(id, "IsrDetail", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/deductionPeriodics", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the deductionPeriodics instance associated with the given id.")
     public Page<DeductionPeriodic>
        findAssociatedDeductionPeriodics(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated deductionPeriodics");
        return deductionPeriodicService.findAssociatedValues(id, "DeductionPeriodic", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/travelExpenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the travelExpenses instance associated with the given id.")
     public Page<TravelExpense>
        findAssociatedTravelExpenses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated travelExpenses");
        return travelExpenseService.findAssociatedValues(id, "TravelExpense", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicBonusEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusEmployees instance associated with the given id.")
     public Page<ListPeriodicBonusEmployee>
        findAssociatedListPeriodicBonusEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listPeriodicBonusEmployees");
        return listPeriodicBonusEmployeeService.findAssociatedValues(id, "ListPeriodicBonusEmployee", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicDeductionPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionPayrolls instance associated with the given id.")
     public Page<ListPeriodicDeductionPayroll>
        findAssociatedListPeriodicDeductionPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listPeriodicDeductionPayrolls");
        return listPeriodicDeductionPayrollService.findAssociatedValues(id, "ListPeriodicDeductionPayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/loans", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the loans instance associated with the given id.")
     public Page<Loan>
        findAssociatedLoans(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated loans");
        return loanService.findAssociatedValues(id, "Loan", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/paymentLoanManuals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the paymentLoanManuals instance associated with the given id.")
     public Page<PaymentLoanManual>
        findAssociatedPaymentLoanManuals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated paymentLoanManuals");
        return paymentLoanManualService.findAssociatedValues(id, "PaymentLoanManual", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary>
        findAssociatedEmployeeSalaries(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id, "EmployeeSalary", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCelphoneDetailPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCelphoneDetailPayrolls instance associated with the given id.")
     public Page<ListCelphoneDetailPayroll>
        findAssociatedListCelphoneDetailPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listCelphoneDetailPayrolls");
        return listCelphoneDetailPayrollService.findAssociatedValues(id, "ListCelphoneDetailPayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrolls instance associated with the given id.")
     public Page<Payroll>
        findAssociatedPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payrolls");
        return payrollService.findAssociatedValues(id, "Payroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/typeExtraHourSegments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the typeExtraHourSegments instance associated with the given id.")
     public Page<TypeExtraHourSegment>
        findAssociatedTypeExtraHourSegments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated typeExtraHourSegments");
        return typeExtraHourSegmentService.findAssociatedValues(id, "TypeExtraHourSegment", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/bonusEventuals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the bonusEventuals instance associated with the given id.")
     public Page<BonusEventual>
        findAssociatedBonusEventuals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated bonusEventuals");
        return bonusEventualService.findAssociatedValues(id, "BonusEventual", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicDeductionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionEmployees instance associated with the given id.")
     public Page<ListPeriodicDeductionEmployee>
        findAssociatedListPeriodicDeductionEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listPeriodicDeductionEmployees");
        return listPeriodicDeductionEmployeeService.findAssociatedValues(id, "ListPeriodicDeductionEmployee", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicBonusPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusPayrolls instance associated with the given id.")
     public Page<ListPeriodicBonusPayroll>
        findAssociatedListPeriodicBonusPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listPeriodicBonusPayrolls");
        return listPeriodicBonusPayrollService.findAssociatedValues(id, "ListPeriodicBonusPayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/deductionEventuals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the deductionEventuals instance associated with the given id.")
     public Page<DeductionEventual>
        findAssociatedDeductionEventuals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated deductionEventuals");
        return deductionEventualService.findAssociatedValues(id, "DeductionEventual", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/bonusPeriodics", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the bonusPeriodics instance associated with the given id.")
     public Page<BonusPeriodic>
        findAssociatedBonusPeriodics(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated bonusPeriodics");
        return bonusPeriodicService.findAssociatedValues(id, "BonusPeriodic", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/overTimeSegmentPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeSegmentPayrolls instance associated with the given id.")
     public Page<OverTimeSegmentPayroll>
        findAssociatedOverTimeSegmentPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated overTimeSegmentPayrolls");
        return overTimeSegmentPayrollService.findAssociatedValues(id, "OverTimeSegmentPayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listOvertimePayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listOvertimePayrolls instance associated with the given id.")
     public Page<ListOvertimePayroll>
        findAssociatedListOvertimePayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listOvertimePayrolls");
        return listOvertimePayrollService.findAssociatedValues(id, "ListOvertimePayroll", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listTravelExpenseDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listTravelExpenseDetails instance associated with the given id.")
     public Page<ListTravelExpenseDetail>
        findAssociatedListTravelExpenseDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listTravelExpenseDetails");
        return listTravelExpenseDetailService.findAssociatedValues(id, "ListTravelExpenseDetail", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail>
        findAssociatedPayrollDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id, "PayrollDetail", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listEmployeePhones", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listEmployeePhones instance associated with the given id.")
     public Page<ListEmployeePhone>
        findAssociatedListEmployeePhones(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listEmployeePhones");
        return listEmployeePhoneService.findAssociatedValues(id, "ListEmployeePhone", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/mobileNumbers", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the mobileNumbers instance associated with the given id.")
     public Page<MobileNumber>
        findAssociatedMobileNumbers(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated mobileNumbers");
        return mobileNumberService.findAssociatedValues(id, "MobileNumber", "idCurrency", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCommissionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCommissionEmployees instance associated with the given id.")
     public Page<ListCommissionEmployee>
        findAssociatedListCommissionEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listCommissionEmployees");
        return listCommissionEmployeeService.findAssociatedValues(id, "ListCommissionEmployee", "idCurrency", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CurrencyService instance
	 */
	protected void setCurrencyService(CurrencyService service) {
		this.currencyService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelExpenseService instance
	 */
	protected void setTravelExpenseService(TravelExpenseService service) {
        this.travelExpenseService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BonusPeriodicService instance
	 */
	protected void setBonusPeriodicService(BonusPeriodicService service) {
        this.bonusPeriodicService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicBonusEmployeeService instance
	 */
	protected void setListPeriodicBonusEmployeeService(ListPeriodicBonusEmployeeService service) {
        this.listPeriodicBonusEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OverTimeSegmentPayrollService instance
	 */
	protected void setOverTimeSegmentPayrollService(OverTimeSegmentPayrollService service) {
        this.overTimeSegmentPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicDeductionPayrollService instance
	 */
	protected void setListPeriodicDeductionPayrollService(ListPeriodicDeductionPayrollService service) {
        this.listPeriodicDeductionPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeductionEventualService instance
	 */
	protected void setDeductionEventualService(DeductionEventualService service) {
        this.deductionEventualService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCelphoneDetailPayrollService instance
	 */
	protected void setListCelphoneDetailPayrollService(ListCelphoneDetailPayrollService service) {
        this.listCelphoneDetailPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCommissionEmployeeService instance
	 */
	protected void setListCommissionEmployeeService(ListCommissionEmployeeService service) {
        this.listCommissionEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeExtraHourSegmentService instance
	 */
	protected void setTypeExtraHourSegmentService(TypeExtraHourSegmentService service) {
        this.typeExtraHourSegmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoanService instance
	 */
	protected void setLoanService(LoanService service) {
        this.loanService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListOvertimePayrollService instance
	 */
	protected void setListOvertimePayrollService(ListOvertimePayrollService service) {
        this.listOvertimePayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListLoanDetailPayrollService instance
	 */
	protected void setListLoanDetailPayrollService(ListLoanDetailPayrollService service) {
        this.listLoanDetailPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
	protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListTravelExpenseDetailService instance
	 */
	protected void setListTravelExpenseDetailService(ListTravelExpenseDetailService service) {
        this.listTravelExpenseDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicBonusPayrollService instance
	 */
	protected void setListPeriodicBonusPayrollService(ListPeriodicBonusPayrollService service) {
        this.listPeriodicBonusPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DeductionPeriodicService instance
	 */
	protected void setDeductionPeriodicService(DeductionPeriodicService service) {
        this.deductionPeriodicService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListEmployeePhoneService instance
	 */
	protected void setListEmployeePhoneService(ListEmployeePhoneService service) {
        this.listEmployeePhoneService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicDeductionEmployeeService instance
	 */
	protected void setListPeriodicDeductionEmployeeService(ListPeriodicDeductionEmployeeService service) {
        this.listPeriodicDeductionEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BonusEventualService instance
	 */
	protected void setBonusEventualService(BonusEventualService service) {
        this.bonusEventualService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IsrDetailService instance
	 */
	protected void setIsrDetailService(IsrDetailService service) {
        this.isrDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MobileNumberService instance
	 */
	protected void setMobileNumberService(MobileNumberService service) {
        this.mobileNumberService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PayrollDetailService instance
	 */
	protected void setPayrollDetailService(PayrollDetailService service) {
        this.payrollDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListCommissionPayrollService instance
	 */
	protected void setListCommissionPayrollService(ListCommissionPayrollService service) {
        this.listCommissionPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentLoanManualService instance
	 */
	protected void setPaymentLoanManualService(PaymentLoanManualService service) {
        this.paymentLoanManualService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PayrollService instance
	 */
	protected void setPayrollService(PayrollService service) {
        this.payrollService = service;
    }
}

