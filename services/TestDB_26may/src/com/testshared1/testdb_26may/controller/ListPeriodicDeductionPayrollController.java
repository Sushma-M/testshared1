/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ListPeriodicDeductionPayroll;
import com.testshared1.testdb_26may.service.ListPeriodicDeductionPayrollService;


/**
 * Controller object for domain model class ListPeriodicDeductionPayroll.
 * @see ListPeriodicDeductionPayroll
 */
@RestController("TestDB_26may.ListPeriodicDeductionPayrollController")
@Api(value = "/TestDB_26may/ListPeriodicDeductionPayroll", description = "Exposes APIs to work with ListPeriodicDeductionPayroll resource.")
@RequestMapping("/TestDB_26may/ListPeriodicDeductionPayroll")
public class ListPeriodicDeductionPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionPayrollController.class);

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicDeductionPayrollService")
	private ListPeriodicDeductionPayrollService listPeriodicDeductionPayrollService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListPeriodicDeductionPayroll instance.")
	public ListPeriodicDeductionPayroll createListPeriodicDeductionPayroll(@RequestBody ListPeriodicDeductionPayroll listperiodicdeductionpayroll) {
		LOGGER.debug("Create ListPeriodicDeductionPayroll with information: {}" , listperiodicdeductionpayroll);

		listperiodicdeductionpayroll = listPeriodicDeductionPayrollService.create(listperiodicdeductionpayroll);
		LOGGER.debug("Created ListPeriodicDeductionPayroll with information: {}" , listperiodicdeductionpayroll);

	    return listperiodicdeductionpayroll;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListPeriodicDeductionPayroll instance associated with the given id.")
    public ListPeriodicDeductionPayroll getListPeriodicDeductionPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListPeriodicDeductionPayroll with id: {}" , id);

        ListPeriodicDeductionPayroll foundListPeriodicDeductionPayroll = listPeriodicDeductionPayrollService.getById(id);
        LOGGER.debug("ListPeriodicDeductionPayroll details with id: {}" , foundListPeriodicDeductionPayroll);

        return foundListPeriodicDeductionPayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListPeriodicDeductionPayroll instance associated with the given id.")
    public ListPeriodicDeductionPayroll editListPeriodicDeductionPayroll(@PathVariable("id") Integer id, @RequestBody ListPeriodicDeductionPayroll listperiodicdeductionpayroll) throws EntityNotFoundException {
        LOGGER.debug("Editing ListPeriodicDeductionPayroll with id: {}" , listperiodicdeductionpayroll.getIdListPeriodicDeductionPayroll());

        listperiodicdeductionpayroll.setIdListPeriodicDeductionPayroll(id);
        listperiodicdeductionpayroll = listPeriodicDeductionPayrollService.update(listperiodicdeductionpayroll);
        LOGGER.debug("ListPeriodicDeductionPayroll details with id: {}" , listperiodicdeductionpayroll);

        return listperiodicdeductionpayroll;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListPeriodicDeductionPayroll instance associated with the given id.")
    public boolean deleteListPeriodicDeductionPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicDeductionPayroll with id: {}" , id);

        ListPeriodicDeductionPayroll deletedListPeriodicDeductionPayroll = listPeriodicDeductionPayrollService.delete(id);

        return deletedListPeriodicDeductionPayroll != null;
    }
    /**
     * @deprecated Use {@link #findListPeriodicDeductionPayrolls(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListPeriodicDeductionPayroll instances matching the search criteria.")
	public Page<ListPeriodicDeductionPayroll> findListPeriodicDeductionPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListPeriodicDeductionPayrolls list");
		return listPeriodicDeductionPayrollService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListPeriodicDeductionPayroll instances matching the search criteria.")
    public Page<ListPeriodicDeductionPayroll> findListPeriodicDeductionPayrolls(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListPeriodicDeductionPayrolls list");
    	return listPeriodicDeductionPayrollService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListPeriodicDeductionPayrolls(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listPeriodicDeductionPayrollService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListPeriodicDeductionPayroll instances.")
	public Long countListPeriodicDeductionPayrolls(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListPeriodicDeductionPayrolls");
		return listPeriodicDeductionPayrollService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicDeductionPayrollService instance
	 */
	protected void setListPeriodicDeductionPayrollService(ListPeriodicDeductionPayrollService service) {
		this.listPeriodicDeductionPayrollService = service;
	}

}

