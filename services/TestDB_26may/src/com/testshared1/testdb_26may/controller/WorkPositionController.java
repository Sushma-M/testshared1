/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeAssessment;
import com.testshared1.testdb_26may.ListEmployeePosition;
import com.testshared1.testdb_26may.WorkPosition;
import com.testshared1.testdb_26may.WorkPositionPerformanceIndicator;
import com.testshared1.testdb_26may.WorkPositionRequiement;
import com.testshared1.testdb_26may.WorkPositionResponsibility;
import com.testshared1.testdb_26may.WorkPositionScope;
import com.testshared1.testdb_26may.WorkPositionVacant;
import com.testshared1.testdb_26may.service.EmployeeAssessmentService;
import com.testshared1.testdb_26may.service.ListEmployeePositionService;
import com.testshared1.testdb_26may.service.WorkPositionPerformanceIndicatorService;
import com.testshared1.testdb_26may.service.WorkPositionRequiementService;
import com.testshared1.testdb_26may.service.WorkPositionResponsibilityService;
import com.testshared1.testdb_26may.service.WorkPositionScopeService;
import com.testshared1.testdb_26may.service.WorkPositionService;
import com.testshared1.testdb_26may.service.WorkPositionVacantService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class WorkPosition.
 * @see WorkPosition
 */
@RestController("TestDB_26may.WorkPositionController")
@RequestMapping("/TestDB_26may/WorkPosition")
@Api(description = "Exposes APIs to work with WorkPosition resource.", value = "WorkPositionController")
public class WorkPositionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionController.class);

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionService")
    private WorkPositionService workPositionService;

    @Autowired
    @Qualifier("TestDB_26may.EmployeeAssessmentService")
    private EmployeeAssessmentService employeeAssessmentService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionResponsibilityService")
    private WorkPositionResponsibilityService workPositionResponsibilityService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionVacantService")
    private WorkPositionVacantService workPositionVacantService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionPerformanceIndicatorService")
    private WorkPositionPerformanceIndicatorService workPositionPerformanceIndicatorService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionRequiementService")
    private WorkPositionRequiementService workPositionRequiementService;

    @Autowired
    @Qualifier("TestDB_26may.ListEmployeePositionService")
    private ListEmployeePositionService listEmployeePositionService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionScopeService")
    private WorkPositionScopeService workPositionScopeService;

    /**
     * @deprecated Use {@link #findWorkPositions(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of WorkPosition instances matching the search criteria.")
    public Page<WorkPosition> findWorkPositions(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering WorkPositions list");
        return workPositionService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of WorkPosition instances matching the search criteria.")
    public Page<WorkPosition> findWorkPositions(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WorkPositions list");
        return workPositionService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportWorkPositions(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return workPositionService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionRequiements", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionRequiements instance associated with the given id.")
    public Page<WorkPositionRequiement> findAssociatedWorkPositionRequiements(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionRequiements");
        return workPositionRequiementService.findAssociatedValues(id, "WorkPositionRequiement", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionVacants", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionVacants instance associated with the given id.")
    public Page<WorkPositionVacant> findAssociatedWorkPositionVacants(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionVacants");
        return workPositionVacantService.findAssociatedValues(id, "WorkPositionVacant", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionResponsibilities", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionResponsibilities instance associated with the given id.")
    public Page<WorkPositionResponsibility> findAssociatedWorkPositionResponsibilities(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionResponsibilities");
        return workPositionResponsibilityService.findAssociatedValues(id, "WorkPositionResponsibility", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionsForFkSuperiorPosition", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionsForFkSuperiorPosition instance associated with the given id.")
    public Page<WorkPosition> findAssociatedWorkPositionsForFkSuperiorPosition(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionsForFkSuperiorPosition");
        return workPositionService.findAssociatedValues(id, "WorkPosition", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionScopes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionScopes instance associated with the given id.")
    public Page<WorkPositionScope> findAssociatedWorkPositionScopes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionScopes");
        return workPositionScopeService.findAssociatedValues(id, "WorkPositionScope", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/listEmployeePositions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listEmployeePositions instance associated with the given id.")
    public Page<ListEmployeePosition> findAssociatedListEmployeePositions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listEmployeePositions");
        return listEmployeePositionService.findAssociatedValues(id, "ListEmployeePosition", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/employeeAssessments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeAssessments instance associated with the given id.")
    public Page<EmployeeAssessment> findAssociatedEmployeeAssessments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeAssessments");
        return employeeAssessmentService.findAssociatedValues(id, "EmployeeAssessment", "idWorkPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionPerformanceIndicators", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionPerformanceIndicators instance associated with the given id.")
    public Page<WorkPositionPerformanceIndicator> findAssociatedWorkPositionPerformanceIndicators(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionPerformanceIndicators");
        return workPositionPerformanceIndicatorService.findAssociatedValues(id, "WorkPositionPerformanceIndicator", "idWorkPosition", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionService instance
	 */
    protected void setWorkPositionService(WorkPositionService service) {
        this.workPositionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeAssessmentService instance
	 */
    protected void setEmployeeAssessmentService(EmployeeAssessmentService service) {
        this.employeeAssessmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionResponsibilityService instance
	 */
    protected void setWorkPositionResponsibilityService(WorkPositionResponsibilityService service) {
        this.workPositionResponsibilityService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionVacantService instance
	 */
    protected void setWorkPositionVacantService(WorkPositionVacantService service) {
        this.workPositionVacantService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionPerformanceIndicatorService instance
	 */
    protected void setWorkPositionPerformanceIndicatorService(WorkPositionPerformanceIndicatorService service) {
        this.workPositionPerformanceIndicatorService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionRequiementService instance
	 */
    protected void setWorkPositionRequiementService(WorkPositionRequiementService service) {
        this.workPositionRequiementService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListEmployeePositionService instance
	 */
    protected void setListEmployeePositionService(ListEmployeePositionService service) {
        this.listEmployeePositionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionScopeService instance
	 */
    protected void setWorkPositionScopeService(WorkPositionScopeService service) {
        this.workPositionScopeService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new WorkPosition instance.")
    public WorkPosition createWorkPosition(@RequestBody WorkPosition workposition) {
        LOGGER.debug("Create WorkPosition with information: {}", workposition);
        workposition = workPositionService.create(workposition);
        LOGGER.debug("Created WorkPosition with information: {}", workposition);
        return workposition;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of WorkPosition instances.")
    public Long countWorkPositions(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting WorkPositions");
        return workPositionService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the WorkPosition instance associated with the given id.")
    public WorkPosition getWorkPosition(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting WorkPosition with id: {}", id);
        WorkPosition foundWorkPosition = workPositionService.getById(id);
        LOGGER.debug("WorkPosition details with id: {}", foundWorkPosition);
        return foundWorkPosition;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the WorkPosition instance associated with the given id.")
    public WorkPosition editWorkPosition(@PathVariable(value = "id") Integer id, @RequestBody WorkPosition workposition) throws EntityNotFoundException {
        LOGGER.debug("Editing WorkPosition with id: {}", workposition.getIdWorkPosition());
        workposition.setIdWorkPosition(id);
        workposition = workPositionService.update(workposition);
        LOGGER.debug("WorkPosition details with id: {}", workposition);
        return workposition;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the WorkPosition instance associated with the given id.")
    public boolean deleteWorkPosition(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPosition with id: {}", id);
        WorkPosition deletedWorkPosition = workPositionService.delete(id);
        return deletedWorkPosition != null;
    }
}
