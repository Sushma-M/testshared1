/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.IncidenceEmployee;
import com.testshared1.testdb_26may.service.IncidenceEmployeeService;


/**
 * Controller object for domain model class IncidenceEmployee.
 * @see IncidenceEmployee
 */
@RestController("TestDB_26may.IncidenceEmployeeController")
@Api(value = "/TestDB_26may/IncidenceEmployee", description = "Exposes APIs to work with IncidenceEmployee resource.")
@RequestMapping("/TestDB_26may/IncidenceEmployee")
public class IncidenceEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IncidenceEmployeeController.class);

    @Autowired
	@Qualifier("TestDB_26may.IncidenceEmployeeService")
	private IncidenceEmployeeService incidenceEmployeeService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new IncidenceEmployee instance.")
	public IncidenceEmployee createIncidenceEmployee(@RequestBody IncidenceEmployee incidenceemployee) {
		LOGGER.debug("Create IncidenceEmployee with information: {}" , incidenceemployee);

		incidenceemployee = incidenceEmployeeService.create(incidenceemployee);
		LOGGER.debug("Created IncidenceEmployee with information: {}" , incidenceemployee);

	    return incidenceemployee;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the IncidenceEmployee instance associated with the given id.")
    public IncidenceEmployee getIncidenceEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IncidenceEmployee with id: {}" , id);

        IncidenceEmployee foundIncidenceEmployee = incidenceEmployeeService.getById(id);
        LOGGER.debug("IncidenceEmployee details with id: {}" , foundIncidenceEmployee);

        return foundIncidenceEmployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the IncidenceEmployee instance associated with the given id.")
    public IncidenceEmployee editIncidenceEmployee(@PathVariable("id") Integer id, @RequestBody IncidenceEmployee incidenceemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing IncidenceEmployee with id: {}" , incidenceemployee.getIdIncidenceEmployee());

        incidenceemployee.setIdIncidenceEmployee(id);
        incidenceemployee = incidenceEmployeeService.update(incidenceemployee);
        LOGGER.debug("IncidenceEmployee details with id: {}" , incidenceemployee);

        return incidenceemployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the IncidenceEmployee instance associated with the given id.")
    public boolean deleteIncidenceEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IncidenceEmployee with id: {}" , id);

        IncidenceEmployee deletedIncidenceEmployee = incidenceEmployeeService.delete(id);

        return deletedIncidenceEmployee != null;
    }
    /**
     * @deprecated Use {@link #findIncidenceEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of IncidenceEmployee instances matching the search criteria.")
	public Page<IncidenceEmployee> findIncidenceEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering IncidenceEmployees list");
		return incidenceEmployeeService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of IncidenceEmployee instances matching the search criteria.")
    public Page<IncidenceEmployee> findIncidenceEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IncidenceEmployees list");
    	return incidenceEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportIncidenceEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return incidenceEmployeeService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of IncidenceEmployee instances.")
	public Long countIncidenceEmployees(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting IncidenceEmployees");
		return incidenceEmployeeService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IncidenceEmployeeService instance
	 */
	protected void setIncidenceEmployeeService(IncidenceEmployeeService service) {
		this.incidenceEmployeeService = service;
	}

}

