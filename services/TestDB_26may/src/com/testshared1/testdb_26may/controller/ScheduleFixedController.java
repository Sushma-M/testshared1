/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.ScheduleFixed;
import com.testshared1.testdb_26may.ScheduleFixedDay;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;
import com.testshared1.testdb_26may.service.ScheduleFixedDayService;
import com.testshared1.testdb_26may.service.ScheduleFixedService;


/**
 * Controller object for domain model class ScheduleFixed.
 * @see ScheduleFixed
 */
@RestController("TestDB_26may.ScheduleFixedController")
@Api(value = "/TestDB_26may/ScheduleFixed", description = "Exposes APIs to work with ScheduleFixed resource.")
@RequestMapping("/TestDB_26may/ScheduleFixed")
public class ScheduleFixedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedController.class);

    @Autowired
	@Qualifier("TestDB_26may.ScheduleFixedService")
	private ScheduleFixedService scheduleFixedService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeSalaryService")
	private EmployeeSalaryService employeeSalaryService;

    @Autowired
	@Qualifier("TestDB_26may.ScheduleFixedDayService")
	private ScheduleFixedDayService scheduleFixedDayService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ScheduleFixed instance.")
	public ScheduleFixed createScheduleFixed(@RequestBody ScheduleFixed schedulefixed) {
		LOGGER.debug("Create ScheduleFixed with information: {}" , schedulefixed);

		schedulefixed = scheduleFixedService.create(schedulefixed);
		LOGGER.debug("Created ScheduleFixed with information: {}" , schedulefixed);

	    return schedulefixed;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ScheduleFixed instance associated with the given id.")
    public ScheduleFixed getScheduleFixed(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScheduleFixed with id: {}" , id);

        ScheduleFixed foundScheduleFixed = scheduleFixedService.getById(id);
        LOGGER.debug("ScheduleFixed details with id: {}" , foundScheduleFixed);

        return foundScheduleFixed;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ScheduleFixed instance associated with the given id.")
    public ScheduleFixed editScheduleFixed(@PathVariable("id") Integer id, @RequestBody ScheduleFixed schedulefixed) throws EntityNotFoundException {
        LOGGER.debug("Editing ScheduleFixed with id: {}" , schedulefixed.getIdScheduleFixed());

        schedulefixed.setIdScheduleFixed(id);
        schedulefixed = scheduleFixedService.update(schedulefixed);
        LOGGER.debug("ScheduleFixed details with id: {}" , schedulefixed);

        return schedulefixed;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ScheduleFixed instance associated with the given id.")
    public boolean deleteScheduleFixed(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleFixed with id: {}" , id);

        ScheduleFixed deletedScheduleFixed = scheduleFixedService.delete(id);

        return deletedScheduleFixed != null;
    }
    /**
     * @deprecated Use {@link #findScheduleFixeds(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ScheduleFixed instances matching the search criteria.")
	public Page<ScheduleFixed> findScheduleFixeds( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ScheduleFixeds list");
		return scheduleFixedService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ScheduleFixed instances matching the search criteria.")
    public Page<ScheduleFixed> findScheduleFixeds(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ScheduleFixeds list");
    	return scheduleFixedService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportScheduleFixeds(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return scheduleFixedService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ScheduleFixed instances.")
	public Long countScheduleFixeds(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ScheduleFixeds");
		return scheduleFixedService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary>
        findAssociatedEmployeeSalaries(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id, "EmployeeSalary", "idScheduleFixed", pageable);
   }

    @RequestMapping(value="/{id:.+}/scheduleFixedDays", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the scheduleFixedDays instance associated with the given id.")
     public Page<ScheduleFixedDay>
        findAssociatedScheduleFixedDays(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated scheduleFixedDays");
        return scheduleFixedDayService.findAssociatedValues(id, "ScheduleFixedDay", "idScheduleFixed", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ScheduleFixedService instance
	 */
	protected void setScheduleFixedService(ScheduleFixedService service) {
		this.scheduleFixedService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
	protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ScheduleFixedDayService instance
	 */
	protected void setScheduleFixedDayService(ScheduleFixedDayService service) {
        this.scheduleFixedDayService = service;
    }
}

