/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.AssetDischargeDocument;
import com.testshared1.testdb_26may.ListAssetUnloaded;
import com.testshared1.testdb_26may.service.AssetDischargeDocumentService;
import com.testshared1.testdb_26may.service.ListAssetUnloadedService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AssetDischargeDocument.
 * @see AssetDischargeDocument
 */
@RestController("TestDB_26may.AssetDischargeDocumentController")
@RequestMapping("/TestDB_26may/AssetDischargeDocument")
@Api(description = "Exposes APIs to work with AssetDischargeDocument resource.", value = "AssetDischargeDocumentController")
public class AssetDischargeDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDischargeDocumentController.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetDischargeDocumentService")
    private AssetDischargeDocumentService assetDischargeDocumentService;

    @Autowired
    @Qualifier("TestDB_26may.ListAssetUnloadedService")
    private ListAssetUnloadedService listAssetUnloadedService;

    /**
     * @deprecated Use {@link #findAssetDischargeDocuments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AssetDischargeDocument instances matching the search criteria.")
    public Page<AssetDischargeDocument> findAssetDischargeDocuments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AssetDischargeDocuments list");
        return assetDischargeDocumentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssetDischargeDocument instances matching the search criteria.")
    public Page<AssetDischargeDocument> findAssetDischargeDocuments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssetDischargeDocuments list");
        return assetDischargeDocumentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssetDischargeDocuments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return assetDischargeDocumentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/listAssetUnloadeds", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetUnloadeds instance associated with the given id.")
    public Page<ListAssetUnloaded> findAssociatedListAssetUnloadeds(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listAssetUnloadeds");
        return listAssetUnloadedService.findAssociatedValues(id, "ListAssetUnloaded", "idAssetDischargeDocument", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetDischargeDocumentService instance
	 */
    protected void setAssetDischargeDocumentService(AssetDischargeDocumentService service) {
        this.assetDischargeDocumentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListAssetUnloadedService instance
	 */
    protected void setListAssetUnloadedService(ListAssetUnloadedService service) {
        this.listAssetUnloadedService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AssetDischargeDocument instance.")
    public AssetDischargeDocument createAssetDischargeDocument(@RequestBody AssetDischargeDocument assetdischargedocument) {
        LOGGER.debug("Create AssetDischargeDocument with information: {}", assetdischargedocument);
        assetdischargedocument = assetDischargeDocumentService.create(assetdischargedocument);
        LOGGER.debug("Created AssetDischargeDocument with information: {}", assetdischargedocument);
        return assetdischargedocument;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AssetDischargeDocument instances.")
    public Long countAssetDischargeDocuments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AssetDischargeDocuments");
        return assetDischargeDocumentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AssetDischargeDocument instance associated with the given id.")
    public AssetDischargeDocument getAssetDischargeDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetDischargeDocument with id: {}", id);
        AssetDischargeDocument foundAssetDischargeDocument = assetDischargeDocumentService.getById(id);
        LOGGER.debug("AssetDischargeDocument details with id: {}", foundAssetDischargeDocument);
        return foundAssetDischargeDocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AssetDischargeDocument instance associated with the given id.")
    public AssetDischargeDocument editAssetDischargeDocument(@PathVariable(value = "id") Integer id, @RequestBody AssetDischargeDocument assetdischargedocument) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetDischargeDocument with id: {}", assetdischargedocument.getIdAssetDischargeDocument());
        assetdischargedocument.setIdAssetDischargeDocument(id);
        assetdischargedocument = assetDischargeDocumentService.update(assetdischargedocument);
        LOGGER.debug("AssetDischargeDocument details with id: {}", assetdischargedocument);
        return assetdischargedocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AssetDischargeDocument instance associated with the given id.")
    public boolean deleteAssetDischargeDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetDischargeDocument with id: {}", id);
        AssetDischargeDocument deletedAssetDischargeDocument = assetDischargeDocumentService.delete(id);
        return deletedAssetDischargeDocument != null;
    }
}
