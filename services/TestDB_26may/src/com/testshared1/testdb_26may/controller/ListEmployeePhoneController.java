/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListEmployeePhone;
import com.testshared1.testdb_26may.service.ListEmployeePhoneService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ListEmployeePhone.
 * @see ListEmployeePhone
 */
@RestController("TestDB_26may.ListEmployeePhoneController")
@RequestMapping("/TestDB_26may/ListEmployeePhone")
@Api(description = "Exposes APIs to work with ListEmployeePhone resource.", value = "ListEmployeePhoneController")
public class ListEmployeePhoneController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListEmployeePhoneController.class);

    @Autowired
    @Qualifier("TestDB_26may.ListEmployeePhoneService")
    private ListEmployeePhoneService listEmployeePhoneService;

    /**
     * @deprecated Use {@link #findListEmployeePhones(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ListEmployeePhone instances matching the search criteria.")
    public Page<ListEmployeePhone> findListEmployeePhones(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListEmployeePhones list");
        return listEmployeePhoneService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListEmployeePhone instances matching the search criteria.")
    public Page<ListEmployeePhone> findListEmployeePhones(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListEmployeePhones list");
        return listEmployeePhoneService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListEmployeePhones(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return listEmployeePhoneService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListEmployeePhoneService instance
	 */
    protected void setListEmployeePhoneService(ListEmployeePhoneService service) {
        this.listEmployeePhoneService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ListEmployeePhone instance.")
    public ListEmployeePhone createListEmployeePhone(@RequestBody ListEmployeePhone listemployeephone) {
        LOGGER.debug("Create ListEmployeePhone with information: {}", listemployeephone);
        listemployeephone = listEmployeePhoneService.create(listemployeephone);
        LOGGER.debug("Created ListEmployeePhone with information: {}", listemployeephone);
        return listemployeephone;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ListEmployeePhone instances.")
    public Long countListEmployeePhones(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ListEmployeePhones");
        return listEmployeePhoneService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ListEmployeePhone instance associated with the given id.")
    public ListEmployeePhone getListEmployeePhone(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListEmployeePhone with id: {}", id);
        ListEmployeePhone foundListEmployeePhone = listEmployeePhoneService.getById(id);
        LOGGER.debug("ListEmployeePhone details with id: {}", foundListEmployeePhone);
        return foundListEmployeePhone;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ListEmployeePhone instance associated with the given id.")
    public ListEmployeePhone editListEmployeePhone(@PathVariable(value = "id") Integer id, @RequestBody ListEmployeePhone listemployeephone) throws EntityNotFoundException {
        LOGGER.debug("Editing ListEmployeePhone with id: {}", listemployeephone.getIdListEmployeePhone());
        listemployeephone.setIdListEmployeePhone(id);
        listemployeephone = listEmployeePhoneService.update(listemployeephone);
        LOGGER.debug("ListEmployeePhone details with id: {}", listemployeephone);
        return listemployeephone;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ListEmployeePhone instance associated with the given id.")
    public boolean deleteListEmployeePhone(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListEmployeePhone with id: {}", id);
        ListEmployeePhone deletedListEmployeePhone = listEmployeePhoneService.delete(id);
        return deletedListEmployeePhone != null;
    }
}
