/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeEducation;
import com.testshared1.testdb_26may.TypeEducation;
import com.testshared1.testdb_26may.service.EmployeeEducationService;
import com.testshared1.testdb_26may.service.TypeEducationService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypeEducation.
 * @see TypeEducation
 */
@RestController("TestDB_26may.TypeEducationController")
@RequestMapping("/TestDB_26may/TypeEducation")
@Api(description = "Exposes APIs to work with TypeEducation resource.", value = "TypeEducationController")
public class TypeEducationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEducationController.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEducationService")
    private TypeEducationService typeEducationService;

    @Autowired
    @Qualifier("TestDB_26may.EmployeeEducationService")
    private EmployeeEducationService employeeEducationService;

    /**
     * @deprecated Use {@link #findTypeEducations(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypeEducation instances matching the search criteria.")
    public Page<TypeEducation> findTypeEducations(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypeEducations list");
        return typeEducationService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeEducation instances matching the search criteria.")
    public Page<TypeEducation> findTypeEducations(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeEducations list");
        return typeEducationService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeEducations(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return typeEducationService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/employeeEducations", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeEducations instance associated with the given id.")
    public Page<EmployeeEducation> findAssociatedEmployeeEducations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeEducations");
        return employeeEducationService.findAssociatedValues(id, "EmployeeEducation", "idTypeEducation", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeEducationService instance
	 */
    protected void setTypeEducationService(TypeEducationService service) {
        this.typeEducationService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeEducationService instance
	 */
    protected void setEmployeeEducationService(EmployeeEducationService service) {
        this.employeeEducationService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypeEducation instance.")
    public TypeEducation createTypeEducation(@RequestBody TypeEducation typeeducation) {
        LOGGER.debug("Create TypeEducation with information: {}", typeeducation);
        typeeducation = typeEducationService.create(typeeducation);
        LOGGER.debug("Created TypeEducation with information: {}", typeeducation);
        return typeeducation;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypeEducation instances.")
    public Long countTypeEducations(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TypeEducations");
        return typeEducationService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypeEducation instance associated with the given id.")
    public TypeEducation getTypeEducation(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEducation with id: {}", id);
        TypeEducation foundTypeEducation = typeEducationService.getById(id);
        LOGGER.debug("TypeEducation details with id: {}", foundTypeEducation);
        return foundTypeEducation;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypeEducation instance associated with the given id.")
    public TypeEducation editTypeEducation(@PathVariable(value = "id") Integer id, @RequestBody TypeEducation typeeducation) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEducation with id: {}", typeeducation.getIdTypeEducation());
        typeeducation.setIdTypeEducation(id);
        typeeducation = typeEducationService.update(typeeducation);
        LOGGER.debug("TypeEducation details with id: {}", typeeducation);
        return typeeducation;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypeEducation instance associated with the given id.")
    public boolean deleteTypeEducation(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEducation with id: {}", id);
        TypeEducation deletedTypeEducation = typeEducationService.delete(id);
        return deletedTypeEducation != null;
    }
}
