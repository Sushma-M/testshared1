/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ApplicantAppointment;
import com.testshared1.testdb_26may.ApplicantFile;
import com.testshared1.testdb_26may.ApplicantNote;
import com.testshared1.testdb_26may.ApplicantToPosition;
import com.testshared1.testdb_26may.Employee;
import com.testshared1.testdb_26may.WorkPositionVacant;
import com.testshared1.testdb_26may.service.ApplicantAppointmentService;
import com.testshared1.testdb_26may.service.ApplicantFileService;
import com.testshared1.testdb_26may.service.ApplicantNoteService;
import com.testshared1.testdb_26may.service.ApplicantToPositionService;
import com.testshared1.testdb_26may.service.EmployeeService;
import com.testshared1.testdb_26may.service.WorkPositionVacantService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ApplicantToPosition.
 * @see ApplicantToPosition
 */
@RestController("TestDB_26may.ApplicantToPositionController")
@RequestMapping("/TestDB_26may/ApplicantToPosition")
@Api(description = "Exposes APIs to work with ApplicantToPosition resource.", value = "ApplicantToPositionController")
public class ApplicantToPositionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantToPositionController.class);

    @Autowired
    @Qualifier("TestDB_26may.ApplicantToPositionService")
    private ApplicantToPositionService applicantToPositionService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionVacantService")
    private WorkPositionVacantService workPositionVacantService;

    @Autowired
    @Qualifier("TestDB_26may.ApplicantNoteService")
    private ApplicantNoteService applicantNoteService;

    @Autowired
    @Qualifier("TestDB_26may.EmployeeService")
    private EmployeeService employeeService;

    @Autowired
    @Qualifier("TestDB_26may.ApplicantFileService")
    private ApplicantFileService applicantFileService;

    @Autowired
    @Qualifier("TestDB_26may.ApplicantAppointmentService")
    private ApplicantAppointmentService applicantAppointmentService;

    /**
     * @deprecated Use {@link #findApplicantToPositions(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ApplicantToPosition instances matching the search criteria.")
    public Page<ApplicantToPosition> findApplicantToPositions(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ApplicantToPositions list");
        return applicantToPositionService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ApplicantToPosition instances matching the search criteria.")
    public Page<ApplicantToPosition> findApplicantToPositions(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ApplicantToPositions list");
        return applicantToPositionService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportApplicantToPositions(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return applicantToPositionService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositionVacantsForFkAspiranteAsignado", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionVacantsForFkAspiranteAsignado instance associated with the given id.")
    public Page<WorkPositionVacant> findAssociatedWorkPositionVacantsForFkAspiranteAsignado(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositionVacantsForFkAspiranteAsignado");
        return workPositionVacantService.findAssociatedValues(id, "WorkPositionVacant", "idApplicantToPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/applicantFiles", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantFiles instance associated with the given id.")
    public Page<ApplicantFile> findAssociatedApplicantFiles(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated applicantFiles");
        return applicantFileService.findAssociatedValues(id, "ApplicantFile", "idApplicantToPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/employees", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
    public Page<Employee> findAssociatedEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id, "Employee", "idApplicantToPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/applicantNotes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantNotes instance associated with the given id.")
    public Page<ApplicantNote> findAssociatedApplicantNotes(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated applicantNotes");
        return applicantNoteService.findAssociatedValues(id, "ApplicantNote", "idApplicantToPosition", pageable);
    }

    @RequestMapping(value = "/{id:.+}/applicantAppointments", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantAppointments instance associated with the given id.")
    public Page<ApplicantAppointment> findAssociatedApplicantAppointments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated applicantAppointments");
        return applicantAppointmentService.findAssociatedValues(id, "ApplicantAppointment", "idApplicantToPosition", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantToPositionService instance
	 */
    protected void setApplicantToPositionService(ApplicantToPositionService service) {
        this.applicantToPositionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionVacantService instance
	 */
    protected void setWorkPositionVacantService(WorkPositionVacantService service) {
        this.workPositionVacantService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantNoteService instance
	 */
    protected void setApplicantNoteService(ApplicantNoteService service) {
        this.applicantNoteService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeService instance
	 */
    protected void setEmployeeService(EmployeeService service) {
        this.employeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantFileService instance
	 */
    protected void setApplicantFileService(ApplicantFileService service) {
        this.applicantFileService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantAppointmentService instance
	 */
    protected void setApplicantAppointmentService(ApplicantAppointmentService service) {
        this.applicantAppointmentService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ApplicantToPosition instance.")
    public ApplicantToPosition createApplicantToPosition(@RequestBody ApplicantToPosition applicanttoposition) {
        LOGGER.debug("Create ApplicantToPosition with information: {}", applicanttoposition);
        applicanttoposition = applicantToPositionService.create(applicanttoposition);
        LOGGER.debug("Created ApplicantToPosition with information: {}", applicanttoposition);
        return applicanttoposition;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ApplicantToPosition instances.")
    public Long countApplicantToPositions(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ApplicantToPositions");
        return applicantToPositionService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ApplicantToPosition instance associated with the given id.")
    public ApplicantToPosition getApplicantToPosition(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ApplicantToPosition with id: {}", id);
        ApplicantToPosition foundApplicantToPosition = applicantToPositionService.getById(id);
        LOGGER.debug("ApplicantToPosition details with id: {}", foundApplicantToPosition);
        return foundApplicantToPosition;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ApplicantToPosition instance associated with the given id.")
    public ApplicantToPosition editApplicantToPosition(@PathVariable(value = "id") Integer id, @RequestBody ApplicantToPosition applicanttoposition) throws EntityNotFoundException {
        LOGGER.debug("Editing ApplicantToPosition with id: {}", applicanttoposition.getIdApplicantToPosition());
        applicanttoposition.setIdApplicantToPosition(id);
        applicanttoposition = applicantToPositionService.update(applicanttoposition);
        LOGGER.debug("ApplicantToPosition details with id: {}", applicanttoposition);
        return applicanttoposition;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ApplicantToPosition instance associated with the given id.")
    public boolean deleteApplicantToPosition(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantToPosition with id: {}", id);
        ApplicantToPosition deletedApplicantToPosition = applicantToPositionService.delete(id);
        return deletedApplicantToPosition != null;
    }
}
