/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.AssetAssignDocument;
import com.testshared1.testdb_26may.ListAssetLoaded;
import com.testshared1.testdb_26may.service.AssetAssignDocumentService;
import com.testshared1.testdb_26may.service.ListAssetLoadedService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AssetAssignDocument.
 * @see AssetAssignDocument
 */
@RestController("TestDB_26may.AssetAssignDocumentController")
@RequestMapping("/TestDB_26may/AssetAssignDocument")
@Api(description = "Exposes APIs to work with AssetAssignDocument resource.", value = "AssetAssignDocumentController")
public class AssetAssignDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetAssignDocumentController.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetAssignDocumentService")
    private AssetAssignDocumentService assetAssignDocumentService;

    @Autowired
    @Qualifier("TestDB_26may.ListAssetLoadedService")
    private ListAssetLoadedService listAssetLoadedService;

    /**
     * @deprecated Use {@link #findAssetAssignDocuments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AssetAssignDocument instances matching the search criteria.")
    public Page<AssetAssignDocument> findAssetAssignDocuments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AssetAssignDocuments list");
        return assetAssignDocumentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssetAssignDocument instances matching the search criteria.")
    public Page<AssetAssignDocument> findAssetAssignDocuments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssetAssignDocuments list");
        return assetAssignDocumentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssetAssignDocuments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return assetAssignDocumentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/listAssetLoadeds", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetLoadeds instance associated with the given id.")
    public Page<ListAssetLoaded> findAssociatedListAssetLoadeds(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listAssetLoadeds");
        return listAssetLoadedService.findAssociatedValues(id, "ListAssetLoaded", "idAssetAssignDocument", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetAssignDocumentService instance
	 */
    protected void setAssetAssignDocumentService(AssetAssignDocumentService service) {
        this.assetAssignDocumentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListAssetLoadedService instance
	 */
    protected void setListAssetLoadedService(ListAssetLoadedService service) {
        this.listAssetLoadedService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AssetAssignDocument instance.")
    public AssetAssignDocument createAssetAssignDocument(@RequestBody AssetAssignDocument assetassigndocument) {
        LOGGER.debug("Create AssetAssignDocument with information: {}", assetassigndocument);
        assetassigndocument = assetAssignDocumentService.create(assetassigndocument);
        LOGGER.debug("Created AssetAssignDocument with information: {}", assetassigndocument);
        return assetassigndocument;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AssetAssignDocument instances.")
    public Long countAssetAssignDocuments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AssetAssignDocuments");
        return assetAssignDocumentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AssetAssignDocument instance associated with the given id.")
    public AssetAssignDocument getAssetAssignDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetAssignDocument with id: {}", id);
        AssetAssignDocument foundAssetAssignDocument = assetAssignDocumentService.getById(id);
        LOGGER.debug("AssetAssignDocument details with id: {}", foundAssetAssignDocument);
        return foundAssetAssignDocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AssetAssignDocument instance associated with the given id.")
    public AssetAssignDocument editAssetAssignDocument(@PathVariable(value = "id") Integer id, @RequestBody AssetAssignDocument assetassigndocument) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetAssignDocument with id: {}", assetassigndocument.getIdAssetAssignDocument());
        assetassigndocument.setIdAssetAssignDocument(id);
        assetassigndocument = assetAssignDocumentService.update(assetassigndocument);
        LOGGER.debug("AssetAssignDocument details with id: {}", assetassigndocument);
        return assetassigndocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AssetAssignDocument instance associated with the given id.")
    public boolean deleteAssetAssignDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetAssignDocument with id: {}", id);
        AssetAssignDocument deletedAssetAssignDocument = assetAssignDocumentService.delete(id);
        return deletedAssetAssignDocument != null;
    }
}
