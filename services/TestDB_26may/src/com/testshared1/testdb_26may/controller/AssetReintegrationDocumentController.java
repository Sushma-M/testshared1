/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.AssetReintegrationDocument;
import com.testshared1.testdb_26may.ListAssetReintegrated;
import com.testshared1.testdb_26may.service.AssetReintegrationDocumentService;
import com.testshared1.testdb_26may.service.ListAssetReintegratedService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class AssetReintegrationDocument.
 * @see AssetReintegrationDocument
 */
@RestController("TestDB_26may.AssetReintegrationDocumentController")
@RequestMapping("/TestDB_26may/AssetReintegrationDocument")
@Api(description = "Exposes APIs to work with AssetReintegrationDocument resource.", value = "AssetReintegrationDocumentController")
public class AssetReintegrationDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetReintegrationDocumentController.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetReintegrationDocumentService")
    private AssetReintegrationDocumentService assetReintegrationDocumentService;

    @Autowired
    @Qualifier("TestDB_26may.ListAssetReintegratedService")
    private ListAssetReintegratedService listAssetReintegratedService;

    /**
     * @deprecated Use {@link #findAssetReintegrationDocuments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of AssetReintegrationDocument instances matching the search criteria.")
    public Page<AssetReintegrationDocument> findAssetReintegrationDocuments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AssetReintegrationDocuments list");
        return assetReintegrationDocumentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of AssetReintegrationDocument instances matching the search criteria.")
    public Page<AssetReintegrationDocument> findAssetReintegrationDocuments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AssetReintegrationDocuments list");
        return assetReintegrationDocumentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssetReintegrationDocuments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return assetReintegrationDocumentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/listAssetReintegrateds", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetReintegrateds instance associated with the given id.")
    public Page<ListAssetReintegrated> findAssociatedListAssetReintegrateds(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listAssetReintegrateds");
        return listAssetReintegratedService.findAssociatedValues(id, "ListAssetReintegrated", "idAssetReintegrationDocument", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssetReintegrationDocumentService instance
	 */
    protected void setAssetReintegrationDocumentService(AssetReintegrationDocumentService service) {
        this.assetReintegrationDocumentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListAssetReintegratedService instance
	 */
    protected void setListAssetReintegratedService(ListAssetReintegratedService service) {
        this.listAssetReintegratedService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new AssetReintegrationDocument instance.")
    public AssetReintegrationDocument createAssetReintegrationDocument(@RequestBody AssetReintegrationDocument assetreintegrationdocument) {
        LOGGER.debug("Create AssetReintegrationDocument with information: {}", assetreintegrationdocument);
        assetreintegrationdocument = assetReintegrationDocumentService.create(assetreintegrationdocument);
        LOGGER.debug("Created AssetReintegrationDocument with information: {}", assetreintegrationdocument);
        return assetreintegrationdocument;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of AssetReintegrationDocument instances.")
    public Long countAssetReintegrationDocuments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting AssetReintegrationDocuments");
        return assetReintegrationDocumentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the AssetReintegrationDocument instance associated with the given id.")
    public AssetReintegrationDocument getAssetReintegrationDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetReintegrationDocument with id: {}", id);
        AssetReintegrationDocument foundAssetReintegrationDocument = assetReintegrationDocumentService.getById(id);
        LOGGER.debug("AssetReintegrationDocument details with id: {}", foundAssetReintegrationDocument);
        return foundAssetReintegrationDocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the AssetReintegrationDocument instance associated with the given id.")
    public AssetReintegrationDocument editAssetReintegrationDocument(@PathVariable(value = "id") Integer id, @RequestBody AssetReintegrationDocument assetreintegrationdocument) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetReintegrationDocument with id: {}", assetreintegrationdocument.getIdAssetReintegrationDocument());
        assetreintegrationdocument.setIdAssetReintegrationDocument(id);
        assetreintegrationdocument = assetReintegrationDocumentService.update(assetreintegrationdocument);
        LOGGER.debug("AssetReintegrationDocument details with id: {}", assetreintegrationdocument);
        return assetreintegrationdocument;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the AssetReintegrationDocument instance associated with the given id.")
    public boolean deleteAssetReintegrationDocument(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetReintegrationDocument with id: {}", id);
        AssetReintegrationDocument deletedAssetReintegrationDocument = assetReintegrationDocumentService.delete(id);
        return deletedAssetReintegrationDocument != null;
    }
}
