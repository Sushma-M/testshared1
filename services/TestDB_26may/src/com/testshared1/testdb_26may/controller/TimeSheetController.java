/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.TimeSheet;
import com.testshared1.testdb_26may.service.TimeSheetService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeSheet.
 * @see TimeSheet
 */
@RestController("TestDB_26may.TimeSheetController")
@RequestMapping("/TestDB_26may/TimeSheet")
@Api(description = "Exposes APIs to work with TimeSheet resource.", value = "TimeSheetController")
public class TimeSheetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeSheetController.class);

    @Autowired
    @Qualifier("TestDB_26may.TimeSheetService")
    private TimeSheetService timeSheetService;

    /**
     * @deprecated Use {@link #findTimeSheets(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeSheet instances matching the search criteria.")
    public Page<TimeSheet> findTimeSheets(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeSheets list");
        return timeSheetService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeSheet instances matching the search criteria.")
    public Page<TimeSheet> findTimeSheets(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TimeSheets list");
        return timeSheetService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTimeSheets(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return timeSheetService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TimeSheetService instance
	 */
    protected void setTimeSheetService(TimeSheetService service) {
        this.timeSheetService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeSheet instance.")
    public TimeSheet createTimeSheet(@RequestBody TimeSheet timesheet) {
        LOGGER.debug("Create TimeSheet with information: {}", timesheet);
        timesheet = timeSheetService.create(timesheet);
        LOGGER.debug("Created TimeSheet with information: {}", timesheet);
        return timesheet;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeSheet instances.")
    public Long countTimeSheets(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TimeSheets");
        return timeSheetService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeSheet instance associated with the given id.")
    public TimeSheet getTimeSheet(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeSheet with id: {}", id);
        TimeSheet foundTimeSheet = timeSheetService.getById(id);
        LOGGER.debug("TimeSheet details with id: {}", foundTimeSheet);
        return foundTimeSheet;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeSheet instance associated with the given id.")
    public TimeSheet editTimeSheet(@PathVariable(value = "id") Integer id, @RequestBody TimeSheet timesheet) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeSheet with id: {}", timesheet.getIdTimeSheet());
        timesheet.setIdTimeSheet(id);
        timesheet = timeSheetService.update(timesheet);
        LOGGER.debug("TimeSheet details with id: {}", timesheet);
        return timesheet;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeSheet instance associated with the given id.")
    public boolean deleteTimeSheet(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeSheet with id: {}", id);
        TimeSheet deletedTimeSheet = timeSheetService.delete(id);
        return deletedTimeSheet != null;
    }
}
