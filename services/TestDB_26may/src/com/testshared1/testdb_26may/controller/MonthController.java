/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.Month;
import com.testshared1.testdb_26may.service.MonthService;


/**
 * Controller object for domain model class Month.
 * @see Month
 */
@RestController("TestDB_26may.MonthController")
@Api(value = "/TestDB_26may/Month", description = "Exposes APIs to work with Month resource.")
@RequestMapping("/TestDB_26may/Month")
public class MonthController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MonthController.class);

    @Autowired
	@Qualifier("TestDB_26may.MonthService")
	private MonthService monthService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Month instance.")
	public Month createMonth(@RequestBody Month month) {
		LOGGER.debug("Create Month with information: {}" , month);

		month = monthService.create(month);
		LOGGER.debug("Created Month with information: {}" , month);

	    return month;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Month instance associated with the given id.")
    public Month getMonth(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Month with id: {}" , id);

        Month foundMonth = monthService.getById(id);
        LOGGER.debug("Month details with id: {}" , foundMonth);

        return foundMonth;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Month instance associated with the given id.")
    public Month editMonth(@PathVariable("id") Integer id, @RequestBody Month month) throws EntityNotFoundException {
        LOGGER.debug("Editing Month with id: {}" , month.getIdMonth());

        month.setIdMonth(id);
        month = monthService.update(month);
        LOGGER.debug("Month details with id: {}" , month);

        return month;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Month instance associated with the given id.")
    public boolean deleteMonth(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Month with id: {}" , id);

        Month deletedMonth = monthService.delete(id);

        return deletedMonth != null;
    }
    /**
     * @deprecated Use {@link #findMonths(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Month instances matching the search criteria.")
	public Page<Month> findMonths( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Months list");
		return monthService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Month instances matching the search criteria.")
    public Page<Month> findMonths(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Months list");
    	return monthService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportMonths(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return monthService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Month instances.")
	public Long countMonths(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Months");
		return monthService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MonthService instance
	 */
	protected void setMonthService(MonthService service) {
		this.monthService = service;
	}

}

