/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.ListPeriodicBonusEmployee;
import com.testshared1.testdb_26may.service.ListPeriodicBonusEmployeeService;


/**
 * Controller object for domain model class ListPeriodicBonusEmployee.
 * @see ListPeriodicBonusEmployee
 */
@RestController("TestDB_26may.ListPeriodicBonusEmployeeController")
@Api(value = "/TestDB_26may/ListPeriodicBonusEmployee", description = "Exposes APIs to work with ListPeriodicBonusEmployee resource.")
@RequestMapping("/TestDB_26may/ListPeriodicBonusEmployee")
public class ListPeriodicBonusEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicBonusEmployeeController.class);

    @Autowired
	@Qualifier("TestDB_26may.ListPeriodicBonusEmployeeService")
	private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListPeriodicBonusEmployee instance.")
	public ListPeriodicBonusEmployee createListPeriodicBonusEmployee(@RequestBody ListPeriodicBonusEmployee listperiodicbonusemployee) {
		LOGGER.debug("Create ListPeriodicBonusEmployee with information: {}" , listperiodicbonusemployee);

		listperiodicbonusemployee = listPeriodicBonusEmployeeService.create(listperiodicbonusemployee);
		LOGGER.debug("Created ListPeriodicBonusEmployee with information: {}" , listperiodicbonusemployee);

	    return listperiodicbonusemployee;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListPeriodicBonusEmployee instance associated with the given id.")
    public ListPeriodicBonusEmployee getListPeriodicBonusEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListPeriodicBonusEmployee with id: {}" , id);

        ListPeriodicBonusEmployee foundListPeriodicBonusEmployee = listPeriodicBonusEmployeeService.getById(id);
        LOGGER.debug("ListPeriodicBonusEmployee details with id: {}" , foundListPeriodicBonusEmployee);

        return foundListPeriodicBonusEmployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListPeriodicBonusEmployee instance associated with the given id.")
    public ListPeriodicBonusEmployee editListPeriodicBonusEmployee(@PathVariable("id") Integer id, @RequestBody ListPeriodicBonusEmployee listperiodicbonusemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing ListPeriodicBonusEmployee with id: {}" , listperiodicbonusemployee.getIdListPeriodicBonusEmployee());

        listperiodicbonusemployee.setIdListPeriodicBonusEmployee(id);
        listperiodicbonusemployee = listPeriodicBonusEmployeeService.update(listperiodicbonusemployee);
        LOGGER.debug("ListPeriodicBonusEmployee details with id: {}" , listperiodicbonusemployee);

        return listperiodicbonusemployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListPeriodicBonusEmployee instance associated with the given id.")
    public boolean deleteListPeriodicBonusEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicBonusEmployee with id: {}" , id);

        ListPeriodicBonusEmployee deletedListPeriodicBonusEmployee = listPeriodicBonusEmployeeService.delete(id);

        return deletedListPeriodicBonusEmployee != null;
    }
    /**
     * @deprecated Use {@link #findListPeriodicBonusEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListPeriodicBonusEmployee instances matching the search criteria.")
	public Page<ListPeriodicBonusEmployee> findListPeriodicBonusEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListPeriodicBonusEmployees list");
		return listPeriodicBonusEmployeeService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListPeriodicBonusEmployee instances matching the search criteria.")
    public Page<ListPeriodicBonusEmployee> findListPeriodicBonusEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListPeriodicBonusEmployees list");
    	return listPeriodicBonusEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListPeriodicBonusEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return listPeriodicBonusEmployeeService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListPeriodicBonusEmployee instances.")
	public Long countListPeriodicBonusEmployees(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ListPeriodicBonusEmployees");
		return listPeriodicBonusEmployeeService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListPeriodicBonusEmployeeService instance
	 */
	protected void setListPeriodicBonusEmployeeService(ListPeriodicBonusEmployeeService service) {
		this.listPeriodicBonusEmployeeService = service;
	}

}

