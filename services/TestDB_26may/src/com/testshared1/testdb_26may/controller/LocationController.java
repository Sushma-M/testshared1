/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.CompanyDepartment;
import com.testshared1.testdb_26may.Location;
import com.testshared1.testdb_26may.service.CompanyDepartmentService;
import com.testshared1.testdb_26may.service.LocationService;


/**
 * Controller object for domain model class Location.
 * @see Location
 */
@RestController("TestDB_26may.LocationController")
@Api(value = "/TestDB_26may/Location", description = "Exposes APIs to work with Location resource.")
@RequestMapping("/TestDB_26may/Location")
public class LocationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LocationController.class);

    @Autowired
	@Qualifier("TestDB_26may.LocationService")
	private LocationService locationService;

    @Autowired
	@Qualifier("TestDB_26may.CompanyDepartmentService")
	private CompanyDepartmentService companyDepartmentService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Location instance.")
	public Location createLocation(@RequestBody Location location) {
		LOGGER.debug("Create Location with information: {}" , location);

		location = locationService.create(location);
		LOGGER.debug("Created Location with information: {}" , location);

	    return location;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Location instance associated with the given id.")
    public Location getLocation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Location with id: {}" , id);

        Location foundLocation = locationService.getById(id);
        LOGGER.debug("Location details with id: {}" , foundLocation);

        return foundLocation;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Location instance associated with the given id.")
    public Location editLocation(@PathVariable("id") Integer id, @RequestBody Location location) throws EntityNotFoundException {
        LOGGER.debug("Editing Location with id: {}" , location.getIdLocation());

        location.setIdLocation(id);
        location = locationService.update(location);
        LOGGER.debug("Location details with id: {}" , location);

        return location;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Location instance associated with the given id.")
    public boolean deleteLocation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Location with id: {}" , id);

        Location deletedLocation = locationService.delete(id);

        return deletedLocation != null;
    }
    /**
     * @deprecated Use {@link #findLocations(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Location instances matching the search criteria.")
	public Page<Location> findLocations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Locations list");
		return locationService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Location instances matching the search criteria.")
    public Page<Location> findLocations(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Locations list");
    	return locationService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportLocations(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return locationService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Location instances.")
	public Long countLocations(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Locations");
		return locationService.count(query);
	}

    @RequestMapping(value="/{id:.+}/companyDepartments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the companyDepartments instance associated with the given id.")
     public Page<CompanyDepartment>
        findAssociatedCompanyDepartments(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated companyDepartments");
        return companyDepartmentService.findAssociatedValues(id, "CompanyDepartment", "idLocation", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LocationService instance
	 */
	protected void setLocationService(LocationService service) {
		this.locationService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompanyDepartmentService instance
	 */
	protected void setCompanyDepartmentService(CompanyDepartmentService service) {
        this.companyDepartmentService = service;
    }
}

