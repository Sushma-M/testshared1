/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.BonusEventual;
import com.testshared1.testdb_26may.service.BonusEventualService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BonusEventual.
 * @see BonusEventual
 */
@RestController("TestDB_26may.BonusEventualController")
@RequestMapping("/TestDB_26may/BonusEventual")
@Api(description = "Exposes APIs to work with BonusEventual resource.", value = "BonusEventualController")
public class BonusEventualController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BonusEventualController.class);

    @Autowired
    @Qualifier("TestDB_26may.BonusEventualService")
    private BonusEventualService bonusEventualService;

    /**
     * @deprecated Use {@link #findBonusEventuals(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BonusEventual instances matching the search criteria.")
    public Page<BonusEventual> findBonusEventuals(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BonusEventuals list");
        return bonusEventualService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BonusEventual instances matching the search criteria.")
    public Page<BonusEventual> findBonusEventuals(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BonusEventuals list");
        return bonusEventualService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBonusEventuals(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return bonusEventualService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BonusEventualService instance
	 */
    protected void setBonusEventualService(BonusEventualService service) {
        this.bonusEventualService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BonusEventual instance.")
    public BonusEventual createBonusEventual(@RequestBody BonusEventual bonuseventual) {
        LOGGER.debug("Create BonusEventual with information: {}", bonuseventual);
        bonuseventual = bonusEventualService.create(bonuseventual);
        LOGGER.debug("Created BonusEventual with information: {}", bonuseventual);
        return bonuseventual;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BonusEventual instances.")
    public Long countBonusEventuals(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting BonusEventuals");
        return bonusEventualService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BonusEventual instance associated with the given id.")
    public BonusEventual getBonusEventual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BonusEventual with id: {}", id);
        BonusEventual foundBonusEventual = bonusEventualService.getById(id);
        LOGGER.debug("BonusEventual details with id: {}", foundBonusEventual);
        return foundBonusEventual;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BonusEventual instance associated with the given id.")
    public BonusEventual editBonusEventual(@PathVariable(value = "id") Integer id, @RequestBody BonusEventual bonuseventual) throws EntityNotFoundException {
        LOGGER.debug("Editing BonusEventual with id: {}", bonuseventual.getIdBonusEventual());
        bonuseventual.setIdBonusEventual(id);
        bonuseventual = bonusEventualService.update(bonuseventual);
        LOGGER.debug("BonusEventual details with id: {}", bonuseventual);
        return bonuseventual;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BonusEventual instance associated with the given id.")
    public boolean deleteBonusEventual(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BonusEventual with id: {}", id);
        BonusEventual deletedBonusEventual = bonusEventualService.delete(id);
        return deletedBonusEventual != null;
    }
}
