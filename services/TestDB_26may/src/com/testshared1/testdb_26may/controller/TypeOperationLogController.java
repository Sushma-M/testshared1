/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.LogOperation;
import com.testshared1.testdb_26may.TypeOperationLog;
import com.testshared1.testdb_26may.service.LogOperationService;
import com.testshared1.testdb_26may.service.TypeOperationLogService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypeOperationLog.
 * @see TypeOperationLog
 */
@RestController("TestDB_26may.TypeOperationLogController")
@RequestMapping("/TestDB_26may/TypeOperationLog")
@Api(description = "Exposes APIs to work with TypeOperationLog resource.", value = "TypeOperationLogController")
public class TypeOperationLogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationLogController.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeOperationLogService")
    private TypeOperationLogService typeOperationLogService;

    @Autowired
    @Qualifier("TestDB_26may.LogOperationService")
    private LogOperationService logOperationService;

    /**
     * @deprecated Use {@link #findTypeOperationLogs(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypeOperationLog instances matching the search criteria.")
    public Page<TypeOperationLog> findTypeOperationLogs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypeOperationLogs list");
        return typeOperationLogService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeOperationLog instances matching the search criteria.")
    public Page<TypeOperationLog> findTypeOperationLogs(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeOperationLogs list");
        return typeOperationLogService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeOperationLogs(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return typeOperationLogService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/logOperations", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the logOperations instance associated with the given id.")
    public Page<LogOperation> findAssociatedLogOperations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated logOperations");
        return logOperationService.findAssociatedValues(id, "LogOperation", "idTypeOperationLog", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeOperationLogService instance
	 */
    protected void setTypeOperationLogService(TypeOperationLogService service) {
        this.typeOperationLogService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LogOperationService instance
	 */
    protected void setLogOperationService(LogOperationService service) {
        this.logOperationService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypeOperationLog instance.")
    public TypeOperationLog createTypeOperationLog(@RequestBody TypeOperationLog typeoperationlog) {
        LOGGER.debug("Create TypeOperationLog with information: {}", typeoperationlog);
        typeoperationlog = typeOperationLogService.create(typeoperationlog);
        LOGGER.debug("Created TypeOperationLog with information: {}", typeoperationlog);
        return typeoperationlog;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypeOperationLog instances.")
    public Long countTypeOperationLogs(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TypeOperationLogs");
        return typeOperationLogService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypeOperationLog instance associated with the given id.")
    public TypeOperationLog getTypeOperationLog(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeOperationLog with id: {}", id);
        TypeOperationLog foundTypeOperationLog = typeOperationLogService.getById(id);
        LOGGER.debug("TypeOperationLog details with id: {}", foundTypeOperationLog);
        return foundTypeOperationLog;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypeOperationLog instance associated with the given id.")
    public TypeOperationLog editTypeOperationLog(@PathVariable(value = "id") Integer id, @RequestBody TypeOperationLog typeoperationlog) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeOperationLog with id: {}", typeoperationlog.getIdTypeOperationLog());
        typeoperationlog.setIdTypeOperationLog(id);
        typeoperationlog = typeOperationLogService.update(typeoperationlog);
        LOGGER.debug("TypeOperationLog details with id: {}", typeoperationlog);
        return typeoperationlog;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypeOperationLog instance associated with the given id.")
    public boolean deleteTypeOperationLog(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeOperationLog with id: {}", id);
        TypeOperationLog deletedTypeOperationLog = typeOperationLogService.delete(id);
        return deletedTypeOperationLog != null;
    }
}
