/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.JustifiedTravelExpenseFile;
import com.testshared1.testdb_26may.service.JustifiedTravelExpenseFileService;


/**
 * Controller object for domain model class JustifiedTravelExpenseFile.
 * @see JustifiedTravelExpenseFile
 */
@RestController("TestDB_26may.JustifiedTravelExpenseFileController")
@Api(value = "/TestDB_26may/JustifiedTravelExpenseFile", description = "Exposes APIs to work with JustifiedTravelExpenseFile resource.")
@RequestMapping("/TestDB_26may/JustifiedTravelExpenseFile")
public class JustifiedTravelExpenseFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedTravelExpenseFileController.class);

    @Autowired
	@Qualifier("TestDB_26may.JustifiedTravelExpenseFileService")
	private JustifiedTravelExpenseFileService justifiedTravelExpenseFileService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new JustifiedTravelExpenseFile instance.")
	public JustifiedTravelExpenseFile createJustifiedTravelExpenseFile(@RequestBody JustifiedTravelExpenseFile justifiedtravelexpensefile) {
		LOGGER.debug("Create JustifiedTravelExpenseFile with information: {}" , justifiedtravelexpensefile);

		justifiedtravelexpensefile = justifiedTravelExpenseFileService.create(justifiedtravelexpensefile);
		LOGGER.debug("Created JustifiedTravelExpenseFile with information: {}" , justifiedtravelexpensefile);

	    return justifiedtravelexpensefile;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the JustifiedTravelExpenseFile instance associated with the given id.")
    public JustifiedTravelExpenseFile getJustifiedTravelExpenseFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting JustifiedTravelExpenseFile with id: {}" , id);

        JustifiedTravelExpenseFile foundJustifiedTravelExpenseFile = justifiedTravelExpenseFileService.getById(id);
        LOGGER.debug("JustifiedTravelExpenseFile details with id: {}" , foundJustifiedTravelExpenseFile);

        return foundJustifiedTravelExpenseFile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the JustifiedTravelExpenseFile instance associated with the given id.")
    public JustifiedTravelExpenseFile editJustifiedTravelExpenseFile(@PathVariable("id") Integer id, @RequestBody JustifiedTravelExpenseFile justifiedtravelexpensefile) throws EntityNotFoundException {
        LOGGER.debug("Editing JustifiedTravelExpenseFile with id: {}" , justifiedtravelexpensefile.getIdJustifiedTravelExpenseFile());

        justifiedtravelexpensefile.setIdJustifiedTravelExpenseFile(id);
        justifiedtravelexpensefile = justifiedTravelExpenseFileService.update(justifiedtravelexpensefile);
        LOGGER.debug("JustifiedTravelExpenseFile details with id: {}" , justifiedtravelexpensefile);

        return justifiedtravelexpensefile;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the JustifiedTravelExpenseFile instance associated with the given id.")
    public boolean deleteJustifiedTravelExpenseFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedTravelExpenseFile with id: {}" , id);

        JustifiedTravelExpenseFile deletedJustifiedTravelExpenseFile = justifiedTravelExpenseFileService.delete(id);

        return deletedJustifiedTravelExpenseFile != null;
    }
    /**
     * @deprecated Use {@link #findJustifiedTravelExpenseFiles(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of JustifiedTravelExpenseFile instances matching the search criteria.")
	public Page<JustifiedTravelExpenseFile> findJustifiedTravelExpenseFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering JustifiedTravelExpenseFiles list");
		return justifiedTravelExpenseFileService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of JustifiedTravelExpenseFile instances matching the search criteria.")
    public Page<JustifiedTravelExpenseFile> findJustifiedTravelExpenseFiles(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering JustifiedTravelExpenseFiles list");
    	return justifiedTravelExpenseFileService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportJustifiedTravelExpenseFiles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return justifiedTravelExpenseFileService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of JustifiedTravelExpenseFile instances.")
	public Long countJustifiedTravelExpenseFiles(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting JustifiedTravelExpenseFiles");
		return justifiedTravelExpenseFileService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JustifiedTravelExpenseFileService instance
	 */
	protected void setJustifiedTravelExpenseFileService(JustifiedTravelExpenseFileService service) {
		this.justifiedTravelExpenseFileService = service;
	}

}

