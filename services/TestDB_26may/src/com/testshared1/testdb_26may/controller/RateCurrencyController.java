/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.RateCurrency;
import com.testshared1.testdb_26may.service.RateCurrencyService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class RateCurrency.
 * @see RateCurrency
 */
@RestController("TestDB_26may.RateCurrencyController")
@RequestMapping("/TestDB_26may/RateCurrency")
@Api(description = "Exposes APIs to work with RateCurrency resource.", value = "RateCurrencyController")
public class RateCurrencyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RateCurrencyController.class);

    @Autowired
    @Qualifier("TestDB_26may.RateCurrencyService")
    private RateCurrencyService rateCurrencyService;

    /**
     * @deprecated Use {@link #findRateCurrencies(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of RateCurrency instances matching the search criteria.")
    public Page<RateCurrency> findRateCurrencies(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RateCurrencies list");
        return rateCurrencyService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of RateCurrency instances matching the search criteria.")
    public Page<RateCurrency> findRateCurrencies(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RateCurrencies list");
        return rateCurrencyService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportRateCurrencies(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return rateCurrencyService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RateCurrencyService instance
	 */
    protected void setRateCurrencyService(RateCurrencyService service) {
        this.rateCurrencyService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new RateCurrency instance.")
    public RateCurrency createRateCurrency(@RequestBody RateCurrency ratecurrency) {
        LOGGER.debug("Create RateCurrency with information: {}", ratecurrency);
        ratecurrency = rateCurrencyService.create(ratecurrency);
        LOGGER.debug("Created RateCurrency with information: {}", ratecurrency);
        return ratecurrency;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of RateCurrency instances.")
    public Long countRateCurrencies(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting RateCurrencies");
        return rateCurrencyService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the RateCurrency instance associated with the given id.")
    public RateCurrency getRateCurrency(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RateCurrency with id: {}", id);
        RateCurrency foundRateCurrency = rateCurrencyService.getById(id);
        LOGGER.debug("RateCurrency details with id: {}", foundRateCurrency);
        return foundRateCurrency;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the RateCurrency instance associated with the given id.")
    public RateCurrency editRateCurrency(@PathVariable(value = "id") Integer id, @RequestBody RateCurrency ratecurrency) throws EntityNotFoundException {
        LOGGER.debug("Editing RateCurrency with id: {}", ratecurrency.getIdRateCurrency());
        ratecurrency.setIdRateCurrency(id);
        ratecurrency = rateCurrencyService.update(ratecurrency);
        LOGGER.debug("RateCurrency details with id: {}", ratecurrency);
        return ratecurrency;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the RateCurrency instance associated with the given id.")
    public boolean deleteRateCurrency(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RateCurrency with id: {}", id);
        RateCurrency deletedRateCurrency = rateCurrencyService.delete(id);
        return deletedRateCurrency != null;
    }
}
