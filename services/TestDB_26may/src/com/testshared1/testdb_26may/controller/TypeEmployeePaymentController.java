/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.TypeEmployeePayment;
import com.testshared1.testdb_26may.service.TypeEmployeePaymentService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypeEmployeePayment.
 * @see TypeEmployeePayment
 */
@RestController("TestDB_26may.TypeEmployeePaymentController")
@RequestMapping("/TestDB_26may/TypeEmployeePayment")
@Api(description = "Exposes APIs to work with TypeEmployeePayment resource.", value = "TypeEmployeePaymentController")
public class TypeEmployeePaymentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentController.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEmployeePaymentService")
    private TypeEmployeePaymentService typeEmployeePaymentService;

    /**
     * @deprecated Use {@link #findTypeEmployeePayments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypeEmployeePayment instances matching the search criteria.")
    public Page<TypeEmployeePayment> findTypeEmployeePayments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypeEmployeePayments list");
        return typeEmployeePaymentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeEmployeePayment instances matching the search criteria.")
    public Page<TypeEmployeePayment> findTypeEmployeePayments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeEmployeePayments list");
        return typeEmployeePaymentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeEmployeePayments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return typeEmployeePaymentService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeEmployeePaymentService instance
	 */
    protected void setTypeEmployeePaymentService(TypeEmployeePaymentService service) {
        this.typeEmployeePaymentService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypeEmployeePayment instance.")
    public TypeEmployeePayment createTypeEmployeePayment(@RequestBody TypeEmployeePayment typeemployeepayment) {
        LOGGER.debug("Create TypeEmployeePayment with information: {}", typeemployeepayment);
        typeemployeepayment = typeEmployeePaymentService.create(typeemployeepayment);
        LOGGER.debug("Created TypeEmployeePayment with information: {}", typeemployeepayment);
        return typeemployeepayment;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypeEmployeePayment instances.")
    public Long countTypeEmployeePayments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TypeEmployeePayments");
        return typeEmployeePaymentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypeEmployeePayment instance associated with the given id.")
    public TypeEmployeePayment getTypeEmployeePayment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEmployeePayment with id: {}", id);
        TypeEmployeePayment foundTypeEmployeePayment = typeEmployeePaymentService.getById(id);
        LOGGER.debug("TypeEmployeePayment details with id: {}", foundTypeEmployeePayment);
        return foundTypeEmployeePayment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypeEmployeePayment instance associated with the given id.")
    public TypeEmployeePayment editTypeEmployeePayment(@PathVariable(value = "id") Integer id, @RequestBody TypeEmployeePayment typeemployeepayment) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEmployeePayment with id: {}", typeemployeepayment.getIdTypeEmployeePayment());
        typeemployeepayment.setIdTypeEmployeePayment(id);
        typeemployeepayment = typeEmployeePaymentService.update(typeemployeepayment);
        LOGGER.debug("TypeEmployeePayment details with id: {}", typeemployeepayment);
        return typeemployeepayment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypeEmployeePayment instance associated with the given id.")
    public boolean deleteTypeEmployeePayment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeePayment with id: {}", id);
        TypeEmployeePayment deletedTypeEmployeePayment = typeEmployeePaymentService.delete(id);
        return deletedTypeEmployeePayment != null;
    }
}
