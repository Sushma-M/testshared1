/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.PaymentCheck;
import com.testshared1.testdb_26may.service.PaymentCheckService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class PaymentCheck.
 * @see PaymentCheck
 */
@RestController("TestDB_26may.PaymentCheckController")
@RequestMapping("/TestDB_26may/PaymentCheck")
@Api(description = "Exposes APIs to work with PaymentCheck resource.", value = "PaymentCheckController")
public class PaymentCheckController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentCheckController.class);

    @Autowired
    @Qualifier("TestDB_26may.PaymentCheckService")
    private PaymentCheckService paymentCheckService;

    /**
     * @deprecated Use {@link #findPaymentChecks(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of PaymentCheck instances matching the search criteria.")
    public Page<PaymentCheck> findPaymentChecks(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PaymentChecks list");
        return paymentCheckService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of PaymentCheck instances matching the search criteria.")
    public Page<PaymentCheck> findPaymentChecks(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PaymentChecks list");
        return paymentCheckService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportPaymentChecks(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return paymentCheckService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentCheckService instance
	 */
    protected void setPaymentCheckService(PaymentCheckService service) {
        this.paymentCheckService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new PaymentCheck instance.")
    public PaymentCheck createPaymentCheck(@RequestBody PaymentCheck paymentcheck) {
        LOGGER.debug("Create PaymentCheck with information: {}", paymentcheck);
        paymentcheck = paymentCheckService.create(paymentcheck);
        LOGGER.debug("Created PaymentCheck with information: {}", paymentcheck);
        return paymentcheck;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of PaymentCheck instances.")
    public Long countPaymentChecks(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting PaymentChecks");
        return paymentCheckService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the PaymentCheck instance associated with the given id.")
    public PaymentCheck getPaymentCheck(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PaymentCheck with id: {}", id);
        PaymentCheck foundPaymentCheck = paymentCheckService.getById(id);
        LOGGER.debug("PaymentCheck details with id: {}", foundPaymentCheck);
        return foundPaymentCheck;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the PaymentCheck instance associated with the given id.")
    public PaymentCheck editPaymentCheck(@PathVariable(value = "id") Integer id, @RequestBody PaymentCheck paymentcheck) throws EntityNotFoundException {
        LOGGER.debug("Editing PaymentCheck with id: {}", paymentcheck.getIdPaymentCheck());
        paymentcheck.setIdPaymentCheck(id);
        paymentcheck = paymentCheckService.update(paymentcheck);
        LOGGER.debug("PaymentCheck details with id: {}", paymentcheck);
        return paymentcheck;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the PaymentCheck instance associated with the given id.")
    public boolean deletePaymentCheck(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PaymentCheck with id: {}", id);
        PaymentCheck deletedPaymentCheck = paymentCheckService.delete(id);
        return deletedPaymentCheck != null;
    }
}
