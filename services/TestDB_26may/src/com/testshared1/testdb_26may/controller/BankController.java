/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.Bank;
import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.service.BankService;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;


/**
 * Controller object for domain model class Bank.
 * @see Bank
 */
@RestController("TestDB_26may.BankController")
@Api(value = "/TestDB_26may/Bank", description = "Exposes APIs to work with Bank resource.")
@RequestMapping("/TestDB_26may/Bank")
public class BankController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BankController.class);

    @Autowired
	@Qualifier("TestDB_26may.BankService")
	private BankService bankService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeSalaryService")
	private EmployeeSalaryService employeeSalaryService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Bank instance.")
	public Bank createBank(@RequestBody Bank bank) {
		LOGGER.debug("Create Bank with information: {}" , bank);

		bank = bankService.create(bank);
		LOGGER.debug("Created Bank with information: {}" , bank);

	    return bank;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Bank instance associated with the given id.")
    public Bank getBank(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Bank with id: {}" , id);

        Bank foundBank = bankService.getById(id);
        LOGGER.debug("Bank details with id: {}" , foundBank);

        return foundBank;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Bank instance associated with the given id.")
    public Bank editBank(@PathVariable("id") Integer id, @RequestBody Bank bank) throws EntityNotFoundException {
        LOGGER.debug("Editing Bank with id: {}" , bank.getIdBank());

        bank.setIdBank(id);
        bank = bankService.update(bank);
        LOGGER.debug("Bank details with id: {}" , bank);

        return bank;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Bank instance associated with the given id.")
    public boolean deleteBank(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bank with id: {}" , id);

        Bank deletedBank = bankService.delete(id);

        return deletedBank != null;
    }
    /**
     * @deprecated Use {@link #findBanks(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Bank instances matching the search criteria.")
	public Page<Bank> findBanks( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Banks list");
		return bankService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Bank instances matching the search criteria.")
    public Page<Bank> findBanks(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Banks list");
    	return bankService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBanks(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bankService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Bank instances.")
	public Long countBanks(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Banks");
		return bankService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary>
        findAssociatedEmployeeSalaries(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id, "EmployeeSalary", "idBank", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BankService instance
	 */
	protected void setBankService(BankService service) {
		this.bankService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
	protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }
}

