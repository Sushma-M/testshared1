/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.Assessment;
import com.testshared1.testdb_26may.AssessmentField;
import com.testshared1.testdb_26may.service.AssessmentFieldService;
import com.testshared1.testdb_26may.service.AssessmentService;


/**
 * Controller object for domain model class Assessment.
 * @see Assessment
 */
@RestController("TestDB_26may.AssessmentController")
@Api(value = "/TestDB_26may/Assessment", description = "Exposes APIs to work with Assessment resource.")
@RequestMapping("/TestDB_26may/Assessment")
public class AssessmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentController.class);

    @Autowired
	@Qualifier("TestDB_26may.AssessmentService")
	private AssessmentService assessmentService;

    @Autowired
	@Qualifier("TestDB_26may.AssessmentFieldService")
	private AssessmentFieldService assessmentFieldService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Assessment instance.")
	public Assessment createAssessment(@RequestBody Assessment assessment) {
		LOGGER.debug("Create Assessment with information: {}" , assessment);

		assessment = assessmentService.create(assessment);
		LOGGER.debug("Created Assessment with information: {}" , assessment);

	    return assessment;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Assessment instance associated with the given id.")
    public Assessment getAssessment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Assessment with id: {}" , id);

        Assessment foundAssessment = assessmentService.getById(id);
        LOGGER.debug("Assessment details with id: {}" , foundAssessment);

        return foundAssessment;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Assessment instance associated with the given id.")
    public Assessment editAssessment(@PathVariable("id") Integer id, @RequestBody Assessment assessment) throws EntityNotFoundException {
        LOGGER.debug("Editing Assessment with id: {}" , assessment.getIdAssessment());

        assessment.setIdAssessment(id);
        assessment = assessmentService.update(assessment);
        LOGGER.debug("Assessment details with id: {}" , assessment);

        return assessment;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Assessment instance associated with the given id.")
    public boolean deleteAssessment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Assessment with id: {}" , id);

        Assessment deletedAssessment = assessmentService.delete(id);

        return deletedAssessment != null;
    }
    /**
     * @deprecated Use {@link #findAssessments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Assessment instances matching the search criteria.")
	public Page<Assessment> findAssessments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Assessments list");
		return assessmentService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Assessment instances matching the search criteria.")
    public Page<Assessment> findAssessments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Assessments list");
    	return assessmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAssessments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return assessmentService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Assessment instances.")
	public Long countAssessments(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Assessments");
		return assessmentService.count(query);
	}

    @RequestMapping(value="/{id:.+}/assessmentFields", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assessmentFields instance associated with the given id.")
     public Page<AssessmentField>
        findAssociatedAssessmentFields(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated assessmentFields");
        return assessmentFieldService.findAssociatedValues(id, "AssessmentField", "idAssessment", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentService instance
	 */
	protected void setAssessmentService(AssessmentService service) {
		this.assessmentService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AssessmentFieldService instance
	 */
	protected void setAssessmentFieldService(AssessmentFieldService service) {
        this.assessmentFieldService = service;
    }
}

