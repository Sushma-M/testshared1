/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListOvertimePayroll;
import com.testshared1.testdb_26may.OverTimeEmployee;
import com.testshared1.testdb_26may.service.ListOvertimePayrollService;
import com.testshared1.testdb_26may.service.OverTimeEmployeeService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class OverTimeEmployee.
 * @see OverTimeEmployee
 */
@RestController("TestDB_26may.OverTimeEmployeeController")
@RequestMapping("/TestDB_26may/OverTimeEmployee")
@Api(description = "Exposes APIs to work with OverTimeEmployee resource.", value = "OverTimeEmployeeController")
public class OverTimeEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OverTimeEmployeeController.class);

    @Autowired
    @Qualifier("TestDB_26may.OverTimeEmployeeService")
    private OverTimeEmployeeService overTimeEmployeeService;

    @Autowired
    @Qualifier("TestDB_26may.ListOvertimePayrollService")
    private ListOvertimePayrollService listOvertimePayrollService;

    /**
     * @deprecated Use {@link #findOverTimeEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of OverTimeEmployee instances matching the search criteria.")
    public Page<OverTimeEmployee> findOverTimeEmployees(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OverTimeEmployees list");
        return overTimeEmployeeService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of OverTimeEmployee instances matching the search criteria.")
    public Page<OverTimeEmployee> findOverTimeEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OverTimeEmployees list");
        return overTimeEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportOverTimeEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return overTimeEmployeeService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/listOvertimePayrolls", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listOvertimePayrolls instance associated with the given id.")
    public Page<ListOvertimePayroll> findAssociatedListOvertimePayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listOvertimePayrolls");
        return listOvertimePayrollService.findAssociatedValues(id, "ListOvertimePayroll", "idOverTimeEmployee", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OverTimeEmployeeService instance
	 */
    protected void setOverTimeEmployeeService(OverTimeEmployeeService service) {
        this.overTimeEmployeeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListOvertimePayrollService instance
	 */
    protected void setListOvertimePayrollService(ListOvertimePayrollService service) {
        this.listOvertimePayrollService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new OverTimeEmployee instance.")
    public OverTimeEmployee createOverTimeEmployee(@RequestBody OverTimeEmployee overtimeemployee) {
        LOGGER.debug("Create OverTimeEmployee with information: {}", overtimeemployee);
        overtimeemployee = overTimeEmployeeService.create(overtimeemployee);
        LOGGER.debug("Created OverTimeEmployee with information: {}", overtimeemployee);
        return overtimeemployee;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of OverTimeEmployee instances.")
    public Long countOverTimeEmployees(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting OverTimeEmployees");
        return overTimeEmployeeService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the OverTimeEmployee instance associated with the given id.")
    public OverTimeEmployee getOverTimeEmployee(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting OverTimeEmployee with id: {}", id);
        OverTimeEmployee foundOverTimeEmployee = overTimeEmployeeService.getById(id);
        LOGGER.debug("OverTimeEmployee details with id: {}", foundOverTimeEmployee);
        return foundOverTimeEmployee;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the OverTimeEmployee instance associated with the given id.")
    public OverTimeEmployee editOverTimeEmployee(@PathVariable(value = "id") Integer id, @RequestBody OverTimeEmployee overtimeemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing OverTimeEmployee with id: {}", overtimeemployee.getIdOverTimeEmployee());
        overtimeemployee.setIdOverTimeEmployee(id);
        overtimeemployee = overTimeEmployeeService.update(overtimeemployee);
        LOGGER.debug("OverTimeEmployee details with id: {}", overtimeemployee);
        return overtimeemployee;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the OverTimeEmployee instance associated with the given id.")
    public boolean deleteOverTimeEmployee(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OverTimeEmployee with id: {}", id);
        OverTimeEmployee deletedOverTimeEmployee = overTimeEmployeeService.delete(id);
        return deletedOverTimeEmployee != null;
    }
}
