/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.OverTimeSegmentPayroll;
import com.testshared1.testdb_26may.service.OverTimeSegmentPayrollService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class OverTimeSegmentPayroll.
 * @see OverTimeSegmentPayroll
 */
@RestController("TestDB_26may.OverTimeSegmentPayrollController")
@RequestMapping("/TestDB_26may/OverTimeSegmentPayroll")
@Api(description = "Exposes APIs to work with OverTimeSegmentPayroll resource.", value = "OverTimeSegmentPayrollController")
public class OverTimeSegmentPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OverTimeSegmentPayrollController.class);

    @Autowired
    @Qualifier("TestDB_26may.OverTimeSegmentPayrollService")
    private OverTimeSegmentPayrollService overTimeSegmentPayrollService;

    /**
     * @deprecated Use {@link #findOverTimeSegmentPayrolls(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of OverTimeSegmentPayroll instances matching the search criteria.")
    public Page<OverTimeSegmentPayroll> findOverTimeSegmentPayrolls(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OverTimeSegmentPayrolls list");
        return overTimeSegmentPayrollService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of OverTimeSegmentPayroll instances matching the search criteria.")
    public Page<OverTimeSegmentPayroll> findOverTimeSegmentPayrolls(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OverTimeSegmentPayrolls list");
        return overTimeSegmentPayrollService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportOverTimeSegmentPayrolls(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return overTimeSegmentPayrollService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OverTimeSegmentPayrollService instance
	 */
    protected void setOverTimeSegmentPayrollService(OverTimeSegmentPayrollService service) {
        this.overTimeSegmentPayrollService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new OverTimeSegmentPayroll instance.")
    public OverTimeSegmentPayroll createOverTimeSegmentPayroll(@RequestBody OverTimeSegmentPayroll overtimesegmentpayroll) {
        LOGGER.debug("Create OverTimeSegmentPayroll with information: {}", overtimesegmentpayroll);
        overtimesegmentpayroll = overTimeSegmentPayrollService.create(overtimesegmentpayroll);
        LOGGER.debug("Created OverTimeSegmentPayroll with information: {}", overtimesegmentpayroll);
        return overtimesegmentpayroll;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of OverTimeSegmentPayroll instances.")
    public Long countOverTimeSegmentPayrolls(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting OverTimeSegmentPayrolls");
        return overTimeSegmentPayrollService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the OverTimeSegmentPayroll instance associated with the given id.")
    public OverTimeSegmentPayroll getOverTimeSegmentPayroll(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting OverTimeSegmentPayroll with id: {}", id);
        OverTimeSegmentPayroll foundOverTimeSegmentPayroll = overTimeSegmentPayrollService.getById(id);
        LOGGER.debug("OverTimeSegmentPayroll details with id: {}", foundOverTimeSegmentPayroll);
        return foundOverTimeSegmentPayroll;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the OverTimeSegmentPayroll instance associated with the given id.")
    public OverTimeSegmentPayroll editOverTimeSegmentPayroll(@PathVariable(value = "id") Integer id, @RequestBody OverTimeSegmentPayroll overtimesegmentpayroll) throws EntityNotFoundException {
        LOGGER.debug("Editing OverTimeSegmentPayroll with id: {}", overtimesegmentpayroll.getIdOverTimeSegmentPayroll());
        overtimesegmentpayroll.setIdOverTimeSegmentPayroll(id);
        overtimesegmentpayroll = overTimeSegmentPayrollService.update(overtimesegmentpayroll);
        LOGGER.debug("OverTimeSegmentPayroll details with id: {}", overtimesegmentpayroll);
        return overtimesegmentpayroll;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the OverTimeSegmentPayroll instance associated with the given id.")
    public boolean deleteOverTimeSegmentPayroll(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OverTimeSegmentPayroll with id: {}", id);
        OverTimeSegmentPayroll deletedOverTimeSegmentPayroll = overTimeSegmentPayrollService.delete(id);
        return deletedOverTimeSegmentPayroll != null;
    }
}
