/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListAssetDiscarded;
import com.testshared1.testdb_26may.service.ListAssetDiscardedService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ListAssetDiscarded.
 * @see ListAssetDiscarded
 */
@RestController("TestDB_26may.ListAssetDiscardedController")
@RequestMapping("/TestDB_26may/ListAssetDiscarded")
@Api(description = "Exposes APIs to work with ListAssetDiscarded resource.", value = "ListAssetDiscardedController")
public class ListAssetDiscardedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetDiscardedController.class);

    @Autowired
    @Qualifier("TestDB_26may.ListAssetDiscardedService")
    private ListAssetDiscardedService listAssetDiscardedService;

    /**
     * @deprecated Use {@link #findListAssetDiscardeds(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ListAssetDiscarded instances matching the search criteria.")
    public Page<ListAssetDiscarded> findListAssetDiscardeds(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListAssetDiscardeds list");
        return listAssetDiscardedService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListAssetDiscarded instances matching the search criteria.")
    public Page<ListAssetDiscarded> findListAssetDiscardeds(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListAssetDiscardeds list");
        return listAssetDiscardedService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListAssetDiscardeds(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return listAssetDiscardedService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListAssetDiscardedService instance
	 */
    protected void setListAssetDiscardedService(ListAssetDiscardedService service) {
        this.listAssetDiscardedService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ListAssetDiscarded instance.")
    public ListAssetDiscarded createListAssetDiscarded(@RequestBody ListAssetDiscarded listassetdiscarded) {
        LOGGER.debug("Create ListAssetDiscarded with information: {}", listassetdiscarded);
        listassetdiscarded = listAssetDiscardedService.create(listassetdiscarded);
        LOGGER.debug("Created ListAssetDiscarded with information: {}", listassetdiscarded);
        return listassetdiscarded;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ListAssetDiscarded instances.")
    public Long countListAssetDiscardeds(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ListAssetDiscardeds");
        return listAssetDiscardedService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ListAssetDiscarded instance associated with the given id.")
    public ListAssetDiscarded getListAssetDiscarded(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListAssetDiscarded with id: {}", id);
        ListAssetDiscarded foundListAssetDiscarded = listAssetDiscardedService.getById(id);
        LOGGER.debug("ListAssetDiscarded details with id: {}", foundListAssetDiscarded);
        return foundListAssetDiscarded;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ListAssetDiscarded instance associated with the given id.")
    public ListAssetDiscarded editListAssetDiscarded(@PathVariable(value = "id") Integer id, @RequestBody ListAssetDiscarded listassetdiscarded) throws EntityNotFoundException {
        LOGGER.debug("Editing ListAssetDiscarded with id: {}", listassetdiscarded.getIdListAssetDiscarded());
        listassetdiscarded.setIdListAssetDiscarded(id);
        listassetdiscarded = listAssetDiscardedService.update(listassetdiscarded);
        LOGGER.debug("ListAssetDiscarded details with id: {}", listassetdiscarded);
        return listassetdiscarded;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ListAssetDiscarded instance associated with the given id.")
    public boolean deleteListAssetDiscarded(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetDiscarded with id: {}", id);
        ListAssetDiscarded deletedListAssetDiscarded = listAssetDiscardedService.delete(id);
        return deletedListAssetDiscarded != null;
    }
}
