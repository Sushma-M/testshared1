/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListLoanDetailPayroll;
import com.testshared1.testdb_26may.Loan;
import com.testshared1.testdb_26may.PaymentLoanManual;
import com.testshared1.testdb_26may.service.ListLoanDetailPayrollService;
import com.testshared1.testdb_26may.service.LoanService;
import com.testshared1.testdb_26may.service.PaymentLoanManualService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Loan.
 * @see Loan
 */
@RestController("TestDB_26may.LoanController")
@RequestMapping("/TestDB_26may/Loan")
@Api(description = "Exposes APIs to work with Loan resource.", value = "LoanController")
public class LoanController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoanController.class);

    @Autowired
    @Qualifier("TestDB_26may.LoanService")
    private LoanService loanService;

    @Autowired
    @Qualifier("TestDB_26may.ListLoanDetailPayrollService")
    private ListLoanDetailPayrollService listLoanDetailPayrollService;

    @Autowired
    @Qualifier("TestDB_26may.PaymentLoanManualService")
    private PaymentLoanManualService paymentLoanManualService;

    /**
     * @deprecated Use {@link #findLoans(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Loan instances matching the search criteria.")
    public Page<Loan> findLoans(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Loans list");
        return loanService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Loan instances matching the search criteria.")
    public Page<Loan> findLoans(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Loans list");
        return loanService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportLoans(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return loanService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/listLoanDetailPayrolls", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the listLoanDetailPayrolls instance associated with the given id.")
    public Page<ListLoanDetailPayroll> findAssociatedListLoanDetailPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listLoanDetailPayrolls");
        return listLoanDetailPayrollService.findAssociatedValues(id, "ListLoanDetailPayroll", "idLoan", pageable);
    }

    @RequestMapping(value = "/{id:.+}/paymentLoanManuals", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the paymentLoanManuals instance associated with the given id.")
    public Page<PaymentLoanManual> findAssociatedPaymentLoanManuals(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated paymentLoanManuals");
        return paymentLoanManualService.findAssociatedValues(id, "PaymentLoanManual", "idLoan", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LoanService instance
	 */
    protected void setLoanService(LoanService service) {
        this.loanService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListLoanDetailPayrollService instance
	 */
    protected void setListLoanDetailPayrollService(ListLoanDetailPayrollService service) {
        this.listLoanDetailPayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentLoanManualService instance
	 */
    protected void setPaymentLoanManualService(PaymentLoanManualService service) {
        this.paymentLoanManualService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Loan instance.")
    public Loan createLoan(@RequestBody Loan loan) {
        LOGGER.debug("Create Loan with information: {}", loan);
        loan = loanService.create(loan);
        LOGGER.debug("Created Loan with information: {}", loan);
        return loan;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Loan instances.")
    public Long countLoans(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Loans");
        return loanService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Loan instance associated with the given id.")
    public Loan getLoan(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Loan with id: {}", id);
        Loan foundLoan = loanService.getById(id);
        LOGGER.debug("Loan details with id: {}", foundLoan);
        return foundLoan;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Loan instance associated with the given id.")
    public Loan editLoan(@PathVariable(value = "id") Integer id, @RequestBody Loan loan) throws EntityNotFoundException {
        LOGGER.debug("Editing Loan with id: {}", loan.getIdLoan());
        loan.setIdLoan(id);
        loan = loanService.update(loan);
        LOGGER.debug("Loan details with id: {}", loan);
        return loan;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Loan instance associated with the given id.")
    public boolean deleteLoan(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Loan with id: {}", id);
        Loan deletedLoan = loanService.delete(id);
        return deletedLoan != null;
    }
}
