/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.TypeIncident;
import com.testshared1.testdb_26may.TypeIncidentSeverity;
import com.testshared1.testdb_26may.service.TypeIncidentService;
import com.testshared1.testdb_26may.service.TypeIncidentSeverityService;


/**
 * Controller object for domain model class TypeIncidentSeverity.
 * @see TypeIncidentSeverity
 */
@RestController("TestDB_26may.TypeIncidentSeverityController")
@Api(value = "/TestDB_26may/TypeIncidentSeverity", description = "Exposes APIs to work with TypeIncidentSeverity resource.")
@RequestMapping("/TestDB_26may/TypeIncidentSeverity")
public class TypeIncidentSeverityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeIncidentSeverityController.class);

    @Autowired
	@Qualifier("TestDB_26may.TypeIncidentSeverityService")
	private TypeIncidentSeverityService typeIncidentSeverityService;

    @Autowired
	@Qualifier("TestDB_26may.TypeIncidentService")
	private TypeIncidentService typeIncidentService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeIncidentSeverity instance.")
	public TypeIncidentSeverity createTypeIncidentSeverity(@RequestBody TypeIncidentSeverity typeincidentseverity) {
		LOGGER.debug("Create TypeIncidentSeverity with information: {}" , typeincidentseverity);

		typeincidentseverity = typeIncidentSeverityService.create(typeincidentseverity);
		LOGGER.debug("Created TypeIncidentSeverity with information: {}" , typeincidentseverity);

	    return typeincidentseverity;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeIncidentSeverity instance associated with the given id.")
    public TypeIncidentSeverity getTypeIncidentSeverity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeIncidentSeverity with id: {}" , id);

        TypeIncidentSeverity foundTypeIncidentSeverity = typeIncidentSeverityService.getById(id);
        LOGGER.debug("TypeIncidentSeverity details with id: {}" , foundTypeIncidentSeverity);

        return foundTypeIncidentSeverity;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeIncidentSeverity instance associated with the given id.")
    public TypeIncidentSeverity editTypeIncidentSeverity(@PathVariable("id") Integer id, @RequestBody TypeIncidentSeverity typeincidentseverity) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeIncidentSeverity with id: {}" , typeincidentseverity.getIdTypeIncidentSeverity());

        typeincidentseverity.setIdTypeIncidentSeverity(id);
        typeincidentseverity = typeIncidentSeverityService.update(typeincidentseverity);
        LOGGER.debug("TypeIncidentSeverity details with id: {}" , typeincidentseverity);

        return typeincidentseverity;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeIncidentSeverity instance associated with the given id.")
    public boolean deleteTypeIncidentSeverity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeIncidentSeverity with id: {}" , id);

        TypeIncidentSeverity deletedTypeIncidentSeverity = typeIncidentSeverityService.delete(id);

        return deletedTypeIncidentSeverity != null;
    }
    /**
     * @deprecated Use {@link #findTypeIncidentSeverities(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeIncidentSeverity instances matching the search criteria.")
	public Page<TypeIncidentSeverity> findTypeIncidentSeverities( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeIncidentSeverities list");
		return typeIncidentSeverityService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeIncidentSeverity instances matching the search criteria.")
    public Page<TypeIncidentSeverity> findTypeIncidentSeverities(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeIncidentSeverities list");
    	return typeIncidentSeverityService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeIncidentSeverities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return typeIncidentSeverityService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeIncidentSeverity instances.")
	public Long countTypeIncidentSeverities(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TypeIncidentSeverities");
		return typeIncidentSeverityService.count(query);
	}

    @RequestMapping(value="/{id:.+}/typeIncidents", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the typeIncidents instance associated with the given id.")
     public Page<TypeIncident>
        findAssociatedTypeIncidents(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated typeIncidents");
        return typeIncidentService.findAssociatedValues(id, "TypeIncident", "idTypeIncidentSeverity", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeIncidentSeverityService instance
	 */
	protected void setTypeIncidentSeverityService(TypeIncidentSeverityService service) {
		this.typeIncidentSeverityService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeIncidentService instance
	 */
	protected void setTypeIncidentService(TypeIncidentService service) {
        this.typeIncidentService = service;
    }
}

