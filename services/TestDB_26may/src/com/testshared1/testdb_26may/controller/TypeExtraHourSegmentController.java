/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.OverTimeSegmentPayroll;
import com.testshared1.testdb_26may.TypeExtraHourSegment;
import com.testshared1.testdb_26may.service.OverTimeSegmentPayrollService;
import com.testshared1.testdb_26may.service.TypeExtraHourSegmentService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypeExtraHourSegment.
 * @see TypeExtraHourSegment
 */
@RestController("TestDB_26may.TypeExtraHourSegmentController")
@RequestMapping("/TestDB_26may/TypeExtraHourSegment")
@Api(description = "Exposes APIs to work with TypeExtraHourSegment resource.", value = "TypeExtraHourSegmentController")
public class TypeExtraHourSegmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeExtraHourSegmentController.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeExtraHourSegmentService")
    private TypeExtraHourSegmentService typeExtraHourSegmentService;

    @Autowired
    @Qualifier("TestDB_26may.OverTimeSegmentPayrollService")
    private OverTimeSegmentPayrollService overTimeSegmentPayrollService;

    /**
     * @deprecated Use {@link #findTypeExtraHourSegments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypeExtraHourSegment instances matching the search criteria.")
    public Page<TypeExtraHourSegment> findTypeExtraHourSegments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypeExtraHourSegments list");
        return typeExtraHourSegmentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeExtraHourSegment instances matching the search criteria.")
    public Page<TypeExtraHourSegment> findTypeExtraHourSegments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeExtraHourSegments list");
        return typeExtraHourSegmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeExtraHourSegments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return typeExtraHourSegmentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/overTimeSegmentPayrolls", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeSegmentPayrolls instance associated with the given id.")
    public Page<OverTimeSegmentPayroll> findAssociatedOverTimeSegmentPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated overTimeSegmentPayrolls");
        return overTimeSegmentPayrollService.findAssociatedValues(id, "OverTimeSegmentPayroll", "idTypeExtraHourSegment", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeExtraHourSegmentService instance
	 */
    protected void setTypeExtraHourSegmentService(TypeExtraHourSegmentService service) {
        this.typeExtraHourSegmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OverTimeSegmentPayrollService instance
	 */
    protected void setOverTimeSegmentPayrollService(OverTimeSegmentPayrollService service) {
        this.overTimeSegmentPayrollService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypeExtraHourSegment instance.")
    public TypeExtraHourSegment createTypeExtraHourSegment(@RequestBody TypeExtraHourSegment typeextrahoursegment) {
        LOGGER.debug("Create TypeExtraHourSegment with information: {}", typeextrahoursegment);
        typeextrahoursegment = typeExtraHourSegmentService.create(typeextrahoursegment);
        LOGGER.debug("Created TypeExtraHourSegment with information: {}", typeextrahoursegment);
        return typeextrahoursegment;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypeExtraHourSegment instances.")
    public Long countTypeExtraHourSegments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TypeExtraHourSegments");
        return typeExtraHourSegmentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypeExtraHourSegment instance associated with the given id.")
    public TypeExtraHourSegment getTypeExtraHourSegment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeExtraHourSegment with id: {}", id);
        TypeExtraHourSegment foundTypeExtraHourSegment = typeExtraHourSegmentService.getById(id);
        LOGGER.debug("TypeExtraHourSegment details with id: {}", foundTypeExtraHourSegment);
        return foundTypeExtraHourSegment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypeExtraHourSegment instance associated with the given id.")
    public TypeExtraHourSegment editTypeExtraHourSegment(@PathVariable(value = "id") Integer id, @RequestBody TypeExtraHourSegment typeextrahoursegment) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeExtraHourSegment with id: {}", typeextrahoursegment.getIdTypeExtraHourSegment());
        typeextrahoursegment.setIdTypeExtraHourSegment(id);
        typeextrahoursegment = typeExtraHourSegmentService.update(typeextrahoursegment);
        LOGGER.debug("TypeExtraHourSegment details with id: {}", typeextrahoursegment);
        return typeextrahoursegment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypeExtraHourSegment instance associated with the given id.")
    public boolean deleteTypeExtraHourSegment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeExtraHourSegment with id: {}", id);
        TypeExtraHourSegment deletedTypeExtraHourSegment = typeExtraHourSegmentService.delete(id);
        return deletedTypeExtraHourSegment != null;
    }
}
