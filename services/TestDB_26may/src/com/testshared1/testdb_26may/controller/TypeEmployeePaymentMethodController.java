/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.PayrollDetail;
import com.testshared1.testdb_26may.TypeEmployeePaymentMethod;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;
import com.testshared1.testdb_26may.service.PayrollDetailService;
import com.testshared1.testdb_26may.service.TypeEmployeePaymentMethodService;


/**
 * Controller object for domain model class TypeEmployeePaymentMethod.
 * @see TypeEmployeePaymentMethod
 */
@RestController("TestDB_26may.TypeEmployeePaymentMethodController")
@Api(value = "/TestDB_26may/TypeEmployeePaymentMethod", description = "Exposes APIs to work with TypeEmployeePaymentMethod resource.")
@RequestMapping("/TestDB_26may/TypeEmployeePaymentMethod")
public class TypeEmployeePaymentMethodController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentMethodController.class);

    @Autowired
	@Qualifier("TestDB_26may.TypeEmployeePaymentMethodService")
	private TypeEmployeePaymentMethodService typeEmployeePaymentMethodService;

    @Autowired
	@Qualifier("TestDB_26may.EmployeeSalaryService")
	private EmployeeSalaryService employeeSalaryService;

    @Autowired
	@Qualifier("TestDB_26may.PayrollDetailService")
	private PayrollDetailService payrollDetailService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeEmployeePaymentMethod instance.")
	public TypeEmployeePaymentMethod createTypeEmployeePaymentMethod(@RequestBody TypeEmployeePaymentMethod typeemployeepaymentmethod) {
		LOGGER.debug("Create TypeEmployeePaymentMethod with information: {}" , typeemployeepaymentmethod);

		typeemployeepaymentmethod = typeEmployeePaymentMethodService.create(typeemployeepaymentmethod);
		LOGGER.debug("Created TypeEmployeePaymentMethod with information: {}" , typeemployeepaymentmethod);

	    return typeemployeepaymentmethod;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeEmployeePaymentMethod instance associated with the given id.")
    public TypeEmployeePaymentMethod getTypeEmployeePaymentMethod(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEmployeePaymentMethod with id: {}" , id);

        TypeEmployeePaymentMethod foundTypeEmployeePaymentMethod = typeEmployeePaymentMethodService.getById(id);
        LOGGER.debug("TypeEmployeePaymentMethod details with id: {}" , foundTypeEmployeePaymentMethod);

        return foundTypeEmployeePaymentMethod;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeEmployeePaymentMethod instance associated with the given id.")
    public TypeEmployeePaymentMethod editTypeEmployeePaymentMethod(@PathVariable("id") Integer id, @RequestBody TypeEmployeePaymentMethod typeemployeepaymentmethod) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEmployeePaymentMethod with id: {}" , typeemployeepaymentmethod.getIdTypeEmployeeStatus());

        typeemployeepaymentmethod.setIdTypeEmployeeStatus(id);
        typeemployeepaymentmethod = typeEmployeePaymentMethodService.update(typeemployeepaymentmethod);
        LOGGER.debug("TypeEmployeePaymentMethod details with id: {}" , typeemployeepaymentmethod);

        return typeemployeepaymentmethod;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeEmployeePaymentMethod instance associated with the given id.")
    public boolean deleteTypeEmployeePaymentMethod(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeePaymentMethod with id: {}" , id);

        TypeEmployeePaymentMethod deletedTypeEmployeePaymentMethod = typeEmployeePaymentMethodService.delete(id);

        return deletedTypeEmployeePaymentMethod != null;
    }
    /**
     * @deprecated Use {@link #findTypeEmployeePaymentMethods(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeEmployeePaymentMethod instances matching the search criteria.")
	public Page<TypeEmployeePaymentMethod> findTypeEmployeePaymentMethods( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeEmployeePaymentMethods list");
		return typeEmployeePaymentMethodService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeEmployeePaymentMethod instances matching the search criteria.")
    public Page<TypeEmployeePaymentMethod> findTypeEmployeePaymentMethods(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeEmployeePaymentMethods list");
    	return typeEmployeePaymentMethodService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeEmployeePaymentMethods(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return typeEmployeePaymentMethodService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeEmployeePaymentMethod instances.")
	public Long countTypeEmployeePaymentMethods(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TypeEmployeePaymentMethods");
		return typeEmployeePaymentMethodService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary>
        findAssociatedEmployeeSalaries(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id, "EmployeeSalary", "idTypeEmployeeStatus", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail>
        findAssociatedPayrollDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id, "PayrollDetail", "idTypeEmployeeStatus", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeEmployeePaymentMethodService instance
	 */
	protected void setTypeEmployeePaymentMethodService(TypeEmployeePaymentMethodService service) {
		this.typeEmployeePaymentMethodService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
	protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PayrollDetailService instance
	 */
	protected void setPayrollDetailService(PayrollDetailService service) {
        this.payrollDetailService = service;
    }
}

