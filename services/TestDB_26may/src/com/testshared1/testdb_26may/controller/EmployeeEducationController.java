/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.EmployeeEducation;
import com.testshared1.testdb_26may.service.EmployeeEducationService;


/**
 * Controller object for domain model class EmployeeEducation.
 * @see EmployeeEducation
 */
@RestController("TestDB_26may.EmployeeEducationController")
@Api(value = "/TestDB_26may/EmployeeEducation", description = "Exposes APIs to work with EmployeeEducation resource.")
@RequestMapping("/TestDB_26may/EmployeeEducation")
public class EmployeeEducationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeEducationController.class);

    @Autowired
	@Qualifier("TestDB_26may.EmployeeEducationService")
	private EmployeeEducationService employeeEducationService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeEducation instance.")
	public EmployeeEducation createEmployeeEducation(@RequestBody EmployeeEducation employeeeducation) {
		LOGGER.debug("Create EmployeeEducation with information: {}" , employeeeducation);

		employeeeducation = employeeEducationService.create(employeeeducation);
		LOGGER.debug("Created EmployeeEducation with information: {}" , employeeeducation);

	    return employeeeducation;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeEducation instance associated with the given id.")
    public EmployeeEducation getEmployeeEducation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeEducation with id: {}" , id);

        EmployeeEducation foundEmployeeEducation = employeeEducationService.getById(id);
        LOGGER.debug("EmployeeEducation details with id: {}" , foundEmployeeEducation);

        return foundEmployeeEducation;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeEducation instance associated with the given id.")
    public EmployeeEducation editEmployeeEducation(@PathVariable("id") Integer id, @RequestBody EmployeeEducation employeeeducation) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeEducation with id: {}" , employeeeducation.getIdEmployeeEducation());

        employeeeducation.setIdEmployeeEducation(id);
        employeeeducation = employeeEducationService.update(employeeeducation);
        LOGGER.debug("EmployeeEducation details with id: {}" , employeeeducation);

        return employeeeducation;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeEducation instance associated with the given id.")
    public boolean deleteEmployeeEducation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeEducation with id: {}" , id);

        EmployeeEducation deletedEmployeeEducation = employeeEducationService.delete(id);

        return deletedEmployeeEducation != null;
    }
    /**
     * @deprecated Use {@link #findEmployeeEducations(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeEducation instances matching the search criteria.")
	public Page<EmployeeEducation> findEmployeeEducations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeEducations list");
		return employeeEducationService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeEducation instances matching the search criteria.")
    public Page<EmployeeEducation> findEmployeeEducations(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeEducations list");
    	return employeeEducationService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeEducations(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeEducationService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeEducation instances.")
	public Long countEmployeeEducations(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeEducations");
		return employeeEducationService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeEducationService instance
	 */
	protected void setEmployeeEducationService(EmployeeEducationService service) {
		this.employeeEducationService = service;
	}

}

