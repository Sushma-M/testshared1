/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListOvertimePayroll;
import com.testshared1.testdb_26may.OverTimeSegmentPayroll;
import com.testshared1.testdb_26may.service.ListOvertimePayrollService;
import com.testshared1.testdb_26may.service.OverTimeSegmentPayrollService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ListOvertimePayroll.
 * @see ListOvertimePayroll
 */
@RestController("TestDB_26may.ListOvertimePayrollController")
@RequestMapping("/TestDB_26may/ListOvertimePayroll")
@Api(description = "Exposes APIs to work with ListOvertimePayroll resource.", value = "ListOvertimePayrollController")
public class ListOvertimePayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListOvertimePayrollController.class);

    @Autowired
    @Qualifier("TestDB_26may.ListOvertimePayrollService")
    private ListOvertimePayrollService listOvertimePayrollService;

    @Autowired
    @Qualifier("TestDB_26may.OverTimeSegmentPayrollService")
    private OverTimeSegmentPayrollService overTimeSegmentPayrollService;

    /**
     * @deprecated Use {@link #findListOvertimePayrolls(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ListOvertimePayroll instances matching the search criteria.")
    public Page<ListOvertimePayroll> findListOvertimePayrolls(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListOvertimePayrolls list");
        return listOvertimePayrollService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListOvertimePayroll instances matching the search criteria.")
    public Page<ListOvertimePayroll> findListOvertimePayrolls(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListOvertimePayrolls list");
        return listOvertimePayrollService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListOvertimePayrolls(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return listOvertimePayrollService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/overTimeSegmentPayrolls", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeSegmentPayrolls instance associated with the given id.")
    public Page<OverTimeSegmentPayroll> findAssociatedOverTimeSegmentPayrolls(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated overTimeSegmentPayrolls");
        return overTimeSegmentPayrollService.findAssociatedValues(id, "OverTimeSegmentPayroll", "idListOvertimePayroll", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListOvertimePayrollService instance
	 */
    protected void setListOvertimePayrollService(ListOvertimePayrollService service) {
        this.listOvertimePayrollService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OverTimeSegmentPayrollService instance
	 */
    protected void setOverTimeSegmentPayrollService(OverTimeSegmentPayrollService service) {
        this.overTimeSegmentPayrollService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ListOvertimePayroll instance.")
    public ListOvertimePayroll createListOvertimePayroll(@RequestBody ListOvertimePayroll listovertimepayroll) {
        LOGGER.debug("Create ListOvertimePayroll with information: {}", listovertimepayroll);
        listovertimepayroll = listOvertimePayrollService.create(listovertimepayroll);
        LOGGER.debug("Created ListOvertimePayroll with information: {}", listovertimepayroll);
        return listovertimepayroll;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ListOvertimePayroll instances.")
    public Long countListOvertimePayrolls(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ListOvertimePayrolls");
        return listOvertimePayrollService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ListOvertimePayroll instance associated with the given id.")
    public ListOvertimePayroll getListOvertimePayroll(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListOvertimePayroll with id: {}", id);
        ListOvertimePayroll foundListOvertimePayroll = listOvertimePayrollService.getById(id);
        LOGGER.debug("ListOvertimePayroll details with id: {}", foundListOvertimePayroll);
        return foundListOvertimePayroll;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ListOvertimePayroll instance associated with the given id.")
    public ListOvertimePayroll editListOvertimePayroll(@PathVariable(value = "id") Integer id, @RequestBody ListOvertimePayroll listovertimepayroll) throws EntityNotFoundException {
        LOGGER.debug("Editing ListOvertimePayroll with id: {}", listovertimepayroll.getIdListOvertimePayroll());
        listovertimepayroll.setIdListOvertimePayroll(id);
        listovertimepayroll = listOvertimePayrollService.update(listovertimepayroll);
        LOGGER.debug("ListOvertimePayroll details with id: {}", listovertimepayroll);
        return listovertimepayroll;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ListOvertimePayroll instance associated with the given id.")
    public boolean deleteListOvertimePayroll(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListOvertimePayroll with id: {}", id);
        ListOvertimePayroll deletedListOvertimePayroll = listOvertimePayrollService.delete(id);
        return deletedListOvertimePayroll != null;
    }
}
