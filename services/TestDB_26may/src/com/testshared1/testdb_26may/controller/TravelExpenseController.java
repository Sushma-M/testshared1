/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.JustifiedTravelExpenseFile;
import com.testshared1.testdb_26may.ListTravelExpenseDetail;
import com.testshared1.testdb_26may.TravelExpense;
import com.testshared1.testdb_26may.service.JustifiedTravelExpenseFileService;
import com.testshared1.testdb_26may.service.ListTravelExpenseDetailService;
import com.testshared1.testdb_26may.service.TravelExpenseService;


/**
 * Controller object for domain model class TravelExpense.
 * @see TravelExpense
 */
@RestController("TestDB_26may.TravelExpenseController")
@Api(value = "/TestDB_26may/TravelExpense", description = "Exposes APIs to work with TravelExpense resource.")
@RequestMapping("/TestDB_26may/TravelExpense")
public class TravelExpenseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TravelExpenseController.class);

    @Autowired
	@Qualifier("TestDB_26may.TravelExpenseService")
	private TravelExpenseService travelExpenseService;

    @Autowired
	@Qualifier("TestDB_26may.ListTravelExpenseDetailService")
	private ListTravelExpenseDetailService listTravelExpenseDetailService;

    @Autowired
	@Qualifier("TestDB_26may.JustifiedTravelExpenseFileService")
	private JustifiedTravelExpenseFileService justifiedTravelExpenseFileService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TravelExpense instance.")
	public TravelExpense createTravelExpense(@RequestBody TravelExpense travelexpense) {
		LOGGER.debug("Create TravelExpense with information: {}" , travelexpense);

		travelexpense = travelExpenseService.create(travelexpense);
		LOGGER.debug("Created TravelExpense with information: {}" , travelexpense);

	    return travelexpense;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TravelExpense instance associated with the given id.")
    public TravelExpense getTravelExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TravelExpense with id: {}" , id);

        TravelExpense foundTravelExpense = travelExpenseService.getById(id);
        LOGGER.debug("TravelExpense details with id: {}" , foundTravelExpense);

        return foundTravelExpense;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TravelExpense instance associated with the given id.")
    public TravelExpense editTravelExpense(@PathVariable("id") Integer id, @RequestBody TravelExpense travelexpense) throws EntityNotFoundException {
        LOGGER.debug("Editing TravelExpense with id: {}" , travelexpense.getIdTravelExpense());

        travelexpense.setIdTravelExpense(id);
        travelexpense = travelExpenseService.update(travelexpense);
        LOGGER.debug("TravelExpense details with id: {}" , travelexpense);

        return travelexpense;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TravelExpense instance associated with the given id.")
    public boolean deleteTravelExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TravelExpense with id: {}" , id);

        TravelExpense deletedTravelExpense = travelExpenseService.delete(id);

        return deletedTravelExpense != null;
    }
    /**
     * @deprecated Use {@link #findTravelExpenses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TravelExpense instances matching the search criteria.")
	public Page<TravelExpense> findTravelExpenses( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TravelExpenses list");
		return travelExpenseService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TravelExpense instances matching the search criteria.")
    public Page<TravelExpense> findTravelExpenses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TravelExpenses list");
    	return travelExpenseService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTravelExpenses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return travelExpenseService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TravelExpense instances.")
	public Long countTravelExpenses(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TravelExpenses");
		return travelExpenseService.count(query);
	}

    @RequestMapping(value="/{id:.+}/justifiedTravelExpenseFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedTravelExpenseFiles instance associated with the given id.")
     public Page<JustifiedTravelExpenseFile>
        findAssociatedJustifiedTravelExpenseFiles(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated justifiedTravelExpenseFiles");
        return justifiedTravelExpenseFileService.findAssociatedValues(id, "JustifiedTravelExpenseFile", "idTravelExpense", pageable);
   }

    @RequestMapping(value="/{id:.+}/listTravelExpenseDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listTravelExpenseDetails instance associated with the given id.")
     public Page<ListTravelExpenseDetail>
        findAssociatedListTravelExpenseDetails(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated listTravelExpenseDetails");
        return listTravelExpenseDetailService.findAssociatedValues(id, "ListTravelExpenseDetail", "idTravelExpense", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelExpenseService instance
	 */
	protected void setTravelExpenseService(TravelExpenseService service) {
		this.travelExpenseService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListTravelExpenseDetailService instance
	 */
	protected void setListTravelExpenseDetailService(ListTravelExpenseDetailService service) {
        this.listTravelExpenseDetailService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JustifiedTravelExpenseFileService instance
	 */
	protected void setJustifiedTravelExpenseFileService(JustifiedTravelExpenseFileService service) {
        this.justifiedTravelExpenseFileService = service;
    }
}

