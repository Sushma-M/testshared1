/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class EmployeeSalary.
 * @see EmployeeSalary
 */
@RestController("TestDB_26may.EmployeeSalaryController")
@RequestMapping("/TestDB_26may/EmployeeSalary")
@Api(description = "Exposes APIs to work with EmployeeSalary resource.", value = "EmployeeSalaryController")
public class EmployeeSalaryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeSalaryController.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;

    /**
     * @deprecated Use {@link #findEmployeeSalaries(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of EmployeeSalary instances matching the search criteria.")
    public Page<EmployeeSalary> findEmployeeSalaries(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeSalaries list");
        return employeeSalaryService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of EmployeeSalary instances matching the search criteria.")
    public Page<EmployeeSalary> findEmployeeSalaries(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeSalaries list");
        return employeeSalaryService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportEmployeeSalaries(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employeeSalaryService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
    protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new EmployeeSalary instance.")
    public EmployeeSalary createEmployeeSalary(@RequestBody EmployeeSalary employeesalary) {
        LOGGER.debug("Create EmployeeSalary with information: {}", employeesalary);
        employeesalary = employeeSalaryService.create(employeesalary);
        LOGGER.debug("Created EmployeeSalary with information: {}", employeesalary);
        return employeesalary;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of EmployeeSalary instances.")
    public Long countEmployeeSalaries(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting EmployeeSalaries");
        return employeeSalaryService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the EmployeeSalary instance associated with the given id.")
    public EmployeeSalary getEmployeeSalary(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeSalary with id: {}", id);
        EmployeeSalary foundEmployeeSalary = employeeSalaryService.getById(id);
        LOGGER.debug("EmployeeSalary details with id: {}", foundEmployeeSalary);
        return foundEmployeeSalary;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the EmployeeSalary instance associated with the given id.")
    public EmployeeSalary editEmployeeSalary(@PathVariable(value = "id") Integer id, @RequestBody EmployeeSalary employeesalary) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeSalary with id: {}", employeesalary.getIdEmployeeSalary());
        employeesalary.setIdEmployeeSalary(id);
        employeesalary = employeeSalaryService.update(employeesalary);
        LOGGER.debug("EmployeeSalary details with id: {}", employeesalary);
        return employeesalary;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the EmployeeSalary instance associated with the given id.")
    public boolean deleteEmployeeSalary(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeSalary with id: {}", id);
        EmployeeSalary deletedEmployeeSalary = employeeSalaryService.delete(id);
        return deletedEmployeeSalary != null;
    }
}
