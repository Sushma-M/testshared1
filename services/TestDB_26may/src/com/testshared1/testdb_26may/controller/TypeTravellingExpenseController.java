/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.TravelExpense;
import com.testshared1.testdb_26may.TypeTravellingExpense;
import com.testshared1.testdb_26may.service.TravelExpenseService;
import com.testshared1.testdb_26may.service.TypeTravellingExpenseService;


/**
 * Controller object for domain model class TypeTravellingExpense.
 * @see TypeTravellingExpense
 */
@RestController("TestDB_26may.TypeTravellingExpenseController")
@Api(value = "/TestDB_26may/TypeTravellingExpense", description = "Exposes APIs to work with TypeTravellingExpense resource.")
@RequestMapping("/TestDB_26may/TypeTravellingExpense")
public class TypeTravellingExpenseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeTravellingExpenseController.class);

    @Autowired
	@Qualifier("TestDB_26may.TypeTravellingExpenseService")
	private TypeTravellingExpenseService typeTravellingExpenseService;

    @Autowired
	@Qualifier("TestDB_26may.TravelExpenseService")
	private TravelExpenseService travelExpenseService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeTravellingExpense instance.")
	public TypeTravellingExpense createTypeTravellingExpense(@RequestBody TypeTravellingExpense typetravellingexpense) {
		LOGGER.debug("Create TypeTravellingExpense with information: {}" , typetravellingexpense);

		typetravellingexpense = typeTravellingExpenseService.create(typetravellingexpense);
		LOGGER.debug("Created TypeTravellingExpense with information: {}" , typetravellingexpense);

	    return typetravellingexpense;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeTravellingExpense instance associated with the given id.")
    public TypeTravellingExpense getTypeTravellingExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeTravellingExpense with id: {}" , id);

        TypeTravellingExpense foundTypeTravellingExpense = typeTravellingExpenseService.getById(id);
        LOGGER.debug("TypeTravellingExpense details with id: {}" , foundTypeTravellingExpense);

        return foundTypeTravellingExpense;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeTravellingExpense instance associated with the given id.")
    public TypeTravellingExpense editTypeTravellingExpense(@PathVariable("id") Integer id, @RequestBody TypeTravellingExpense typetravellingexpense) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeTravellingExpense with id: {}" , typetravellingexpense.getIdTypeTravellingExpense());

        typetravellingexpense.setIdTypeTravellingExpense(id);
        typetravellingexpense = typeTravellingExpenseService.update(typetravellingexpense);
        LOGGER.debug("TypeTravellingExpense details with id: {}" , typetravellingexpense);

        return typetravellingexpense;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeTravellingExpense instance associated with the given id.")
    public boolean deleteTypeTravellingExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeTravellingExpense with id: {}" , id);

        TypeTravellingExpense deletedTypeTravellingExpense = typeTravellingExpenseService.delete(id);

        return deletedTypeTravellingExpense != null;
    }
    /**
     * @deprecated Use {@link #findTypeTravellingExpenses(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeTravellingExpense instances matching the search criteria.")
	public Page<TypeTravellingExpense> findTypeTravellingExpenses( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeTravellingExpenses list");
		return typeTravellingExpenseService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeTravellingExpense instances matching the search criteria.")
    public Page<TypeTravellingExpense> findTypeTravellingExpenses(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeTravellingExpenses list");
    	return typeTravellingExpenseService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeTravellingExpenses(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return typeTravellingExpenseService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeTravellingExpense instances.")
	public Long countTypeTravellingExpenses(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TypeTravellingExpenses");
		return typeTravellingExpenseService.count(query);
	}

    @RequestMapping(value="/{id:.+}/travelExpenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the travelExpenses instance associated with the given id.")
     public Page<TravelExpense>
        findAssociatedTravelExpenses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated travelExpenses");
        return travelExpenseService.findAssociatedValues(id, "TravelExpense", "idTypeTravellingExpense", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeTravellingExpenseService instance
	 */
	protected void setTypeTravellingExpenseService(TypeTravellingExpenseService service) {
		this.typeTravellingExpenseService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TravelExpenseService instance
	 */
	protected void setTravelExpenseService(TravelExpenseService service) {
        this.travelExpenseService = service;
    }
}

