/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.ListTravelExpenseDetail;
import com.testshared1.testdb_26may.service.ListTravelExpenseDetailService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ListTravelExpenseDetail.
 * @see ListTravelExpenseDetail
 */
@RestController("TestDB_26may.ListTravelExpenseDetailController")
@RequestMapping("/TestDB_26may/ListTravelExpenseDetail")
@Api(description = "Exposes APIs to work with ListTravelExpenseDetail resource.", value = "ListTravelExpenseDetailController")
public class ListTravelExpenseDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListTravelExpenseDetailController.class);

    @Autowired
    @Qualifier("TestDB_26may.ListTravelExpenseDetailService")
    private ListTravelExpenseDetailService listTravelExpenseDetailService;

    /**
     * @deprecated Use {@link #findListTravelExpenseDetails(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ListTravelExpenseDetail instances matching the search criteria.")
    public Page<ListTravelExpenseDetail> findListTravelExpenseDetails(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ListTravelExpenseDetails list");
        return listTravelExpenseDetailService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ListTravelExpenseDetail instances matching the search criteria.")
    public Page<ListTravelExpenseDetail> findListTravelExpenseDetails(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ListTravelExpenseDetails list");
        return listTravelExpenseDetailService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportListTravelExpenseDetails(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return listTravelExpenseDetailService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ListTravelExpenseDetailService instance
	 */
    protected void setListTravelExpenseDetailService(ListTravelExpenseDetailService service) {
        this.listTravelExpenseDetailService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ListTravelExpenseDetail instance.")
    public ListTravelExpenseDetail createListTravelExpenseDetail(@RequestBody ListTravelExpenseDetail listtravelexpensedetail) {
        LOGGER.debug("Create ListTravelExpenseDetail with information: {}", listtravelexpensedetail);
        listtravelexpensedetail = listTravelExpenseDetailService.create(listtravelexpensedetail);
        LOGGER.debug("Created ListTravelExpenseDetail with information: {}", listtravelexpensedetail);
        return listtravelexpensedetail;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ListTravelExpenseDetail instances.")
    public Long countListTravelExpenseDetails(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ListTravelExpenseDetails");
        return listTravelExpenseDetailService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ListTravelExpenseDetail instance associated with the given id.")
    public ListTravelExpenseDetail getListTravelExpenseDetail(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListTravelExpenseDetail with id: {}", id);
        ListTravelExpenseDetail foundListTravelExpenseDetail = listTravelExpenseDetailService.getById(id);
        LOGGER.debug("ListTravelExpenseDetail details with id: {}", foundListTravelExpenseDetail);
        return foundListTravelExpenseDetail;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ListTravelExpenseDetail instance associated with the given id.")
    public ListTravelExpenseDetail editListTravelExpenseDetail(@PathVariable(value = "id") Integer id, @RequestBody ListTravelExpenseDetail listtravelexpensedetail) throws EntityNotFoundException {
        LOGGER.debug("Editing ListTravelExpenseDetail with id: {}", listtravelexpensedetail.getIdListTravelExpenseDetail());
        listtravelexpensedetail.setIdListTravelExpenseDetail(id);
        listtravelexpensedetail = listTravelExpenseDetailService.update(listtravelexpensedetail);
        LOGGER.debug("ListTravelExpenseDetail details with id: {}", listtravelexpensedetail);
        return listtravelexpensedetail;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ListTravelExpenseDetail instance associated with the given id.")
    public boolean deleteListTravelExpenseDetail(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListTravelExpenseDetail with id: {}", id);
        ListTravelExpenseDetail deletedListTravelExpenseDetail = listTravelExpenseDetailService.delete(id);
        return deletedListTravelExpenseDetail != null;
    }
}
