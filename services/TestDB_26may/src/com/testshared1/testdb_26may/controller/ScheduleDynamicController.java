/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeSalary;
import com.testshared1.testdb_26may.ScheduleDynamic;
import com.testshared1.testdb_26may.service.EmployeeSalaryService;
import com.testshared1.testdb_26may.service.ScheduleDynamicService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ScheduleDynamic.
 * @see ScheduleDynamic
 */
@RestController("TestDB_26may.ScheduleDynamicController")
@RequestMapping("/TestDB_26may/ScheduleDynamic")
@Api(description = "Exposes APIs to work with ScheduleDynamic resource.", value = "ScheduleDynamicController")
public class ScheduleDynamicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleDynamicController.class);

    @Autowired
    @Qualifier("TestDB_26may.ScheduleDynamicService")
    private ScheduleDynamicService scheduleDynamicService;

    @Autowired
    @Qualifier("TestDB_26may.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;

    /**
     * @deprecated Use {@link #findScheduleDynamics(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ScheduleDynamic instances matching the search criteria.")
    public Page<ScheduleDynamic> findScheduleDynamics(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ScheduleDynamics list");
        return scheduleDynamicService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ScheduleDynamic instances matching the search criteria.")
    public Page<ScheduleDynamic> findScheduleDynamics(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ScheduleDynamics list");
        return scheduleDynamicService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportScheduleDynamics(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return scheduleDynamicService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/employeeSalaries", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
    public Page<EmployeeSalary> findAssociatedEmployeeSalaries(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id, "EmployeeSalary", "idScheduleDynamic", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ScheduleDynamicService instance
	 */
    protected void setScheduleDynamicService(ScheduleDynamicService service) {
        this.scheduleDynamicService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeSalaryService instance
	 */
    protected void setEmployeeSalaryService(EmployeeSalaryService service) {
        this.employeeSalaryService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ScheduleDynamic instance.")
    public ScheduleDynamic createScheduleDynamic(@RequestBody ScheduleDynamic scheduledynamic) {
        LOGGER.debug("Create ScheduleDynamic with information: {}", scheduledynamic);
        scheduledynamic = scheduleDynamicService.create(scheduledynamic);
        LOGGER.debug("Created ScheduleDynamic with information: {}", scheduledynamic);
        return scheduledynamic;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ScheduleDynamic instances.")
    public Long countScheduleDynamics(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ScheduleDynamics");
        return scheduleDynamicService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ScheduleDynamic instance associated with the given id.")
    public ScheduleDynamic getScheduleDynamic(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScheduleDynamic with id: {}", id);
        ScheduleDynamic foundScheduleDynamic = scheduleDynamicService.getById(id);
        LOGGER.debug("ScheduleDynamic details with id: {}", foundScheduleDynamic);
        return foundScheduleDynamic;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ScheduleDynamic instance associated with the given id.")
    public ScheduleDynamic editScheduleDynamic(@PathVariable(value = "id") Integer id, @RequestBody ScheduleDynamic scheduledynamic) throws EntityNotFoundException {
        LOGGER.debug("Editing ScheduleDynamic with id: {}", scheduledynamic.getIdScheduleDynamic());
        scheduledynamic.setIdScheduleDynamic(id);
        scheduledynamic = scheduleDynamicService.update(scheduledynamic);
        LOGGER.debug("ScheduleDynamic details with id: {}", scheduledynamic);
        return scheduledynamic;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ScheduleDynamic instance associated with the given id.")
    public boolean deleteScheduleDynamic(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleDynamic with id: {}", id);
        ScheduleDynamic deletedScheduleDynamic = scheduleDynamicService.delete(id);
        return deletedScheduleDynamic != null;
    }
}
