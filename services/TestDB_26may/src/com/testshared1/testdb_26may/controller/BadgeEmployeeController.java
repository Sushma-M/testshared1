/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.BadgeEmployee;
import com.testshared1.testdb_26may.service.BadgeEmployeeService;


/**
 * Controller object for domain model class BadgeEmployee.
 * @see BadgeEmployee
 */
@RestController("TestDB_26may.BadgeEmployeeController")
@Api(value = "/TestDB_26may/BadgeEmployee", description = "Exposes APIs to work with BadgeEmployee resource.")
@RequestMapping("/TestDB_26may/BadgeEmployee")
public class BadgeEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BadgeEmployeeController.class);

    @Autowired
	@Qualifier("TestDB_26may.BadgeEmployeeService")
	private BadgeEmployeeService badgeEmployeeService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new BadgeEmployee instance.")
	public BadgeEmployee createBadgeEmployee(@RequestBody BadgeEmployee badgeemployee) {
		LOGGER.debug("Create BadgeEmployee with information: {}" , badgeemployee);

		badgeemployee = badgeEmployeeService.create(badgeemployee);
		LOGGER.debug("Created BadgeEmployee with information: {}" , badgeemployee);

	    return badgeemployee;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the BadgeEmployee instance associated with the given id.")
    public BadgeEmployee getBadgeEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BadgeEmployee with id: {}" , id);

        BadgeEmployee foundBadgeEmployee = badgeEmployeeService.getById(id);
        LOGGER.debug("BadgeEmployee details with id: {}" , foundBadgeEmployee);

        return foundBadgeEmployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the BadgeEmployee instance associated with the given id.")
    public BadgeEmployee editBadgeEmployee(@PathVariable("id") Integer id, @RequestBody BadgeEmployee badgeemployee) throws EntityNotFoundException {
        LOGGER.debug("Editing BadgeEmployee with id: {}" , badgeemployee.getIdBadgeEmployee());

        badgeemployee.setIdBadgeEmployee(id);
        badgeemployee = badgeEmployeeService.update(badgeemployee);
        LOGGER.debug("BadgeEmployee details with id: {}" , badgeemployee);

        return badgeemployee;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the BadgeEmployee instance associated with the given id.")
    public boolean deleteBadgeEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BadgeEmployee with id: {}" , id);

        BadgeEmployee deletedBadgeEmployee = badgeEmployeeService.delete(id);

        return deletedBadgeEmployee != null;
    }
    /**
     * @deprecated Use {@link #findBadgeEmployees(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of BadgeEmployee instances matching the search criteria.")
	public Page<BadgeEmployee> findBadgeEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering BadgeEmployees list");
		return badgeEmployeeService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BadgeEmployee instances matching the search criteria.")
    public Page<BadgeEmployee> findBadgeEmployees(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BadgeEmployees list");
    	return badgeEmployeeService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportBadgeEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return badgeEmployeeService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of BadgeEmployee instances.")
	public Long countBadgeEmployees(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BadgeEmployees");
		return badgeEmployeeService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BadgeEmployeeService instance
	 */
	protected void setBadgeEmployeeService(BadgeEmployeeService service) {
		this.badgeEmployeeService = service;
	}

}

