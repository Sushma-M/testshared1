/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.EmployeeFileLocation;
import com.testshared1.testdb_26may.TypeMovement;
import com.testshared1.testdb_26may.service.EmployeeFileLocationService;
import com.testshared1.testdb_26may.service.TypeMovementService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TypeMovement.
 * @see TypeMovement
 */
@RestController("TestDB_26may.TypeMovementController")
@RequestMapping("/TestDB_26may/TypeMovement")
@Api(description = "Exposes APIs to work with TypeMovement resource.", value = "TypeMovementController")
public class TypeMovementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeMovementController.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeMovementService")
    private TypeMovementService typeMovementService;

    @Autowired
    @Qualifier("TestDB_26may.EmployeeFileLocationService")
    private EmployeeFileLocationService employeeFileLocationService;

    /**
     * @deprecated Use {@link #findTypeMovements(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TypeMovement instances matching the search criteria.")
    public Page<TypeMovement> findTypeMovements(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TypeMovements list");
        return typeMovementService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TypeMovement instances matching the search criteria.")
    public Page<TypeMovement> findTypeMovements(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TypeMovements list");
        return typeMovementService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTypeMovements(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return typeMovementService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/employeeFileLocations", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeFileLocations instance associated with the given id.")
    public Page<EmployeeFileLocation> findAssociatedEmployeeFileLocations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employeeFileLocations");
        return employeeFileLocationService.findAssociatedValues(id, "EmployeeFileLocation", "idTypeMovement", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TypeMovementService instance
	 */
    protected void setTypeMovementService(TypeMovementService service) {
        this.typeMovementService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeFileLocationService instance
	 */
    protected void setEmployeeFileLocationService(EmployeeFileLocationService service) {
        this.employeeFileLocationService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TypeMovement instance.")
    public TypeMovement createTypeMovement(@RequestBody TypeMovement typemovement) {
        LOGGER.debug("Create TypeMovement with information: {}", typemovement);
        typemovement = typeMovementService.create(typemovement);
        LOGGER.debug("Created TypeMovement with information: {}", typemovement);
        return typemovement;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TypeMovement instances.")
    public Long countTypeMovements(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting TypeMovements");
        return typeMovementService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TypeMovement instance associated with the given id.")
    public TypeMovement getTypeMovement(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeMovement with id: {}", id);
        TypeMovement foundTypeMovement = typeMovementService.getById(id);
        LOGGER.debug("TypeMovement details with id: {}", foundTypeMovement);
        return foundTypeMovement;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TypeMovement instance associated with the given id.")
    public TypeMovement editTypeMovement(@PathVariable(value = "id") Integer id, @RequestBody TypeMovement typemovement) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeMovement with id: {}", typemovement.getIdTypeMovement());
        typemovement.setIdTypeMovement(id);
        typemovement = typeMovementService.update(typemovement);
        LOGGER.debug("TypeMovement details with id: {}", typemovement);
        return typemovement;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TypeMovement instance associated with the given id.")
    public boolean deleteTypeMovement(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeMovement with id: {}", id);
        TypeMovement deletedTypeMovement = typeMovementService.delete(id);
        return deletedTypeMovement != null;
    }
}
