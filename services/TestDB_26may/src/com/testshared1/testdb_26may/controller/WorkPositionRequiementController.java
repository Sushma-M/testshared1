/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testshared1.testdb_26may.WorkPositionRequiement;
import com.testshared1.testdb_26may.service.WorkPositionRequiementService;


/**
 * Controller object for domain model class WorkPositionRequiement.
 * @see WorkPositionRequiement
 */
@RestController("TestDB_26may.WorkPositionRequiementController")
@Api(value = "/TestDB_26may/WorkPositionRequiement", description = "Exposes APIs to work with WorkPositionRequiement resource.")
@RequestMapping("/TestDB_26may/WorkPositionRequiement")
public class WorkPositionRequiementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionRequiementController.class);

    @Autowired
	@Qualifier("TestDB_26may.WorkPositionRequiementService")
	private WorkPositionRequiementService workPositionRequiementService;


	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new WorkPositionRequiement instance.")
	public WorkPositionRequiement createWorkPositionRequiement(@RequestBody WorkPositionRequiement workpositionrequiement) {
		LOGGER.debug("Create WorkPositionRequiement with information: {}" , workpositionrequiement);

		workpositionrequiement = workPositionRequiementService.create(workpositionrequiement);
		LOGGER.debug("Created WorkPositionRequiement with information: {}" , workpositionrequiement);

	    return workpositionrequiement;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the WorkPositionRequiement instance associated with the given id.")
    public WorkPositionRequiement getWorkPositionRequiement(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting WorkPositionRequiement with id: {}" , id);

        WorkPositionRequiement foundWorkPositionRequiement = workPositionRequiementService.getById(id);
        LOGGER.debug("WorkPositionRequiement details with id: {}" , foundWorkPositionRequiement);

        return foundWorkPositionRequiement;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the WorkPositionRequiement instance associated with the given id.")
    public WorkPositionRequiement editWorkPositionRequiement(@PathVariable("id") Integer id, @RequestBody WorkPositionRequiement workpositionrequiement) throws EntityNotFoundException {
        LOGGER.debug("Editing WorkPositionRequiement with id: {}" , workpositionrequiement.getIdWorkPositionRequiement());

        workpositionrequiement.setIdWorkPositionRequiement(id);
        workpositionrequiement = workPositionRequiementService.update(workpositionrequiement);
        LOGGER.debug("WorkPositionRequiement details with id: {}" , workpositionrequiement);

        return workpositionrequiement;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the WorkPositionRequiement instance associated with the given id.")
    public boolean deleteWorkPositionRequiement(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPositionRequiement with id: {}" , id);

        WorkPositionRequiement deletedWorkPositionRequiement = workPositionRequiementService.delete(id);

        return deletedWorkPositionRequiement != null;
    }
    /**
     * @deprecated Use {@link #findWorkPositionRequiements(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of WorkPositionRequiement instances matching the search criteria.")
	public Page<WorkPositionRequiement> findWorkPositionRequiements( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering WorkPositionRequiements list");
		return workPositionRequiementService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of WorkPositionRequiement instances matching the search criteria.")
    public Page<WorkPositionRequiement> findWorkPositionRequiements(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering WorkPositionRequiements list");
    	return workPositionRequiementService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportWorkPositionRequiements(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return workPositionRequiementService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of WorkPositionRequiement instances.")
	public Long countWorkPositionRequiements(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting WorkPositionRequiements");
		return workPositionRequiementService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionRequiementService instance
	 */
	protected void setWorkPositionRequiementService(WorkPositionRequiementService service) {
		this.workPositionRequiementService = service;
	}

}

