/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.Announcement;
import com.testshared1.testdb_26may.service.AnnouncementService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Announcement.
 * @see Announcement
 */
@RestController("TestDB_26may.AnnouncementController")
@RequestMapping("/TestDB_26may/Announcement")
@Api(description = "Exposes APIs to work with Announcement resource.", value = "AnnouncementController")
public class AnnouncementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnnouncementController.class);

    @Autowired
    @Qualifier("TestDB_26may.AnnouncementService")
    private AnnouncementService announcementService;

    /**
     * @deprecated Use {@link #findAnnouncements(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Announcement instances matching the search criteria.")
    public Page<Announcement> findAnnouncements(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Announcements list");
        return announcementService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Announcement instances matching the search criteria.")
    public Page<Announcement> findAnnouncements(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Announcements list");
        return announcementService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportAnnouncements(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return announcementService.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AnnouncementService instance
	 */
    protected void setAnnouncementService(AnnouncementService service) {
        this.announcementService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Announcement instance.")
    public Announcement createAnnouncement(@RequestBody Announcement announcement) {
        LOGGER.debug("Create Announcement with information: {}", announcement);
        announcement = announcementService.create(announcement);
        LOGGER.debug("Created Announcement with information: {}", announcement);
        return announcement;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Announcement instances.")
    public Long countAnnouncements(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Announcements");
        return announcementService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Announcement instance associated with the given id.")
    public Announcement getAnnouncement(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Announcement with id: {}", id);
        Announcement foundAnnouncement = announcementService.getById(id);
        LOGGER.debug("Announcement details with id: {}", foundAnnouncement);
        return foundAnnouncement;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Announcement instance associated with the given id.")
    public Announcement editAnnouncement(@PathVariable(value = "id") Integer id, @RequestBody Announcement announcement) throws EntityNotFoundException {
        LOGGER.debug("Editing Announcement with id: {}", announcement.getIdAnnouncement());
        announcement.setIdAnnouncement(id);
        announcement = announcementService.update(announcement);
        LOGGER.debug("Announcement details with id: {}", announcement);
        return announcement;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Announcement instance associated with the given id.")
    public boolean deleteAnnouncement(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Announcement with id: {}", id);
        Announcement deletedAnnouncement = announcementService.delete(id);
        return deletedAnnouncement != null;
    }
}
