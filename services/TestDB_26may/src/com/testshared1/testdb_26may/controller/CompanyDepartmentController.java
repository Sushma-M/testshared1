/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/
package com.testshared1.testdb_26may.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.testshared1.testdb_26may.CompanyDepartment;
import com.testshared1.testdb_26may.WorkPosition;
import com.testshared1.testdb_26may.service.CompanyDepartmentService;
import com.testshared1.testdb_26may.service.WorkPositionService;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CompanyDepartment.
 * @see CompanyDepartment
 */
@RestController("TestDB_26may.CompanyDepartmentController")
@RequestMapping("/TestDB_26may/CompanyDepartment")
@Api(description = "Exposes APIs to work with CompanyDepartment resource.", value = "CompanyDepartmentController")
public class CompanyDepartmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyDepartmentController.class);

    @Autowired
    @Qualifier("TestDB_26may.CompanyDepartmentService")
    private CompanyDepartmentService companyDepartmentService;

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionService")
    private WorkPositionService workPositionService;

    /**
     * @deprecated Use {@link #findCompanyDepartments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CompanyDepartment instances matching the search criteria.")
    public Page<CompanyDepartment> findCompanyDepartments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompanyDepartments list");
        return companyDepartmentService.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CompanyDepartment instances matching the search criteria.")
    public Page<CompanyDepartment> findCompanyDepartments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompanyDepartments list");
        return companyDepartmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportCompanyDepartments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return companyDepartmentService.export(exportType, query, pageable);
    }

    @RequestMapping(value = "/{id:.+}/workPositions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositions instance associated with the given id.")
    public Page<WorkPosition> findAssociatedWorkPositions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workPositions");
        return workPositionService.findAssociatedValues(id, "WorkPosition", "idCompanyDepartment", pageable);
    }

    @RequestMapping(value = "/{id:.+}/companyDepartmentsForFkSuperiorDepartment", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the companyDepartmentsForFkSuperiorDepartment instance associated with the given id.")
    public Page<CompanyDepartment> findAssociatedCompanyDepartmentsForFkSuperiorDepartment(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated companyDepartmentsForFkSuperiorDepartment");
        return companyDepartmentService.findAssociatedValues(id, "CompanyDepartment", "idCompanyDepartment", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompanyDepartmentService instance
	 */
    protected void setCompanyDepartmentService(CompanyDepartmentService service) {
        this.companyDepartmentService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WorkPositionService instance
	 */
    protected void setWorkPositionService(WorkPositionService service) {
        this.workPositionService = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new CompanyDepartment instance.")
    public CompanyDepartment createCompanyDepartment(@RequestBody CompanyDepartment companydepartment) {
        LOGGER.debug("Create CompanyDepartment with information: {}", companydepartment);
        companydepartment = companyDepartmentService.create(companydepartment);
        LOGGER.debug("Created CompanyDepartment with information: {}", companydepartment);
        return companydepartment;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CompanyDepartment instances.")
    public Long countCompanyDepartments(@RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting CompanyDepartments");
        return companyDepartmentService.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CompanyDepartment instance associated with the given id.")
    public CompanyDepartment getCompanyDepartment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CompanyDepartment with id: {}", id);
        CompanyDepartment foundCompanyDepartment = companyDepartmentService.getById(id);
        LOGGER.debug("CompanyDepartment details with id: {}", foundCompanyDepartment);
        return foundCompanyDepartment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the CompanyDepartment instance associated with the given id.")
    public CompanyDepartment editCompanyDepartment(@PathVariable(value = "id") Integer id, @RequestBody CompanyDepartment companydepartment) throws EntityNotFoundException {
        LOGGER.debug("Editing CompanyDepartment with id: {}", companydepartment.getIdCompanyDepartment());
        companydepartment.setIdCompanyDepartment(id);
        companydepartment = companyDepartmentService.update(companydepartment);
        LOGGER.debug("CompanyDepartment details with id: {}", companydepartment);
        return companydepartment;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the CompanyDepartment instance associated with the given id.")
    public boolean deleteCompanyDepartment(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompanyDepartment with id: {}", id);
        CompanyDepartment deletedCompanyDepartment = companyDepartmentService.delete(id);
        return deletedCompanyDepartment != null;
    }
}
