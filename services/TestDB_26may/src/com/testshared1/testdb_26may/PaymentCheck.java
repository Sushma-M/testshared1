/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * PaymentCheck generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`payment_check`")
public class PaymentCheck implements Serializable {

    private Integer idPaymentCheck;
    private Date creationDate;
    @Type(type = "DateTime")
    private LocalDateTime imprintDate;
    private Double amount;
    private Integer noCheque;
    private Boolean impreso;
    private String observation;
    private Integer userMode;
    private Integer userLocation;
    private Date userFecha;
    private PayrollDetail payrollDetail;
    private User user;

    @Id
    @Column(name = "`id_payment_check`", nullable = false, scale = 0, precision = 10)
    public Integer getIdPaymentCheck() {
        return this.idPaymentCheck;
    }

    public void setIdPaymentCheck(Integer idPaymentCheck) {
        this.idPaymentCheck = idPaymentCheck;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "`creation_date`", nullable = false)
    public Date getCreationDate() {
        return this.creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    @Column(name = "`imprint_date`", nullable = true)
    public LocalDateTime getImprintDate() {
        return this.imprintDate;
    }

    public void setImprintDate(LocalDateTime imprintDate) {
        this.imprintDate = imprintDate;
    }

    @Column(name = "`amount`", nullable = false, scale = 4, precision = 19)
    public Double getAmount() {
        return this.amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    @Column(name = "`no_cheque`", nullable = false, scale = 0, precision = 10)
    public Integer getNoCheque() {
        return this.noCheque;
    }

    public void setNoCheque(Integer noCheque) {
        this.noCheque = noCheque;
    }

    @Column(name = "`impreso`", nullable = false)
    public Boolean isImpreso() {
        return this.impreso;
    }

    public void setImpreso(Boolean impreso) {
        this.impreso = impreso;
    }

    @Column(name = "`observation`", nullable = true, length = 250)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_payroll_detail`", referencedColumnName = "`id_payroll_detail`", insertable = true, updatable = true)
    public PayrollDetail getPayrollDetail() {
        return this.payrollDetail;
    }

    public void setPayrollDetail(PayrollDetail payrollDetail) {
        this.payrollDetail = payrollDetail;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_user_prints`", referencedColumnName = "`id_user`", insertable = true, updatable = true)
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof PaymentCheck)) return false;
        final PaymentCheck paymentCheck = (PaymentCheck) o;
        return Objects.equals(getIdPaymentCheck(), paymentCheck.getIdPaymentCheck());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdPaymentCheck());
    }
}

