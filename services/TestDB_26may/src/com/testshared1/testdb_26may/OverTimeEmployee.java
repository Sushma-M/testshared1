/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * OverTimeEmployee generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`over_time_employee`")
public class OverTimeEmployee implements Serializable {

    private Integer idOverTimeEmployee;
    @Type(type = "DateTime")
    private LocalDateTime startTime;
    @Type(type = "DateTime")
    private LocalDateTime endTime;
    private String observation;
    private Integer userLocation;
    private Integer userMode;
    private Date userFecha;
    private List<ListOvertimePayroll> listOvertimePayrolls = new ArrayList<>();
    private Employee employee;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_over_time_employee`", nullable = false, scale = 0, precision = 10)
    public Integer getIdOverTimeEmployee() {
        return this.idOverTimeEmployee;
    }

    public void setIdOverTimeEmployee(Integer idOverTimeEmployee) {
        this.idOverTimeEmployee = idOverTimeEmployee;
    }

    @Column(name = "`start_time`", nullable = false)
    public LocalDateTime getStartTime() {
        return this.startTime;
    }

    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    @Column(name = "`end_time`", nullable = false)
    public LocalDateTime getEndTime() {
        return this.endTime;
    }

    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
    }

    @Column(name = "`observation`", nullable = true, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`user_location`", nullable = false, scale = 0, precision = 10)
    public Integer getUserLocation() {
        return this.userLocation;
    }

    public void setUserLocation(Integer userLocation) {
        this.userLocation = userLocation;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "overTimeEmployee")
    public List<ListOvertimePayroll> getListOvertimePayrolls() {
        return this.listOvertimePayrolls;
    }

    public void setListOvertimePayrolls(List<ListOvertimePayroll> listOvertimePayrolls) {
        this.listOvertimePayrolls = listOvertimePayrolls;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OverTimeEmployee)) return false;
        final OverTimeEmployee overTimeEmployee = (OverTimeEmployee) o;
        return Objects.equals(getIdOverTimeEmployee(), overTimeEmployee.getIdOverTimeEmployee());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdOverTimeEmployee());
    }
}

