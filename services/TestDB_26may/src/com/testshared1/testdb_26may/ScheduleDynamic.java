/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * ScheduleDynamic generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`schedule_dynamic`")
public class ScheduleDynamic implements Serializable {

    private Integer idScheduleDynamic;
    @Type(type = "DateTime")
    private LocalDateTime checkIn;
    @Type(type = "DateTime")
    private LocalDateTime lunchHourStart;
    @Type(type = "DateTime")
    private LocalDateTime lunchHourEnd;
    @Type(type = "DateTime")
    private LocalDateTime outputTime;
    private String observation;
    private Boolean hourLunchPaid;
    private Integer userMode;
    private Date userFecha;
    private List<EmployeeSalary> employeeSalaries = new ArrayList<>();
    private Employee employee;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id_schedule_dynamic`", nullable = false, scale = 0, precision = 10)
    public Integer getIdScheduleDynamic() {
        return this.idScheduleDynamic;
    }

    public void setIdScheduleDynamic(Integer idScheduleDynamic) {
        this.idScheduleDynamic = idScheduleDynamic;
    }

    @Column(name = "`check_in`", nullable = false)
    public LocalDateTime getCheckIn() {
        return this.checkIn;
    }

    public void setCheckIn(LocalDateTime checkIn) {
        this.checkIn = checkIn;
    }

    @Column(name = "`lunch_hour_start`", nullable = false)
    public LocalDateTime getLunchHourStart() {
        return this.lunchHourStart;
    }

    public void setLunchHourStart(LocalDateTime lunchHourStart) {
        this.lunchHourStart = lunchHourStart;
    }

    @Column(name = "`lunch_hour_end`", nullable = false)
    public LocalDateTime getLunchHourEnd() {
        return this.lunchHourEnd;
    }

    public void setLunchHourEnd(LocalDateTime lunchHourEnd) {
        this.lunchHourEnd = lunchHourEnd;
    }

    @Column(name = "`output_time`", nullable = false)
    public LocalDateTime getOutputTime() {
        return this.outputTime;
    }

    public void setOutputTime(LocalDateTime outputTime) {
        this.outputTime = outputTime;
    }

    @Column(name = "`observation`", nullable = true, length = 255)
    public String getObservation() {
        return this.observation;
    }

    public void setObservation(String observation) {
        this.observation = observation;
    }

    @Column(name = "`hour_lunch_paid`", nullable = false)
    public Boolean isHourLunchPaid() {
        return this.hourLunchPaid;
    }

    public void setHourLunchPaid(Boolean hourLunchPaid) {
        this.hourLunchPaid = hourLunchPaid;
    }

    @Column(name = "`user_mode`", nullable = false, scale = 0, precision = 10)
    public Integer getUserMode() {
        return this.userMode;
    }

    public void setUserMode(Integer userMode) {
        this.userMode = userMode;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`user_fecha`", nullable = false)
    public Date getUserFecha() {
        return this.userFecha;
    }

    public void setUserFecha(Date userFecha) {
        this.userFecha = userFecha;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "scheduleDynamic")
    public List<EmployeeSalary> getEmployeeSalaries() {
        return this.employeeSalaries;
    }

    public void setEmployeeSalaries(List<EmployeeSalary> employeeSalaries) {
        this.employeeSalaries = employeeSalaries;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`fk_employee`", referencedColumnName = "`id_employee`", insertable = true, updatable = true)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ScheduleDynamic)) return false;
        final ScheduleDynamic scheduleDynamic = (ScheduleDynamic) o;
        return Objects.equals(getIdScheduleDynamic(), scheduleDynamic.getIdScheduleDynamic());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdScheduleDynamic());
    }
}

