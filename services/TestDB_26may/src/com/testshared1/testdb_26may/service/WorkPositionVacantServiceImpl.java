/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.WorkPositionVacant;

/**
 * ServiceImpl object for domain model class WorkPositionVacant.
 *
 * @see WorkPositionVacant
 */
@Service("TestDB_26may.WorkPositionVacantService")
public class WorkPositionVacantServiceImpl implements WorkPositionVacantService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionVacantServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionVacantDao")
    private WMGenericDao<WorkPositionVacant, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPositionVacant, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public WorkPositionVacant create(WorkPositionVacant workpositionvacant) {
        LOGGER.debug("Creating a new WorkPositionVacant with information: {}", workpositionvacant);
        return this.wmGenericDao.create(workpositionvacant);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionVacant getById(Integer workpositionvacantId) throws EntityNotFoundException {
        LOGGER.debug("Finding WorkPositionVacant by id: {}", workpositionvacantId);
        WorkPositionVacant workpositionvacant = this.wmGenericDao.findById(workpositionvacantId);
        if (workpositionvacant == null){
            LOGGER.debug("No WorkPositionVacant found with id: {}", workpositionvacantId);
            throw new EntityNotFoundException(String.valueOf(workpositionvacantId));
        }
        return workpositionvacant;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionVacant update(WorkPositionVacant workpositionvacant) throws EntityNotFoundException {
        LOGGER.debug("Updating WorkPositionVacant with information: {}", workpositionvacant);
        this.wmGenericDao.update(workpositionvacant);

        Integer workpositionvacantId = workpositionvacant.getIdWorkPositionVacant();

        return this.wmGenericDao.findById(workpositionvacantId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionVacant delete(Integer workpositionvacantId) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPositionVacant with id: {}", workpositionvacantId);
        WorkPositionVacant deleted = this.wmGenericDao.findById(workpositionvacantId);
        if (deleted == null) {
            LOGGER.debug("No WorkPositionVacant found with id: {}", workpositionvacantId);
            throw new EntityNotFoundException(String.valueOf(workpositionvacantId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<WorkPositionVacant> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositionVacants");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<WorkPositionVacant> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositionVacants");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table WorkPositionVacant to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<WorkPositionVacant> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

