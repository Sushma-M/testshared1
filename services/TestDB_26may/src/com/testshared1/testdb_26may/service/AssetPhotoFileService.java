/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssetPhotoFile;

/**
 * Service object for domain model class AssetPhotoFile.
 *
 * @see {@link AssetPhotoFile}
 */
public interface AssetPhotoFileService {

    /**
     * Creates a new AssetPhotoFile.
     *
     * @param assetPhotoFile The information of the created CompositeTable.
     * @return The created AssetPhotoFile.
     */
	AssetPhotoFile create(AssetPhotoFile assetPhotoFile);


	/**
	 * Finds AssetPhotoFile by id.
	 *
	 * @param assetPhotoFileId The id of the wanted AssetPhotoFile.
	 * @return The found AssetPhotoFile. If no AssetPhotoFile is found, this method returns null.
	 */
	AssetPhotoFile getById(Integer assetPhotoFileId) throws EntityNotFoundException;

	/**
	 * Updates the information of a AssetPhotoFile.
	 *
	 * @param assetPhotoFile The information of the updated AssetPhotoFile.
	 * @return The updated AssetPhotoFile.
     *
	 * @throws EntityNotFoundException if no AssetPhotoFile is found with given id.
	 */
	AssetPhotoFile update(AssetPhotoFile assetPhotoFile) throws EntityNotFoundException;

    /**
	 * Deletes a AssetPhotoFile.
	 *
	 * @param assetPhotoFileId The id of the deleted AssetPhotoFile.
	 * @return The deleted AssetPhotoFile.
     *
	 * @throws EntityNotFoundException if no AssetPhotoFile is found with the given id.
	 */
	AssetPhotoFile delete(Integer assetPhotoFileId) throws EntityNotFoundException;

	/**
	 * Finds all AssetPhotoFiles.
	 *
	 * @return A list of AssetPhotoFiles.
	 */
    @Deprecated
	Page<AssetPhotoFile> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all AssetPhotoFiles.
	 * @return A list of AssetPhotoFiles.
	 */
    Page<AssetPhotoFile> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AssetPhotoFiles in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the AssetPhotoFile.
	 */
	long count(String query);

    Page<AssetPhotoFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

