/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListCommissionEmployee;

/**
 * ServiceImpl object for domain model class ListCommissionEmployee.
 *
 * @see ListCommissionEmployee
 */
@Service("TestDB_26may.ListCommissionEmployeeService")
public class ListCommissionEmployeeServiceImpl implements ListCommissionEmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCommissionEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListCommissionEmployeeDao")
    private WMGenericDao<ListCommissionEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListCommissionEmployee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListCommissionEmployee create(ListCommissionEmployee listcommissionemployee) {
        LOGGER.debug("Creating a new ListCommissionEmployee with information: {}", listcommissionemployee);
        return this.wmGenericDao.create(listcommissionemployee);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListCommissionEmployee getById(Integer listcommissionemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListCommissionEmployee by id: {}", listcommissionemployeeId);
        ListCommissionEmployee listcommissionemployee = this.wmGenericDao.findById(listcommissionemployeeId);
        if (listcommissionemployee == null){
            LOGGER.debug("No ListCommissionEmployee found with id: {}", listcommissionemployeeId);
            throw new EntityNotFoundException(String.valueOf(listcommissionemployeeId));
        }
        return listcommissionemployee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListCommissionEmployee update(ListCommissionEmployee listcommissionemployee) throws EntityNotFoundException {
        LOGGER.debug("Updating ListCommissionEmployee with information: {}", listcommissionemployee);
        this.wmGenericDao.update(listcommissionemployee);

        Integer listcommissionemployeeId = listcommissionemployee.getIdListCommissionEmployee();

        return this.wmGenericDao.findById(listcommissionemployeeId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListCommissionEmployee delete(Integer listcommissionemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCommissionEmployee with id: {}", listcommissionemployeeId);
        ListCommissionEmployee deleted = this.wmGenericDao.findById(listcommissionemployeeId);
        if (deleted == null) {
            LOGGER.debug("No ListCommissionEmployee found with id: {}", listcommissionemployeeId);
            throw new EntityNotFoundException(String.valueOf(listcommissionemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListCommissionEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListCommissionEmployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListCommissionEmployee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListCommissionEmployees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListCommissionEmployee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListCommissionEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

