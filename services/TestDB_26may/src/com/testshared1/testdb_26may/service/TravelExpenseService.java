/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TravelExpense;

/**
 * Service object for domain model class TravelExpense.
 *
 * @see {@link TravelExpense}
 */
public interface TravelExpenseService {

    /**
     * Creates a new TravelExpense.
     *
     * @param travelExpense The information of the created CompositeTable.
     * @return The created TravelExpense.
     */
	TravelExpense create(TravelExpense travelExpense);


	/**
	 * Finds TravelExpense by id.
	 *
	 * @param travelExpenseId The id of the wanted TravelExpense.
	 * @return The found TravelExpense. If no TravelExpense is found, this method returns null.
	 */
	TravelExpense getById(Integer travelExpenseId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TravelExpense.
	 *
	 * @param travelExpense The information of the updated TravelExpense.
	 * @return The updated TravelExpense.
     *
	 * @throws EntityNotFoundException if no TravelExpense is found with given id.
	 */
	TravelExpense update(TravelExpense travelExpense) throws EntityNotFoundException;

    /**
	 * Deletes a TravelExpense.
	 *
	 * @param travelExpenseId The id of the deleted TravelExpense.
	 * @return The deleted TravelExpense.
     *
	 * @throws EntityNotFoundException if no TravelExpense is found with the given id.
	 */
	TravelExpense delete(Integer travelExpenseId) throws EntityNotFoundException;

	/**
	 * Finds all TravelExpenses.
	 *
	 * @return A list of TravelExpenses.
	 */
    @Deprecated
	Page<TravelExpense> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TravelExpenses.
	 * @return A list of TravelExpenses.
	 */
    Page<TravelExpense> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TravelExpenses in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TravelExpense.
	 */
	long count(String query);

    Page<TravelExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

