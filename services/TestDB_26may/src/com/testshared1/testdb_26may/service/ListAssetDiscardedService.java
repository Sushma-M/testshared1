/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListAssetDiscarded;

/**
 * Service object for domain model class ListAssetDiscarded.
 *
 * @see {@link ListAssetDiscarded}
 */
public interface ListAssetDiscardedService {

    /**
     * Creates a new ListAssetDiscarded.
     *
     * @param listAssetDiscarded The information of the created CompositeTable.
     * @return The created ListAssetDiscarded.
     */
	ListAssetDiscarded create(ListAssetDiscarded listAssetDiscarded);


	/**
	 * Finds ListAssetDiscarded by id.
	 *
	 * @param listAssetDiscardedId The id of the wanted ListAssetDiscarded.
	 * @return The found ListAssetDiscarded. If no ListAssetDiscarded is found, this method returns null.
	 */
	ListAssetDiscarded getById(Integer listAssetDiscardedId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ListAssetDiscarded.
	 *
	 * @param listAssetDiscarded The information of the updated ListAssetDiscarded.
	 * @return The updated ListAssetDiscarded.
     *
	 * @throws EntityNotFoundException if no ListAssetDiscarded is found with given id.
	 */
	ListAssetDiscarded update(ListAssetDiscarded listAssetDiscarded) throws EntityNotFoundException;

    /**
	 * Deletes a ListAssetDiscarded.
	 *
	 * @param listAssetDiscardedId The id of the deleted ListAssetDiscarded.
	 * @return The deleted ListAssetDiscarded.
     *
	 * @throws EntityNotFoundException if no ListAssetDiscarded is found with the given id.
	 */
	ListAssetDiscarded delete(Integer listAssetDiscardedId) throws EntityNotFoundException;

	/**
	 * Finds all ListAssetDiscardeds.
	 *
	 * @return A list of ListAssetDiscardeds.
	 */
    @Deprecated
	Page<ListAssetDiscarded> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ListAssetDiscardeds.
	 * @return A list of ListAssetDiscardeds.
	 */
    Page<ListAssetDiscarded> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ListAssetDiscardeds in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ListAssetDiscarded.
	 */
	long count(String query);

    Page<ListAssetDiscarded> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

