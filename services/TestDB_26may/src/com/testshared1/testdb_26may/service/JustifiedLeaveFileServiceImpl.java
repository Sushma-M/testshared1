/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.JustifiedLeaveFile;

/**
 * ServiceImpl object for domain model class JustifiedLeaveFile.
 *
 * @see JustifiedLeaveFile
 */
@Service("TestDB_26may.JustifiedLeaveFileService")
public class JustifiedLeaveFileServiceImpl implements JustifiedLeaveFileService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedLeaveFileServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.JustifiedLeaveFileDao")
    private WMGenericDao<JustifiedLeaveFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JustifiedLeaveFile, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public JustifiedLeaveFile create(JustifiedLeaveFile justifiedleavefile) {
        LOGGER.debug("Creating a new JustifiedLeaveFile with information: {}", justifiedleavefile);
        return this.wmGenericDao.create(justifiedleavefile);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedLeaveFile getById(Integer justifiedleavefileId) throws EntityNotFoundException {
        LOGGER.debug("Finding JustifiedLeaveFile by id: {}", justifiedleavefileId);
        JustifiedLeaveFile justifiedleavefile = this.wmGenericDao.findById(justifiedleavefileId);
        if (justifiedleavefile == null){
            LOGGER.debug("No JustifiedLeaveFile found with id: {}", justifiedleavefileId);
            throw new EntityNotFoundException(String.valueOf(justifiedleavefileId));
        }
        return justifiedleavefile;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedLeaveFile update(JustifiedLeaveFile justifiedleavefile) throws EntityNotFoundException {
        LOGGER.debug("Updating JustifiedLeaveFile with information: {}", justifiedleavefile);
        this.wmGenericDao.update(justifiedleavefile);

        Integer justifiedleavefileId = justifiedleavefile.getIdJustifiedLeaveFile();

        return this.wmGenericDao.findById(justifiedleavefileId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedLeaveFile delete(Integer justifiedleavefileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedLeaveFile with id: {}", justifiedleavefileId);
        JustifiedLeaveFile deleted = this.wmGenericDao.findById(justifiedleavefileId);
        if (deleted == null) {
            LOGGER.debug("No JustifiedLeaveFile found with id: {}", justifiedleavefileId);
            throw new EntityNotFoundException(String.valueOf(justifiedleavefileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<JustifiedLeaveFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JustifiedLeaveFiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<JustifiedLeaveFile> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JustifiedLeaveFiles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table JustifiedLeaveFile to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<JustifiedLeaveFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

