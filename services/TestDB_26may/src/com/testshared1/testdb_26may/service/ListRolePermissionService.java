/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListRolePermission;

/**
 * Service object for domain model class ListRolePermission.
 *
 * @see {@link ListRolePermission}
 */
public interface ListRolePermissionService {

    /**
     * Creates a new ListRolePermission.
     *
     * @param listRolePermission The information of the created CompositeTable.
     * @return The created ListRolePermission.
     */
	ListRolePermission create(ListRolePermission listRolePermission);


	/**
	 * Finds ListRolePermission by id.
	 *
	 * @param listRolePermissionId The id of the wanted ListRolePermission.
	 * @return The found ListRolePermission. If no ListRolePermission is found, this method returns null.
	 */
	ListRolePermission getById(Integer listRolePermissionId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ListRolePermission.
	 *
	 * @param listRolePermission The information of the updated ListRolePermission.
	 * @return The updated ListRolePermission.
     *
	 * @throws EntityNotFoundException if no ListRolePermission is found with given id.
	 */
	ListRolePermission update(ListRolePermission listRolePermission) throws EntityNotFoundException;

    /**
	 * Deletes a ListRolePermission.
	 *
	 * @param listRolePermissionId The id of the deleted ListRolePermission.
	 * @return The deleted ListRolePermission.
     *
	 * @throws EntityNotFoundException if no ListRolePermission is found with the given id.
	 */
	ListRolePermission delete(Integer listRolePermissionId) throws EntityNotFoundException;

	/**
	 * Finds all ListRolePermissions.
	 *
	 * @return A list of ListRolePermissions.
	 */
    @Deprecated
	Page<ListRolePermission> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ListRolePermissions.
	 * @return A list of ListRolePermissions.
	 */
    Page<ListRolePermission> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ListRolePermissions in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ListRolePermission.
	 */
	long count(String query);

    Page<ListRolePermission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

