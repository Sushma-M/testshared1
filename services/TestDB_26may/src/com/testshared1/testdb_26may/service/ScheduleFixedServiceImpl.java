/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ScheduleFixed;

/**
 * ServiceImpl object for domain model class ScheduleFixed.
 *
 * @see ScheduleFixed
 */
@Service("TestDB_26may.ScheduleFixedService")
public class ScheduleFixedServiceImpl implements ScheduleFixedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ScheduleFixedDao")
    private WMGenericDao<ScheduleFixed, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ScheduleFixed, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ScheduleFixed create(ScheduleFixed schedulefixed) {
        LOGGER.debug("Creating a new ScheduleFixed with information: {}", schedulefixed);
        return this.wmGenericDao.create(schedulefixed);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ScheduleFixed getById(Integer schedulefixedId) throws EntityNotFoundException {
        LOGGER.debug("Finding ScheduleFixed by id: {}", schedulefixedId);
        ScheduleFixed schedulefixed = this.wmGenericDao.findById(schedulefixedId);
        if (schedulefixed == null){
            LOGGER.debug("No ScheduleFixed found with id: {}", schedulefixedId);
            throw new EntityNotFoundException(String.valueOf(schedulefixedId));
        }
        return schedulefixed;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ScheduleFixed update(ScheduleFixed schedulefixed) throws EntityNotFoundException {
        LOGGER.debug("Updating ScheduleFixed with information: {}", schedulefixed);
        this.wmGenericDao.update(schedulefixed);

        Integer schedulefixedId = schedulefixed.getIdScheduleFixed();

        return this.wmGenericDao.findById(schedulefixedId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ScheduleFixed delete(Integer schedulefixedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleFixed with id: {}", schedulefixedId);
        ScheduleFixed deleted = this.wmGenericDao.findById(schedulefixedId);
        if (deleted == null) {
            LOGGER.debug("No ScheduleFixed found with id: {}", schedulefixedId);
            throw new EntityNotFoundException(String.valueOf(schedulefixedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ScheduleFixed> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ScheduleFixeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ScheduleFixed> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ScheduleFixeds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ScheduleFixed to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ScheduleFixed> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

