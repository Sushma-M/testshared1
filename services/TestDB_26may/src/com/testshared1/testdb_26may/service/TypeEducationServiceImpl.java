/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEducation;

/**
 * ServiceImpl object for domain model class TypeEducation.
 *
 * @see TypeEducation
 */
@Service("TestDB_26may.TypeEducationService")
public class TypeEducationServiceImpl implements TypeEducationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEducationServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEducationDao")
    private WMGenericDao<TypeEducation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEducation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeEducation create(TypeEducation typeeducation) {
        LOGGER.debug("Creating a new TypeEducation with information: {}", typeeducation);
        return this.wmGenericDao.create(typeeducation);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEducation getById(Integer typeeducationId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeEducation by id: {}", typeeducationId);
        TypeEducation typeeducation = this.wmGenericDao.findById(typeeducationId);
        if (typeeducation == null){
            LOGGER.debug("No TypeEducation found with id: {}", typeeducationId);
            throw new EntityNotFoundException(String.valueOf(typeeducationId));
        }
        return typeeducation;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEducation update(TypeEducation typeeducation) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeEducation with information: {}", typeeducation);
        this.wmGenericDao.update(typeeducation);

        Integer typeeducationId = typeeducation.getIdTypeEducation();

        return this.wmGenericDao.findById(typeeducationId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEducation delete(Integer typeeducationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEducation with id: {}", typeeducationId);
        TypeEducation deleted = this.wmGenericDao.findById(typeeducationId);
        if (deleted == null) {
            LOGGER.debug("No TypeEducation found with id: {}", typeeducationId);
            throw new EntityNotFoundException(String.valueOf(typeeducationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeEducation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeEducations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeEducation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeEducations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeEducation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeEducation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

