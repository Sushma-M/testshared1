/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssetDiscardDocument;

/**
 * Service object for domain model class AssetDiscardDocument.
 *
 * @see {@link AssetDiscardDocument}
 */
public interface AssetDiscardDocumentService {

    /**
     * Creates a new AssetDiscardDocument.
     *
     * @param assetDiscardDocument The information of the created CompositeTable.
     * @return The created AssetDiscardDocument.
     */
	AssetDiscardDocument create(AssetDiscardDocument assetDiscardDocument);


	/**
	 * Finds AssetDiscardDocument by id.
	 *
	 * @param assetDiscardDocumentId The id of the wanted AssetDiscardDocument.
	 * @return The found AssetDiscardDocument. If no AssetDiscardDocument is found, this method returns null.
	 */
	AssetDiscardDocument getById(Integer assetDiscardDocumentId) throws EntityNotFoundException;

	/**
	 * Updates the information of a AssetDiscardDocument.
	 *
	 * @param assetDiscardDocument The information of the updated AssetDiscardDocument.
	 * @return The updated AssetDiscardDocument.
     *
	 * @throws EntityNotFoundException if no AssetDiscardDocument is found with given id.
	 */
	AssetDiscardDocument update(AssetDiscardDocument assetDiscardDocument) throws EntityNotFoundException;

    /**
	 * Deletes a AssetDiscardDocument.
	 *
	 * @param assetDiscardDocumentId The id of the deleted AssetDiscardDocument.
	 * @return The deleted AssetDiscardDocument.
     *
	 * @throws EntityNotFoundException if no AssetDiscardDocument is found with the given id.
	 */
	AssetDiscardDocument delete(Integer assetDiscardDocumentId) throws EntityNotFoundException;

	/**
	 * Finds all AssetDiscardDocuments.
	 *
	 * @return A list of AssetDiscardDocuments.
	 */
    @Deprecated
	Page<AssetDiscardDocument> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all AssetDiscardDocuments.
	 * @return A list of AssetDiscardDocuments.
	 */
    Page<AssetDiscardDocument> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AssetDiscardDocuments in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the AssetDiscardDocument.
	 */
	long count(String query);

    Page<AssetDiscardDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

