/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssessmentEmployeeData;

/**
 * ServiceImpl object for domain model class AssessmentEmployeeData.
 *
 * @see AssessmentEmployeeData
 */
@Service("TestDB_26may.AssessmentEmployeeDataService")
public class AssessmentEmployeeDataServiceImpl implements AssessmentEmployeeDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentEmployeeDataServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssessmentEmployeeDataDao")
    private WMGenericDao<AssessmentEmployeeData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssessmentEmployeeData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public AssessmentEmployeeData create(AssessmentEmployeeData assessmentemployeedata) {
        LOGGER.debug("Creating a new AssessmentEmployeeData with information: {}", assessmentemployeedata);
        return this.wmGenericDao.create(assessmentemployeedata);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public AssessmentEmployeeData getById(Integer assessmentemployeedataId) throws EntityNotFoundException {
        LOGGER.debug("Finding AssessmentEmployeeData by id: {}", assessmentemployeedataId);
        AssessmentEmployeeData assessmentemployeedata = this.wmGenericDao.findById(assessmentemployeedataId);
        if (assessmentemployeedata == null){
            LOGGER.debug("No AssessmentEmployeeData found with id: {}", assessmentemployeedataId);
            throw new EntityNotFoundException(String.valueOf(assessmentemployeedataId));
        }
        return assessmentemployeedata;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public AssessmentEmployeeData update(AssessmentEmployeeData assessmentemployeedata) throws EntityNotFoundException {
        LOGGER.debug("Updating AssessmentEmployeeData with information: {}", assessmentemployeedata);
        this.wmGenericDao.update(assessmentemployeedata);

        Integer assessmentemployeedataId = assessmentemployeedata.getIdAssessmentEmployeeData();

        return this.wmGenericDao.findById(assessmentemployeedataId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public AssessmentEmployeeData delete(Integer assessmentemployeedataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssessmentEmployeeData with id: {}", assessmentemployeedataId);
        AssessmentEmployeeData deleted = this.wmGenericDao.findById(assessmentemployeedataId);
        if (deleted == null) {
            LOGGER.debug("No AssessmentEmployeeData found with id: {}", assessmentemployeedataId);
            throw new EntityNotFoundException(String.valueOf(assessmentemployeedataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<AssessmentEmployeeData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AssessmentEmployeeDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<AssessmentEmployeeData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AssessmentEmployeeDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table AssessmentEmployeeData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<AssessmentEmployeeData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

