/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeAsset;

/**
 * Service object for domain model class TypeAsset.
 *
 * @see {@link TypeAsset}
 */
public interface TypeAssetService {

    /**
     * Creates a new TypeAsset.
     *
     * @param typeAsset The information of the created CompositeTable.
     * @return The created TypeAsset.
     */
	TypeAsset create(TypeAsset typeAsset);


	/**
	 * Finds TypeAsset by id.
	 *
	 * @param typeAssetId The id of the wanted TypeAsset.
	 * @return The found TypeAsset. If no TypeAsset is found, this method returns null.
	 */
	TypeAsset getById(Integer typeAssetId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeAsset.
	 *
	 * @param typeAsset The information of the updated TypeAsset.
	 * @return The updated TypeAsset.
     *
	 * @throws EntityNotFoundException if no TypeAsset is found with given id.
	 */
	TypeAsset update(TypeAsset typeAsset) throws EntityNotFoundException;

    /**
	 * Deletes a TypeAsset.
	 *
	 * @param typeAssetId The id of the deleted TypeAsset.
	 * @return The deleted TypeAsset.
     *
	 * @throws EntityNotFoundException if no TypeAsset is found with the given id.
	 */
	TypeAsset delete(Integer typeAssetId) throws EntityNotFoundException;

	/**
	 * Finds all TypeAssets.
	 *
	 * @return A list of TypeAssets.
	 */
    @Deprecated
	Page<TypeAsset> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeAssets.
	 * @return A list of TypeAssets.
	 */
    Page<TypeAsset> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeAssets in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeAsset.
	 */
	long count(String query);

    Page<TypeAsset> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

