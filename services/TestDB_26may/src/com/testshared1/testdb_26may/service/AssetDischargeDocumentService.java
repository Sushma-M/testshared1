/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssetDischargeDocument;

/**
 * Service object for domain model class AssetDischargeDocument.
 *
 * @see {@link AssetDischargeDocument}
 */
public interface AssetDischargeDocumentService {

    /**
     * Creates a new AssetDischargeDocument.
     *
     * @param assetDischargeDocument The information of the created CompositeTable.
     * @return The created AssetDischargeDocument.
     */
	AssetDischargeDocument create(AssetDischargeDocument assetDischargeDocument);


	/**
	 * Finds AssetDischargeDocument by id.
	 *
	 * @param assetDischargeDocumentId The id of the wanted AssetDischargeDocument.
	 * @return The found AssetDischargeDocument. If no AssetDischargeDocument is found, this method returns null.
	 */
	AssetDischargeDocument getById(Integer assetDischargeDocumentId) throws EntityNotFoundException;

	/**
	 * Updates the information of a AssetDischargeDocument.
	 *
	 * @param assetDischargeDocument The information of the updated AssetDischargeDocument.
	 * @return The updated AssetDischargeDocument.
     *
	 * @throws EntityNotFoundException if no AssetDischargeDocument is found with given id.
	 */
	AssetDischargeDocument update(AssetDischargeDocument assetDischargeDocument) throws EntityNotFoundException;

    /**
	 * Deletes a AssetDischargeDocument.
	 *
	 * @param assetDischargeDocumentId The id of the deleted AssetDischargeDocument.
	 * @return The deleted AssetDischargeDocument.
     *
	 * @throws EntityNotFoundException if no AssetDischargeDocument is found with the given id.
	 */
	AssetDischargeDocument delete(Integer assetDischargeDocumentId) throws EntityNotFoundException;

	/**
	 * Finds all AssetDischargeDocuments.
	 *
	 * @return A list of AssetDischargeDocuments.
	 */
    @Deprecated
	Page<AssetDischargeDocument> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all AssetDischargeDocuments.
	 * @return A list of AssetDischargeDocuments.
	 */
    Page<AssetDischargeDocument> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AssetDischargeDocuments in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the AssetDischargeDocument.
	 */
	long count(String query);

    Page<AssetDischargeDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

