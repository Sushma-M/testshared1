/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeGeneralDetail;

/**
 * ServiceImpl object for domain model class EmployeeGeneralDetail.
 *
 * @see EmployeeGeneralDetail
 */
@Service("TestDB_26may.EmployeeGeneralDetailService")
public class EmployeeGeneralDetailServiceImpl implements EmployeeGeneralDetailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeGeneralDetailServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeGeneralDetailDao")
    private WMGenericDao<EmployeeGeneralDetail, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeGeneralDetail, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeGeneralDetail create(EmployeeGeneralDetail employeegeneraldetail) {
        LOGGER.debug("Creating a new EmployeeGeneralDetail with information: {}", employeegeneraldetail);
        return this.wmGenericDao.create(employeegeneraldetail);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeGeneralDetail getById(Integer employeegeneraldetailId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeGeneralDetail by id: {}", employeegeneraldetailId);
        EmployeeGeneralDetail employeegeneraldetail = this.wmGenericDao.findById(employeegeneraldetailId);
        if (employeegeneraldetail == null){
            LOGGER.debug("No EmployeeGeneralDetail found with id: {}", employeegeneraldetailId);
            throw new EntityNotFoundException(String.valueOf(employeegeneraldetailId));
        }
        return employeegeneraldetail;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeGeneralDetail update(EmployeeGeneralDetail employeegeneraldetail) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeGeneralDetail with information: {}", employeegeneraldetail);
        this.wmGenericDao.update(employeegeneraldetail);

        Integer employeegeneraldetailId = employeegeneraldetail.getIdEmployeeGeneralDetail();

        return this.wmGenericDao.findById(employeegeneraldetailId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeGeneralDetail delete(Integer employeegeneraldetailId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeGeneralDetail with id: {}", employeegeneraldetailId);
        EmployeeGeneralDetail deleted = this.wmGenericDao.findById(employeegeneraldetailId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeGeneralDetail found with id: {}", employeegeneraldetailId);
            throw new EntityNotFoundException(String.valueOf(employeegeneraldetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeGeneralDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeGeneralDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeGeneralDetail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeGeneralDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeGeneralDetail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeGeneralDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

