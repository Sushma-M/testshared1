/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeSalary;

/**
 * ServiceImpl object for domain model class EmployeeSalary.
 *
 * @see EmployeeSalary
 */
@Service("TestDB_26may.EmployeeSalaryService")
public class EmployeeSalaryServiceImpl implements EmployeeSalaryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeSalaryServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeSalaryDao")
    private WMGenericDao<EmployeeSalary, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeSalary, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeSalary create(EmployeeSalary employeesalary) {
        LOGGER.debug("Creating a new EmployeeSalary with information: {}", employeesalary);
        return this.wmGenericDao.create(employeesalary);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeSalary getById(Integer employeesalaryId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeSalary by id: {}", employeesalaryId);
        EmployeeSalary employeesalary = this.wmGenericDao.findById(employeesalaryId);
        if (employeesalary == null){
            LOGGER.debug("No EmployeeSalary found with id: {}", employeesalaryId);
            throw new EntityNotFoundException(String.valueOf(employeesalaryId));
        }
        return employeesalary;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeSalary update(EmployeeSalary employeesalary) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeSalary with information: {}", employeesalary);
        this.wmGenericDao.update(employeesalary);

        Integer employeesalaryId = employeesalary.getIdEmployeeSalary();

        return this.wmGenericDao.findById(employeesalaryId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeSalary delete(Integer employeesalaryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeSalary with id: {}", employeesalaryId);
        EmployeeSalary deleted = this.wmGenericDao.findById(employeesalaryId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeSalary found with id: {}", employeesalaryId);
            throw new EntityNotFoundException(String.valueOf(employeesalaryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeSalary> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeSalaries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeSalary> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeSalaries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeSalary to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeSalary> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

