/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeGeneralDetail;

/**
 * Service object for domain model class EmployeeGeneralDetail.
 *
 * @see {@link EmployeeGeneralDetail}
 */
public interface EmployeeGeneralDetailService {

    /**
     * Creates a new EmployeeGeneralDetail.
     *
     * @param employeeGeneralDetail The information of the created CompositeTable.
     * @return The created EmployeeGeneralDetail.
     */
	EmployeeGeneralDetail create(EmployeeGeneralDetail employeeGeneralDetail);


	/**
	 * Finds EmployeeGeneralDetail by id.
	 *
	 * @param employeeGeneralDetailId The id of the wanted EmployeeGeneralDetail.
	 * @return The found EmployeeGeneralDetail. If no EmployeeGeneralDetail is found, this method returns null.
	 */
	EmployeeGeneralDetail getById(Integer employeeGeneralDetailId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeGeneralDetail.
	 *
	 * @param employeeGeneralDetail The information of the updated EmployeeGeneralDetail.
	 * @return The updated EmployeeGeneralDetail.
     *
	 * @throws EntityNotFoundException if no EmployeeGeneralDetail is found with given id.
	 */
	EmployeeGeneralDetail update(EmployeeGeneralDetail employeeGeneralDetail) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeGeneralDetail.
	 *
	 * @param employeeGeneralDetailId The id of the deleted EmployeeGeneralDetail.
	 * @return The deleted EmployeeGeneralDetail.
     *
	 * @throws EntityNotFoundException if no EmployeeGeneralDetail is found with the given id.
	 */
	EmployeeGeneralDetail delete(Integer employeeGeneralDetailId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeGeneralDetails.
	 *
	 * @return A list of EmployeeGeneralDetails.
	 */
    @Deprecated
	Page<EmployeeGeneralDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeGeneralDetails.
	 * @return A list of EmployeeGeneralDetails.
	 */
    Page<EmployeeGeneralDetail> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeGeneralDetails in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeGeneralDetail.
	 */
	long count(String query);

    Page<EmployeeGeneralDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

