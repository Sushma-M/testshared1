/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Viaje;

/**
 * Service object for domain model class Viaje.
 *
 * @see {@link Viaje}
 */
public interface ViajeService {

    /**
     * Creates a new Viaje.
     *
     * @param viaje The information of the created CompositeTable.
     * @return The created Viaje.
     */
	Viaje create(Viaje viaje);


	/**
	 * Finds Viaje by id.
	 *
	 * @param viajeId The id of the wanted Viaje.
	 * @return The found Viaje. If no Viaje is found, this method returns null.
	 */
	Viaje getById(Integer viajeId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Viaje.
	 *
	 * @param viaje The information of the updated Viaje.
	 * @return The updated Viaje.
     *
	 * @throws EntityNotFoundException if no Viaje is found with given id.
	 */
	Viaje update(Viaje viaje) throws EntityNotFoundException;

    /**
	 * Deletes a Viaje.
	 *
	 * @param viajeId The id of the deleted Viaje.
	 * @return The deleted Viaje.
     *
	 * @throws EntityNotFoundException if no Viaje is found with the given id.
	 */
	Viaje delete(Integer viajeId) throws EntityNotFoundException;

	/**
	 * Finds all Viajes.
	 *
	 * @return A list of Viajes.
	 */
    @Deprecated
	Page<Viaje> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Viajes.
	 * @return A list of Viajes.
	 */
    Page<Viaje> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Viajes in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Viaje.
	 */
	long count(String query);

    Page<Viaje> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

