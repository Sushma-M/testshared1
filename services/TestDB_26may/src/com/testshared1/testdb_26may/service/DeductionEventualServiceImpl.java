/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.DeductionEventual;

/**
 * ServiceImpl object for domain model class DeductionEventual.
 *
 * @see DeductionEventual
 */
@Service("TestDB_26may.DeductionEventualService")
public class DeductionEventualServiceImpl implements DeductionEventualService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeductionEventualServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.DeductionEventualDao")
    private WMGenericDao<DeductionEventual, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DeductionEventual, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public DeductionEventual create(DeductionEventual deductioneventual) {
        LOGGER.debug("Creating a new DeductionEventual with information: {}", deductioneventual);
        return this.wmGenericDao.create(deductioneventual);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public DeductionEventual getById(Integer deductioneventualId) throws EntityNotFoundException {
        LOGGER.debug("Finding DeductionEventual by id: {}", deductioneventualId);
        DeductionEventual deductioneventual = this.wmGenericDao.findById(deductioneventualId);
        if (deductioneventual == null){
            LOGGER.debug("No DeductionEventual found with id: {}", deductioneventualId);
            throw new EntityNotFoundException(String.valueOf(deductioneventualId));
        }
        return deductioneventual;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public DeductionEventual update(DeductionEventual deductioneventual) throws EntityNotFoundException {
        LOGGER.debug("Updating DeductionEventual with information: {}", deductioneventual);
        this.wmGenericDao.update(deductioneventual);

        Integer deductioneventualId = deductioneventual.getIdDeductionEventual();

        return this.wmGenericDao.findById(deductioneventualId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public DeductionEventual delete(Integer deductioneventualId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeductionEventual with id: {}", deductioneventualId);
        DeductionEventual deleted = this.wmGenericDao.findById(deductioneventualId);
        if (deleted == null) {
            LOGGER.debug("No DeductionEventual found with id: {}", deductioneventualId);
            throw new EntityNotFoundException(String.valueOf(deductioneventualId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<DeductionEventual> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DeductionEventuals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<DeductionEventual> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DeductionEventuals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table DeductionEventual to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<DeductionEventual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

