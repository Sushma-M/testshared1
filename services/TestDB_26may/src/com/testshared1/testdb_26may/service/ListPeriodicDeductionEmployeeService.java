/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListPeriodicDeductionEmployee;

/**
 * Service object for domain model class ListPeriodicDeductionEmployee.
 *
 * @see {@link ListPeriodicDeductionEmployee}
 */
public interface ListPeriodicDeductionEmployeeService {

    /**
     * Creates a new ListPeriodicDeductionEmployee.
     *
     * @param listPeriodicDeductionEmployee The information of the created CompositeTable.
     * @return The created ListPeriodicDeductionEmployee.
     */
	ListPeriodicDeductionEmployee create(ListPeriodicDeductionEmployee listPeriodicDeductionEmployee);


	/**
	 * Finds ListPeriodicDeductionEmployee by id.
	 *
	 * @param listPeriodicDeductionEmployeeId The id of the wanted ListPeriodicDeductionEmployee.
	 * @return The found ListPeriodicDeductionEmployee. If no ListPeriodicDeductionEmployee is found, this method returns null.
	 */
	ListPeriodicDeductionEmployee getById(Integer listPeriodicDeductionEmployeeId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ListPeriodicDeductionEmployee.
	 *
	 * @param listPeriodicDeductionEmployee The information of the updated ListPeriodicDeductionEmployee.
	 * @return The updated ListPeriodicDeductionEmployee.
     *
	 * @throws EntityNotFoundException if no ListPeriodicDeductionEmployee is found with given id.
	 */
	ListPeriodicDeductionEmployee update(ListPeriodicDeductionEmployee listPeriodicDeductionEmployee) throws EntityNotFoundException;

    /**
	 * Deletes a ListPeriodicDeductionEmployee.
	 *
	 * @param listPeriodicDeductionEmployeeId The id of the deleted ListPeriodicDeductionEmployee.
	 * @return The deleted ListPeriodicDeductionEmployee.
     *
	 * @throws EntityNotFoundException if no ListPeriodicDeductionEmployee is found with the given id.
	 */
	ListPeriodicDeductionEmployee delete(Integer listPeriodicDeductionEmployeeId) throws EntityNotFoundException;

	/**
	 * Finds all ListPeriodicDeductionEmployees.
	 *
	 * @return A list of ListPeriodicDeductionEmployees.
	 */
    @Deprecated
	Page<ListPeriodicDeductionEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ListPeriodicDeductionEmployees.
	 * @return A list of ListPeriodicDeductionEmployees.
	 */
    Page<ListPeriodicDeductionEmployee> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ListPeriodicDeductionEmployees in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ListPeriodicDeductionEmployee.
	 */
	long count(String query);

    Page<ListPeriodicDeductionEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

