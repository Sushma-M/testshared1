/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.PaymentCheck;

/**
 * Service object for domain model class PaymentCheck.
 *
 * @see {@link PaymentCheck}
 */
public interface PaymentCheckService {

    /**
     * Creates a new PaymentCheck.
     *
     * @param paymentCheck The information of the created CompositeTable.
     * @return The created PaymentCheck.
     */
	PaymentCheck create(PaymentCheck paymentCheck);


	/**
	 * Finds PaymentCheck by id.
	 *
	 * @param paymentCheckId The id of the wanted PaymentCheck.
	 * @return The found PaymentCheck. If no PaymentCheck is found, this method returns null.
	 */
	PaymentCheck getById(Integer paymentCheckId) throws EntityNotFoundException;

	/**
	 * Updates the information of a PaymentCheck.
	 *
	 * @param paymentCheck The information of the updated PaymentCheck.
	 * @return The updated PaymentCheck.
     *
	 * @throws EntityNotFoundException if no PaymentCheck is found with given id.
	 */
	PaymentCheck update(PaymentCheck paymentCheck) throws EntityNotFoundException;

    /**
	 * Deletes a PaymentCheck.
	 *
	 * @param paymentCheckId The id of the deleted PaymentCheck.
	 * @return The deleted PaymentCheck.
     *
	 * @throws EntityNotFoundException if no PaymentCheck is found with the given id.
	 */
	PaymentCheck delete(Integer paymentCheckId) throws EntityNotFoundException;

	/**
	 * Finds all PaymentChecks.
	 *
	 * @return A list of PaymentChecks.
	 */
    @Deprecated
	Page<PaymentCheck> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all PaymentChecks.
	 * @return A list of PaymentChecks.
	 */
    Page<PaymentCheck> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PaymentChecks in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the PaymentCheck.
	 */
	long count(String query);

    Page<PaymentCheck> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

