/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListEmployeePhone;

/**
 * ServiceImpl object for domain model class ListEmployeePhone.
 *
 * @see ListEmployeePhone
 */
@Service("TestDB_26may.ListEmployeePhoneService")
public class ListEmployeePhoneServiceImpl implements ListEmployeePhoneService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListEmployeePhoneServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListEmployeePhoneDao")
    private WMGenericDao<ListEmployeePhone, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListEmployeePhone, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListEmployeePhone create(ListEmployeePhone listemployeephone) {
        LOGGER.debug("Creating a new ListEmployeePhone with information: {}", listemployeephone);
        return this.wmGenericDao.create(listemployeephone);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListEmployeePhone getById(Integer listemployeephoneId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListEmployeePhone by id: {}", listemployeephoneId);
        ListEmployeePhone listemployeephone = this.wmGenericDao.findById(listemployeephoneId);
        if (listemployeephone == null){
            LOGGER.debug("No ListEmployeePhone found with id: {}", listemployeephoneId);
            throw new EntityNotFoundException(String.valueOf(listemployeephoneId));
        }
        return listemployeephone;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListEmployeePhone update(ListEmployeePhone listemployeephone) throws EntityNotFoundException {
        LOGGER.debug("Updating ListEmployeePhone with information: {}", listemployeephone);
        this.wmGenericDao.update(listemployeephone);

        Integer listemployeephoneId = listemployeephone.getIdListEmployeePhone();

        return this.wmGenericDao.findById(listemployeephoneId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListEmployeePhone delete(Integer listemployeephoneId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListEmployeePhone with id: {}", listemployeephoneId);
        ListEmployeePhone deleted = this.wmGenericDao.findById(listemployeephoneId);
        if (deleted == null) {
            LOGGER.debug("No ListEmployeePhone found with id: {}", listemployeephoneId);
            throw new EntityNotFoundException(String.valueOf(listemployeephoneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListEmployeePhone> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListEmployeePhones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListEmployeePhone> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListEmployeePhones");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListEmployeePhone to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListEmployeePhone> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

