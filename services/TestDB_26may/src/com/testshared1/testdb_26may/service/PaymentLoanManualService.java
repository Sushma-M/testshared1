/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.PaymentLoanManual;

/**
 * Service object for domain model class PaymentLoanManual.
 *
 * @see {@link PaymentLoanManual}
 */
public interface PaymentLoanManualService {

    /**
     * Creates a new PaymentLoanManual.
     *
     * @param paymentLoanManual The information of the created CompositeTable.
     * @return The created PaymentLoanManual.
     */
	PaymentLoanManual create(PaymentLoanManual paymentLoanManual);


	/**
	 * Finds PaymentLoanManual by id.
	 *
	 * @param paymentLoanManualId The id of the wanted PaymentLoanManual.
	 * @return The found PaymentLoanManual. If no PaymentLoanManual is found, this method returns null.
	 */
	PaymentLoanManual getById(Integer paymentLoanManualId) throws EntityNotFoundException;

	/**
	 * Updates the information of a PaymentLoanManual.
	 *
	 * @param paymentLoanManual The information of the updated PaymentLoanManual.
	 * @return The updated PaymentLoanManual.
     *
	 * @throws EntityNotFoundException if no PaymentLoanManual is found with given id.
	 */
	PaymentLoanManual update(PaymentLoanManual paymentLoanManual) throws EntityNotFoundException;

    /**
	 * Deletes a PaymentLoanManual.
	 *
	 * @param paymentLoanManualId The id of the deleted PaymentLoanManual.
	 * @return The deleted PaymentLoanManual.
     *
	 * @throws EntityNotFoundException if no PaymentLoanManual is found with the given id.
	 */
	PaymentLoanManual delete(Integer paymentLoanManualId) throws EntityNotFoundException;

	/**
	 * Finds all PaymentLoanManuals.
	 *
	 * @return A list of PaymentLoanManuals.
	 */
    @Deprecated
	Page<PaymentLoanManual> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all PaymentLoanManuals.
	 * @return A list of PaymentLoanManuals.
	 */
    Page<PaymentLoanManual> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PaymentLoanManuals in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the PaymentLoanManual.
	 */
	long count(String query);

    Page<PaymentLoanManual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

