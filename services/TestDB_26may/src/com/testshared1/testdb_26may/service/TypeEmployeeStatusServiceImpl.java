/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEmployeeStatus;

/**
 * ServiceImpl object for domain model class TypeEmployeeStatus.
 *
 * @see TypeEmployeeStatus
 */
@Service("TestDB_26may.TypeEmployeeStatusService")
public class TypeEmployeeStatusServiceImpl implements TypeEmployeeStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeeStatusServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEmployeeStatusDao")
    private WMGenericDao<TypeEmployeeStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEmployeeStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeEmployeeStatus create(TypeEmployeeStatus typeemployeestatus) {
        LOGGER.debug("Creating a new TypeEmployeeStatus with information: {}", typeemployeestatus);
        return this.wmGenericDao.create(typeemployeestatus);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeeStatus getById(Integer typeemployeestatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeEmployeeStatus by id: {}", typeemployeestatusId);
        TypeEmployeeStatus typeemployeestatus = this.wmGenericDao.findById(typeemployeestatusId);
        if (typeemployeestatus == null){
            LOGGER.debug("No TypeEmployeeStatus found with id: {}", typeemployeestatusId);
            throw new EntityNotFoundException(String.valueOf(typeemployeestatusId));
        }
        return typeemployeestatus;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeeStatus update(TypeEmployeeStatus typeemployeestatus) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeEmployeeStatus with information: {}", typeemployeestatus);
        this.wmGenericDao.update(typeemployeestatus);

        Integer typeemployeestatusId = typeemployeestatus.getIdTypeApplicantStatus();

        return this.wmGenericDao.findById(typeemployeestatusId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeeStatus delete(Integer typeemployeestatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeeStatus with id: {}", typeemployeestatusId);
        TypeEmployeeStatus deleted = this.wmGenericDao.findById(typeemployeestatusId);
        if (deleted == null) {
            LOGGER.debug("No TypeEmployeeStatus found with id: {}", typeemployeestatusId);
            throw new EntityNotFoundException(String.valueOf(typeemployeestatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeEmployeeStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeeStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeEmployeeStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeeStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeEmployeeStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeEmployeeStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

