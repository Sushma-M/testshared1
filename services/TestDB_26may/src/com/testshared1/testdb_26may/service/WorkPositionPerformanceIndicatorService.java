/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.WorkPositionPerformanceIndicator;

/**
 * Service object for domain model class WorkPositionPerformanceIndicator.
 *
 * @see {@link WorkPositionPerformanceIndicator}
 */
public interface WorkPositionPerformanceIndicatorService {

    /**
     * Creates a new WorkPositionPerformanceIndicator.
     *
     * @param workPositionPerformanceIndicator The information of the created CompositeTable.
     * @return The created WorkPositionPerformanceIndicator.
     */
	WorkPositionPerformanceIndicator create(WorkPositionPerformanceIndicator workPositionPerformanceIndicator);


	/**
	 * Finds WorkPositionPerformanceIndicator by id.
	 *
	 * @param workPositionPerformanceIndicatorId The id of the wanted WorkPositionPerformanceIndicator.
	 * @return The found WorkPositionPerformanceIndicator. If no WorkPositionPerformanceIndicator is found, this method returns null.
	 */
	WorkPositionPerformanceIndicator getById(Integer workPositionPerformanceIndicatorId) throws EntityNotFoundException;

	/**
	 * Updates the information of a WorkPositionPerformanceIndicator.
	 *
	 * @param workPositionPerformanceIndicator The information of the updated WorkPositionPerformanceIndicator.
	 * @return The updated WorkPositionPerformanceIndicator.
     *
	 * @throws EntityNotFoundException if no WorkPositionPerformanceIndicator is found with given id.
	 */
	WorkPositionPerformanceIndicator update(WorkPositionPerformanceIndicator workPositionPerformanceIndicator) throws EntityNotFoundException;

    /**
	 * Deletes a WorkPositionPerformanceIndicator.
	 *
	 * @param workPositionPerformanceIndicatorId The id of the deleted WorkPositionPerformanceIndicator.
	 * @return The deleted WorkPositionPerformanceIndicator.
     *
	 * @throws EntityNotFoundException if no WorkPositionPerformanceIndicator is found with the given id.
	 */
	WorkPositionPerformanceIndicator delete(Integer workPositionPerformanceIndicatorId) throws EntityNotFoundException;

	/**
	 * Finds all WorkPositionPerformanceIndicators.
	 *
	 * @return A list of WorkPositionPerformanceIndicators.
	 */
    @Deprecated
	Page<WorkPositionPerformanceIndicator> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all WorkPositionPerformanceIndicators.
	 * @return A list of WorkPositionPerformanceIndicators.
	 */
    Page<WorkPositionPerformanceIndicator> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the WorkPositionPerformanceIndicators in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the WorkPositionPerformanceIndicator.
	 */
	long count(String query);

    Page<WorkPositionPerformanceIndicator> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

