/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.PayrollDetail;

/**
 * ServiceImpl object for domain model class PayrollDetail.
 *
 * @see PayrollDetail
 */
@Service("TestDB_26may.PayrollDetailService")
public class PayrollDetailServiceImpl implements PayrollDetailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PayrollDetailServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.PayrollDetailDao")
    private WMGenericDao<PayrollDetail, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PayrollDetail, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public PayrollDetail create(PayrollDetail payrolldetail) {
        LOGGER.debug("Creating a new PayrollDetail with information: {}", payrolldetail);
        return this.wmGenericDao.create(payrolldetail);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public PayrollDetail getById(Integer payrolldetailId) throws EntityNotFoundException {
        LOGGER.debug("Finding PayrollDetail by id: {}", payrolldetailId);
        PayrollDetail payrolldetail = this.wmGenericDao.findById(payrolldetailId);
        if (payrolldetail == null){
            LOGGER.debug("No PayrollDetail found with id: {}", payrolldetailId);
            throw new EntityNotFoundException(String.valueOf(payrolldetailId));
        }
        return payrolldetail;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public PayrollDetail update(PayrollDetail payrolldetail) throws EntityNotFoundException {
        LOGGER.debug("Updating PayrollDetail with information: {}", payrolldetail);
        this.wmGenericDao.update(payrolldetail);

        Integer payrolldetailId = payrolldetail.getIdPayrollDetail();

        return this.wmGenericDao.findById(payrolldetailId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public PayrollDetail delete(Integer payrolldetailId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PayrollDetail with id: {}", payrolldetailId);
        PayrollDetail deleted = this.wmGenericDao.findById(payrolldetailId);
        if (deleted == null) {
            LOGGER.debug("No PayrollDetail found with id: {}", payrolldetailId);
            throw new EntityNotFoundException(String.valueOf(payrolldetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<PayrollDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PayrollDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<PayrollDetail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PayrollDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table PayrollDetail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<PayrollDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

