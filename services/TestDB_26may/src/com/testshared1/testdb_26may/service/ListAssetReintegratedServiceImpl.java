/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListAssetReintegrated;

/**
 * ServiceImpl object for domain model class ListAssetReintegrated.
 *
 * @see ListAssetReintegrated
 */
@Service("TestDB_26may.ListAssetReintegratedService")
public class ListAssetReintegratedServiceImpl implements ListAssetReintegratedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetReintegratedServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListAssetReintegratedDao")
    private WMGenericDao<ListAssetReintegrated, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListAssetReintegrated, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListAssetReintegrated create(ListAssetReintegrated listassetreintegrated) {
        LOGGER.debug("Creating a new ListAssetReintegrated with information: {}", listassetreintegrated);
        return this.wmGenericDao.create(listassetreintegrated);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetReintegrated getById(Integer listassetreintegratedId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListAssetReintegrated by id: {}", listassetreintegratedId);
        ListAssetReintegrated listassetreintegrated = this.wmGenericDao.findById(listassetreintegratedId);
        if (listassetreintegrated == null){
            LOGGER.debug("No ListAssetReintegrated found with id: {}", listassetreintegratedId);
            throw new EntityNotFoundException(String.valueOf(listassetreintegratedId));
        }
        return listassetreintegrated;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetReintegrated update(ListAssetReintegrated listassetreintegrated) throws EntityNotFoundException {
        LOGGER.debug("Updating ListAssetReintegrated with information: {}", listassetreintegrated);
        this.wmGenericDao.update(listassetreintegrated);

        Integer listassetreintegratedId = listassetreintegrated.getIdListAssetReintegrated();

        return this.wmGenericDao.findById(listassetreintegratedId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetReintegrated delete(Integer listassetreintegratedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetReintegrated with id: {}", listassetreintegratedId);
        ListAssetReintegrated deleted = this.wmGenericDao.findById(listassetreintegratedId);
        if (deleted == null) {
            LOGGER.debug("No ListAssetReintegrated found with id: {}", listassetreintegratedId);
            throw new EntityNotFoundException(String.valueOf(listassetreintegratedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListAssetReintegrated> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListAssetReintegrateds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListAssetReintegrated> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListAssetReintegrateds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListAssetReintegrated to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListAssetReintegrated> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

