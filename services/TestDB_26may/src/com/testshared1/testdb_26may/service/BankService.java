/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Bank;

/**
 * Service object for domain model class Bank.
 *
 * @see {@link Bank}
 */
public interface BankService {

    /**
     * Creates a new Bank.
     *
     * @param bank The information of the created CompositeTable.
     * @return The created Bank.
     */
	Bank create(Bank bank);


	/**
	 * Finds Bank by id.
	 *
	 * @param bankId The id of the wanted Bank.
	 * @return The found Bank. If no Bank is found, this method returns null.
	 */
	Bank getById(Integer bankId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Bank.
	 *
	 * @param bank The information of the updated Bank.
	 * @return The updated Bank.
     *
	 * @throws EntityNotFoundException if no Bank is found with given id.
	 */
	Bank update(Bank bank) throws EntityNotFoundException;

    /**
	 * Deletes a Bank.
	 *
	 * @param bankId The id of the deleted Bank.
	 * @return The deleted Bank.
     *
	 * @throws EntityNotFoundException if no Bank is found with the given id.
	 */
	Bank delete(Integer bankId) throws EntityNotFoundException;

	/**
	 * Finds all Banks.
	 *
	 * @return A list of Banks.
	 */
    @Deprecated
	Page<Bank> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Banks.
	 * @return A list of Banks.
	 */
    Page<Bank> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Banks in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Bank.
	 */
	long count(String query);

    Page<Bank> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

