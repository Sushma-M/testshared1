/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.VacationDayCredit;

/**
 * ServiceImpl object for domain model class VacationDayCredit.
 *
 * @see VacationDayCredit
 */
@Service("TestDB_26may.VacationDayCreditService")
public class VacationDayCreditServiceImpl implements VacationDayCreditService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VacationDayCreditServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.VacationDayCreditDao")
    private WMGenericDao<VacationDayCredit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VacationDayCredit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public VacationDayCredit create(VacationDayCredit vacationdaycredit) {
        LOGGER.debug("Creating a new VacationDayCredit with information: {}", vacationdaycredit);
        return this.wmGenericDao.create(vacationdaycredit);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public VacationDayCredit getById(Integer vacationdaycreditId) throws EntityNotFoundException {
        LOGGER.debug("Finding VacationDayCredit by id: {}", vacationdaycreditId);
        VacationDayCredit vacationdaycredit = this.wmGenericDao.findById(vacationdaycreditId);
        if (vacationdaycredit == null){
            LOGGER.debug("No VacationDayCredit found with id: {}", vacationdaycreditId);
            throw new EntityNotFoundException(String.valueOf(vacationdaycreditId));
        }
        return vacationdaycredit;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public VacationDayCredit update(VacationDayCredit vacationdaycredit) throws EntityNotFoundException {
        LOGGER.debug("Updating VacationDayCredit with information: {}", vacationdaycredit);
        this.wmGenericDao.update(vacationdaycredit);

        Integer vacationdaycreditId = vacationdaycredit.getIdVacationDayCredit();

        return this.wmGenericDao.findById(vacationdaycreditId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public VacationDayCredit delete(Integer vacationdaycreditId) throws EntityNotFoundException {
        LOGGER.debug("Deleting VacationDayCredit with id: {}", vacationdaycreditId);
        VacationDayCredit deleted = this.wmGenericDao.findById(vacationdaycreditId);
        if (deleted == null) {
            LOGGER.debug("No VacationDayCredit found with id: {}", vacationdaycreditId);
            throw new EntityNotFoundException(String.valueOf(vacationdaycreditId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<VacationDayCredit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VacationDayCredits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<VacationDayCredit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VacationDayCredits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table VacationDayCredit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<VacationDayCredit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

