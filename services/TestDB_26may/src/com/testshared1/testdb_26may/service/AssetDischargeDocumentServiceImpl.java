/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssetDischargeDocument;

/**
 * ServiceImpl object for domain model class AssetDischargeDocument.
 *
 * @see AssetDischargeDocument
 */
@Service("TestDB_26may.AssetDischargeDocumentService")
public class AssetDischargeDocumentServiceImpl implements AssetDischargeDocumentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDischargeDocumentServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetDischargeDocumentDao")
    private WMGenericDao<AssetDischargeDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetDischargeDocument, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public AssetDischargeDocument create(AssetDischargeDocument assetdischargedocument) {
        LOGGER.debug("Creating a new AssetDischargeDocument with information: {}", assetdischargedocument);
        return this.wmGenericDao.create(assetdischargedocument);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public AssetDischargeDocument getById(Integer assetdischargedocumentId) throws EntityNotFoundException {
        LOGGER.debug("Finding AssetDischargeDocument by id: {}", assetdischargedocumentId);
        AssetDischargeDocument assetdischargedocument = this.wmGenericDao.findById(assetdischargedocumentId);
        if (assetdischargedocument == null){
            LOGGER.debug("No AssetDischargeDocument found with id: {}", assetdischargedocumentId);
            throw new EntityNotFoundException(String.valueOf(assetdischargedocumentId));
        }
        return assetdischargedocument;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public AssetDischargeDocument update(AssetDischargeDocument assetdischargedocument) throws EntityNotFoundException {
        LOGGER.debug("Updating AssetDischargeDocument with information: {}", assetdischargedocument);
        this.wmGenericDao.update(assetdischargedocument);

        Integer assetdischargedocumentId = assetdischargedocument.getIdAssetDischargeDocument();

        return this.wmGenericDao.findById(assetdischargedocumentId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public AssetDischargeDocument delete(Integer assetdischargedocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetDischargeDocument with id: {}", assetdischargedocumentId);
        AssetDischargeDocument deleted = this.wmGenericDao.findById(assetdischargedocumentId);
        if (deleted == null) {
            LOGGER.debug("No AssetDischargeDocument found with id: {}", assetdischargedocumentId);
            throw new EntityNotFoundException(String.valueOf(assetdischargedocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<AssetDischargeDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AssetDischargeDocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<AssetDischargeDocument> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AssetDischargeDocuments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table AssetDischargeDocument to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<AssetDischargeDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

