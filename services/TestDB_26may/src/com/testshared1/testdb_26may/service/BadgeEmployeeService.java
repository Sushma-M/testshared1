/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.BadgeEmployee;

/**
 * Service object for domain model class BadgeEmployee.
 *
 * @see {@link BadgeEmployee}
 */
public interface BadgeEmployeeService {

    /**
     * Creates a new BadgeEmployee.
     *
     * @param badgeEmployee The information of the created CompositeTable.
     * @return The created BadgeEmployee.
     */
	BadgeEmployee create(BadgeEmployee badgeEmployee);


	/**
	 * Finds BadgeEmployee by id.
	 *
	 * @param badgeEmployeeId The id of the wanted BadgeEmployee.
	 * @return The found BadgeEmployee. If no BadgeEmployee is found, this method returns null.
	 */
	BadgeEmployee getById(Integer badgeEmployeeId) throws EntityNotFoundException;

	/**
	 * Updates the information of a BadgeEmployee.
	 *
	 * @param badgeEmployee The information of the updated BadgeEmployee.
	 * @return The updated BadgeEmployee.
     *
	 * @throws EntityNotFoundException if no BadgeEmployee is found with given id.
	 */
	BadgeEmployee update(BadgeEmployee badgeEmployee) throws EntityNotFoundException;

    /**
	 * Deletes a BadgeEmployee.
	 *
	 * @param badgeEmployeeId The id of the deleted BadgeEmployee.
	 * @return The deleted BadgeEmployee.
     *
	 * @throws EntityNotFoundException if no BadgeEmployee is found with the given id.
	 */
	BadgeEmployee delete(Integer badgeEmployeeId) throws EntityNotFoundException;

	/**
	 * Finds all BadgeEmployees.
	 *
	 * @return A list of BadgeEmployees.
	 */
    @Deprecated
	Page<BadgeEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all BadgeEmployees.
	 * @return A list of BadgeEmployees.
	 */
    Page<BadgeEmployee> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BadgeEmployees in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the BadgeEmployee.
	 */
	long count(String query);

    Page<BadgeEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

