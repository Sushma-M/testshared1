/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ApplicantNote;

/**
 * ServiceImpl object for domain model class ApplicantNote.
 *
 * @see ApplicantNote
 */
@Service("TestDB_26may.ApplicantNoteService")
public class ApplicantNoteServiceImpl implements ApplicantNoteService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantNoteServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ApplicantNoteDao")
    private WMGenericDao<ApplicantNote, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ApplicantNote, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ApplicantNote create(ApplicantNote applicantnote) {
        LOGGER.debug("Creating a new ApplicantNote with information: {}", applicantnote);
        return this.wmGenericDao.create(applicantnote);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ApplicantNote getById(Integer applicantnoteId) throws EntityNotFoundException {
        LOGGER.debug("Finding ApplicantNote by id: {}", applicantnoteId);
        ApplicantNote applicantnote = this.wmGenericDao.findById(applicantnoteId);
        if (applicantnote == null){
            LOGGER.debug("No ApplicantNote found with id: {}", applicantnoteId);
            throw new EntityNotFoundException(String.valueOf(applicantnoteId));
        }
        return applicantnote;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ApplicantNote update(ApplicantNote applicantnote) throws EntityNotFoundException {
        LOGGER.debug("Updating ApplicantNote with information: {}", applicantnote);
        this.wmGenericDao.update(applicantnote);

        Integer applicantnoteId = applicantnote.getIdApplicantNote();

        return this.wmGenericDao.findById(applicantnoteId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ApplicantNote delete(Integer applicantnoteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantNote with id: {}", applicantnoteId);
        ApplicantNote deleted = this.wmGenericDao.findById(applicantnoteId);
        if (deleted == null) {
            LOGGER.debug("No ApplicantNote found with id: {}", applicantnoteId);
            throw new EntityNotFoundException(String.valueOf(applicantnoteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ApplicantNote> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ApplicantNotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ApplicantNote> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ApplicantNotes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ApplicantNote to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ApplicantNote> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

