/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Loan;

/**
 * Service object for domain model class Loan.
 *
 * @see {@link Loan}
 */
public interface LoanService {

    /**
     * Creates a new Loan.
     *
     * @param loan The information of the created CompositeTable.
     * @return The created Loan.
     */
	Loan create(Loan loan);


	/**
	 * Finds Loan by id.
	 *
	 * @param loanId The id of the wanted Loan.
	 * @return The found Loan. If no Loan is found, this method returns null.
	 */
	Loan getById(Integer loanId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Loan.
	 *
	 * @param loan The information of the updated Loan.
	 * @return The updated Loan.
     *
	 * @throws EntityNotFoundException if no Loan is found with given id.
	 */
	Loan update(Loan loan) throws EntityNotFoundException;

    /**
	 * Deletes a Loan.
	 *
	 * @param loanId The id of the deleted Loan.
	 * @return The deleted Loan.
     *
	 * @throws EntityNotFoundException if no Loan is found with the given id.
	 */
	Loan delete(Integer loanId) throws EntityNotFoundException;

	/**
	 * Finds all Loans.
	 *
	 * @return A list of Loans.
	 */
    @Deprecated
	Page<Loan> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Loans.
	 * @return A list of Loans.
	 */
    Page<Loan> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Loans in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Loan.
	 */
	long count(String query);

    Page<Loan> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

