/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TravelEmployee;

/**
 * Service object for domain model class TravelEmployee.
 *
 * @see {@link TravelEmployee}
 */
public interface TravelEmployeeService {

    /**
     * Creates a new TravelEmployee.
     *
     * @param travelEmployee The information of the created CompositeTable.
     * @return The created TravelEmployee.
     */
	TravelEmployee create(TravelEmployee travelEmployee);


	/**
	 * Finds TravelEmployee by id.
	 *
	 * @param travelEmployeeId The id of the wanted TravelEmployee.
	 * @return The found TravelEmployee. If no TravelEmployee is found, this method returns null.
	 */
	TravelEmployee getById(Integer travelEmployeeId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TravelEmployee.
	 *
	 * @param travelEmployee The information of the updated TravelEmployee.
	 * @return The updated TravelEmployee.
     *
	 * @throws EntityNotFoundException if no TravelEmployee is found with given id.
	 */
	TravelEmployee update(TravelEmployee travelEmployee) throws EntityNotFoundException;

    /**
	 * Deletes a TravelEmployee.
	 *
	 * @param travelEmployeeId The id of the deleted TravelEmployee.
	 * @return The deleted TravelEmployee.
     *
	 * @throws EntityNotFoundException if no TravelEmployee is found with the given id.
	 */
	TravelEmployee delete(Integer travelEmployeeId) throws EntityNotFoundException;

	/**
	 * Finds all TravelEmployees.
	 *
	 * @return A list of TravelEmployees.
	 */
    @Deprecated
	Page<TravelEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TravelEmployees.
	 * @return A list of TravelEmployees.
	 */
    Page<TravelEmployee> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TravelEmployees in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TravelEmployee.
	 */
	long count(String query);

    Page<TravelEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

