/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeTermination;

/**
 * ServiceImpl object for domain model class EmployeeTermination.
 *
 * @see EmployeeTermination
 */
@Service("TestDB_26may.EmployeeTerminationService")
public class EmployeeTerminationServiceImpl implements EmployeeTerminationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTerminationServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeTerminationDao")
    private WMGenericDao<EmployeeTermination, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeTermination, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeTermination create(EmployeeTermination employeetermination) {
        LOGGER.debug("Creating a new EmployeeTermination with information: {}", employeetermination);
        return this.wmGenericDao.create(employeetermination);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeTermination getById(Integer employeeterminationId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeTermination by id: {}", employeeterminationId);
        EmployeeTermination employeetermination = this.wmGenericDao.findById(employeeterminationId);
        if (employeetermination == null){
            LOGGER.debug("No EmployeeTermination found with id: {}", employeeterminationId);
            throw new EntityNotFoundException(String.valueOf(employeeterminationId));
        }
        return employeetermination;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeTermination update(EmployeeTermination employeetermination) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeTermination with information: {}", employeetermination);
        this.wmGenericDao.update(employeetermination);

        Integer employeeterminationId = employeetermination.getIdEmployeeTermination();

        return this.wmGenericDao.findById(employeeterminationId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeTermination delete(Integer employeeterminationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeTermination with id: {}", employeeterminationId);
        EmployeeTermination deleted = this.wmGenericDao.findById(employeeterminationId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeTermination found with id: {}", employeeterminationId);
            throw new EntityNotFoundException(String.valueOf(employeeterminationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeTermination> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeTerminations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeTermination> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeTerminations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeTermination to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeTermination> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

