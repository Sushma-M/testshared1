/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ApplicantAppointment;

/**
 * Service object for domain model class ApplicantAppointment.
 *
 * @see {@link ApplicantAppointment}
 */
public interface ApplicantAppointmentService {

    /**
     * Creates a new ApplicantAppointment.
     *
     * @param applicantAppointment The information of the created CompositeTable.
     * @return The created ApplicantAppointment.
     */
	ApplicantAppointment create(ApplicantAppointment applicantAppointment);


	/**
	 * Finds ApplicantAppointment by id.
	 *
	 * @param applicantAppointmentId The id of the wanted ApplicantAppointment.
	 * @return The found ApplicantAppointment. If no ApplicantAppointment is found, this method returns null.
	 */
	ApplicantAppointment getById(Integer applicantAppointmentId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ApplicantAppointment.
	 *
	 * @param applicantAppointment The information of the updated ApplicantAppointment.
	 * @return The updated ApplicantAppointment.
     *
	 * @throws EntityNotFoundException if no ApplicantAppointment is found with given id.
	 */
	ApplicantAppointment update(ApplicantAppointment applicantAppointment) throws EntityNotFoundException;

    /**
	 * Deletes a ApplicantAppointment.
	 *
	 * @param applicantAppointmentId The id of the deleted ApplicantAppointment.
	 * @return The deleted ApplicantAppointment.
     *
	 * @throws EntityNotFoundException if no ApplicantAppointment is found with the given id.
	 */
	ApplicantAppointment delete(Integer applicantAppointmentId) throws EntityNotFoundException;

	/**
	 * Finds all ApplicantAppointments.
	 *
	 * @return A list of ApplicantAppointments.
	 */
    @Deprecated
	Page<ApplicantAppointment> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ApplicantAppointments.
	 * @return A list of ApplicantAppointments.
	 */
    Page<ApplicantAppointment> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ApplicantAppointments in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ApplicantAppointment.
	 */
	long count(String query);

    Page<ApplicantAppointment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

