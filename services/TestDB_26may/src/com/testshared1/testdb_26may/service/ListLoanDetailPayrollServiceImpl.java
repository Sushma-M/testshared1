/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListLoanDetailPayroll;

/**
 * ServiceImpl object for domain model class ListLoanDetailPayroll.
 *
 * @see ListLoanDetailPayroll
 */
@Service("TestDB_26may.ListLoanDetailPayrollService")
public class ListLoanDetailPayrollServiceImpl implements ListLoanDetailPayrollService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListLoanDetailPayrollServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListLoanDetailPayrollDao")
    private WMGenericDao<ListLoanDetailPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListLoanDetailPayroll, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListLoanDetailPayroll create(ListLoanDetailPayroll listloandetailpayroll) {
        LOGGER.debug("Creating a new ListLoanDetailPayroll with information: {}", listloandetailpayroll);
        return this.wmGenericDao.create(listloandetailpayroll);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListLoanDetailPayroll getById(Integer listloandetailpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListLoanDetailPayroll by id: {}", listloandetailpayrollId);
        ListLoanDetailPayroll listloandetailpayroll = this.wmGenericDao.findById(listloandetailpayrollId);
        if (listloandetailpayroll == null){
            LOGGER.debug("No ListLoanDetailPayroll found with id: {}", listloandetailpayrollId);
            throw new EntityNotFoundException(String.valueOf(listloandetailpayrollId));
        }
        return listloandetailpayroll;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListLoanDetailPayroll update(ListLoanDetailPayroll listloandetailpayroll) throws EntityNotFoundException {
        LOGGER.debug("Updating ListLoanDetailPayroll with information: {}", listloandetailpayroll);
        this.wmGenericDao.update(listloandetailpayroll);

        Integer listloandetailpayrollId = listloandetailpayroll.getIdListLoanDetailPayroll();

        return this.wmGenericDao.findById(listloandetailpayrollId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListLoanDetailPayroll delete(Integer listloandetailpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListLoanDetailPayroll with id: {}", listloandetailpayrollId);
        ListLoanDetailPayroll deleted = this.wmGenericDao.findById(listloandetailpayrollId);
        if (deleted == null) {
            LOGGER.debug("No ListLoanDetailPayroll found with id: {}", listloandetailpayrollId);
            throw new EntityNotFoundException(String.valueOf(listloandetailpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListLoanDetailPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListLoanDetailPayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListLoanDetailPayroll> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListLoanDetailPayrolls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListLoanDetailPayroll to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListLoanDetailPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

