/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Country;

/**
 * Service object for domain model class Country.
 *
 * @see {@link Country}
 */
public interface CountryService {

    /**
     * Creates a new Country.
     *
     * @param country The information of the created CompositeTable.
     * @return The created Country.
     */
	Country create(Country country);


	/**
	 * Finds Country by id.
	 *
	 * @param countryId The id of the wanted Country.
	 * @return The found Country. If no Country is found, this method returns null.
	 */
	Country getById(Integer countryId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Country.
	 *
	 * @param country The information of the updated Country.
	 * @return The updated Country.
     *
	 * @throws EntityNotFoundException if no Country is found with given id.
	 */
	Country update(Country country) throws EntityNotFoundException;

    /**
	 * Deletes a Country.
	 *
	 * @param countryId The id of the deleted Country.
	 * @return The deleted Country.
     *
	 * @throws EntityNotFoundException if no Country is found with the given id.
	 */
	Country delete(Integer countryId) throws EntityNotFoundException;

	/**
	 * Finds all Countries.
	 *
	 * @return A list of Countries.
	 */
    @Deprecated
	Page<Country> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Countries.
	 * @return A list of Countries.
	 */
    Page<Country> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Countries in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Country.
	 */
	long count(String query);

    Page<Country> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

