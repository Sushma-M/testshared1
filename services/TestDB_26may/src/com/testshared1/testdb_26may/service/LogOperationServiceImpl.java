/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.LogOperation;

/**
 * ServiceImpl object for domain model class LogOperation.
 *
 * @see LogOperation
 */
@Service("TestDB_26may.LogOperationService")
public class LogOperationServiceImpl implements LogOperationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LogOperationServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.LogOperationDao")
    private WMGenericDao<LogOperation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LogOperation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public LogOperation create(LogOperation logoperation) {
        LOGGER.debug("Creating a new LogOperation with information: {}", logoperation);
        return this.wmGenericDao.create(logoperation);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public LogOperation getById(Integer logoperationId) throws EntityNotFoundException {
        LOGGER.debug("Finding LogOperation by id: {}", logoperationId);
        LogOperation logoperation = this.wmGenericDao.findById(logoperationId);
        if (logoperation == null){
            LOGGER.debug("No LogOperation found with id: {}", logoperationId);
            throw new EntityNotFoundException(String.valueOf(logoperationId));
        }
        return logoperation;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public LogOperation update(LogOperation logoperation) throws EntityNotFoundException {
        LOGGER.debug("Updating LogOperation with information: {}", logoperation);
        this.wmGenericDao.update(logoperation);

        Integer logoperationId = logoperation.getIdLogOperation();

        return this.wmGenericDao.findById(logoperationId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public LogOperation delete(Integer logoperationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LogOperation with id: {}", logoperationId);
        LogOperation deleted = this.wmGenericDao.findById(logoperationId);
        if (deleted == null) {
            LOGGER.debug("No LogOperation found with id: {}", logoperationId);
            throw new EntityNotFoundException(String.valueOf(logoperationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<LogOperation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LogOperations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<LogOperation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LogOperations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table LogOperation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<LogOperation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

