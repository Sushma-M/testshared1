/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.PaymentLoanManual;

/**
 * ServiceImpl object for domain model class PaymentLoanManual.
 *
 * @see PaymentLoanManual
 */
@Service("TestDB_26may.PaymentLoanManualService")
public class PaymentLoanManualServiceImpl implements PaymentLoanManualService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentLoanManualServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.PaymentLoanManualDao")
    private WMGenericDao<PaymentLoanManual, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PaymentLoanManual, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public PaymentLoanManual create(PaymentLoanManual paymentloanmanual) {
        LOGGER.debug("Creating a new PaymentLoanManual with information: {}", paymentloanmanual);
        return this.wmGenericDao.create(paymentloanmanual);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public PaymentLoanManual getById(Integer paymentloanmanualId) throws EntityNotFoundException {
        LOGGER.debug("Finding PaymentLoanManual by id: {}", paymentloanmanualId);
        PaymentLoanManual paymentloanmanual = this.wmGenericDao.findById(paymentloanmanualId);
        if (paymentloanmanual == null){
            LOGGER.debug("No PaymentLoanManual found with id: {}", paymentloanmanualId);
            throw new EntityNotFoundException(String.valueOf(paymentloanmanualId));
        }
        return paymentloanmanual;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public PaymentLoanManual update(PaymentLoanManual paymentloanmanual) throws EntityNotFoundException {
        LOGGER.debug("Updating PaymentLoanManual with information: {}", paymentloanmanual);
        this.wmGenericDao.update(paymentloanmanual);

        Integer paymentloanmanualId = paymentloanmanual.getIdPaymentLoanManual();

        return this.wmGenericDao.findById(paymentloanmanualId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public PaymentLoanManual delete(Integer paymentloanmanualId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PaymentLoanManual with id: {}", paymentloanmanualId);
        PaymentLoanManual deleted = this.wmGenericDao.findById(paymentloanmanualId);
        if (deleted == null) {
            LOGGER.debug("No PaymentLoanManual found with id: {}", paymentloanmanualId);
            throw new EntityNotFoundException(String.valueOf(paymentloanmanualId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<PaymentLoanManual> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PaymentLoanManuals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<PaymentLoanManual> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PaymentLoanManuals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table PaymentLoanManual to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<PaymentLoanManual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

