/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeFile;

/**
 * ServiceImpl object for domain model class EmployeeFile.
 *
 * @see EmployeeFile
 */
@Service("TestDB_26may.EmployeeFileService")
public class EmployeeFileServiceImpl implements EmployeeFileService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeFileServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeFileDao")
    private WMGenericDao<EmployeeFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeFile, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeFile create(EmployeeFile employeefile) {
        LOGGER.debug("Creating a new EmployeeFile with information: {}", employeefile);
        return this.wmGenericDao.create(employeefile);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeFile getById(Integer employeefileId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeFile by id: {}", employeefileId);
        EmployeeFile employeefile = this.wmGenericDao.findById(employeefileId);
        if (employeefile == null){
            LOGGER.debug("No EmployeeFile found with id: {}", employeefileId);
            throw new EntityNotFoundException(String.valueOf(employeefileId));
        }
        return employeefile;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeFile update(EmployeeFile employeefile) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeFile with information: {}", employeefile);
        this.wmGenericDao.update(employeefile);

        Integer employeefileId = employeefile.getIdEmployeeFile();

        return this.wmGenericDao.findById(employeefileId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeFile delete(Integer employeefileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeFile with id: {}", employeefileId);
        EmployeeFile deleted = this.wmGenericDao.findById(employeefileId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeFile found with id: {}", employeefileId);
            throw new EntityNotFoundException(String.valueOf(employeefileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeFiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeFile> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeFiles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeFile to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

