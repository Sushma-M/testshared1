/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.BadgeTemplate;

/**
 * Service object for domain model class BadgeTemplate.
 *
 * @see {@link BadgeTemplate}
 */
public interface BadgeTemplateService {

    /**
     * Creates a new BadgeTemplate.
     *
     * @param badgeTemplate The information of the created CompositeTable.
     * @return The created BadgeTemplate.
     */
	BadgeTemplate create(BadgeTemplate badgeTemplate);


	/**
	 * Finds BadgeTemplate by id.
	 *
	 * @param badgeTemplateId The id of the wanted BadgeTemplate.
	 * @return The found BadgeTemplate. If no BadgeTemplate is found, this method returns null.
	 */
	BadgeTemplate getById(Integer badgeTemplateId) throws EntityNotFoundException;

	/**
	 * Updates the information of a BadgeTemplate.
	 *
	 * @param badgeTemplate The information of the updated BadgeTemplate.
	 * @return The updated BadgeTemplate.
     *
	 * @throws EntityNotFoundException if no BadgeTemplate is found with given id.
	 */
	BadgeTemplate update(BadgeTemplate badgeTemplate) throws EntityNotFoundException;

    /**
	 * Deletes a BadgeTemplate.
	 *
	 * @param badgeTemplateId The id of the deleted BadgeTemplate.
	 * @return The deleted BadgeTemplate.
     *
	 * @throws EntityNotFoundException if no BadgeTemplate is found with the given id.
	 */
	BadgeTemplate delete(Integer badgeTemplateId) throws EntityNotFoundException;

	/**
	 * Finds all BadgeTemplates.
	 *
	 * @return A list of BadgeTemplates.
	 */
    @Deprecated
	Page<BadgeTemplate> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all BadgeTemplates.
	 * @return A list of BadgeTemplates.
	 */
    Page<BadgeTemplate> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BadgeTemplates in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the BadgeTemplate.
	 */
	long count(String query);

    Page<BadgeTemplate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

