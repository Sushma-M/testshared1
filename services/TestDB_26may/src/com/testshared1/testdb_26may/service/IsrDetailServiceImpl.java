/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.IsrDetail;

/**
 * ServiceImpl object for domain model class IsrDetail.
 *
 * @see IsrDetail
 */
@Service("TestDB_26may.IsrDetailService")
public class IsrDetailServiceImpl implements IsrDetailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IsrDetailServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.IsrDetailDao")
    private WMGenericDao<IsrDetail, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IsrDetail, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public IsrDetail create(IsrDetail isrdetail) {
        LOGGER.debug("Creating a new IsrDetail with information: {}", isrdetail);
        return this.wmGenericDao.create(isrdetail);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public IsrDetail getById(Integer isrdetailId) throws EntityNotFoundException {
        LOGGER.debug("Finding IsrDetail by id: {}", isrdetailId);
        IsrDetail isrdetail = this.wmGenericDao.findById(isrdetailId);
        if (isrdetail == null){
            LOGGER.debug("No IsrDetail found with id: {}", isrdetailId);
            throw new EntityNotFoundException(String.valueOf(isrdetailId));
        }
        return isrdetail;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public IsrDetail update(IsrDetail isrdetail) throws EntityNotFoundException {
        LOGGER.debug("Updating IsrDetail with information: {}", isrdetail);
        this.wmGenericDao.update(isrdetail);

        Integer isrdetailId = isrdetail.getIdIsrDetail();

        return this.wmGenericDao.findById(isrdetailId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public IsrDetail delete(Integer isrdetailId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IsrDetail with id: {}", isrdetailId);
        IsrDetail deleted = this.wmGenericDao.findById(isrdetailId);
        if (deleted == null) {
            LOGGER.debug("No IsrDetail found with id: {}", isrdetailId);
            throw new EntityNotFoundException(String.valueOf(isrdetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<IsrDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IsrDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<IsrDetail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IsrDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table IsrDetail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<IsrDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

