/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ApplicantFile;

/**
 * Service object for domain model class ApplicantFile.
 *
 * @see {@link ApplicantFile}
 */
public interface ApplicantFileService {

    /**
     * Creates a new ApplicantFile.
     *
     * @param applicantFile The information of the created CompositeTable.
     * @return The created ApplicantFile.
     */
	ApplicantFile create(ApplicantFile applicantFile);


	/**
	 * Finds ApplicantFile by id.
	 *
	 * @param applicantFileId The id of the wanted ApplicantFile.
	 * @return The found ApplicantFile. If no ApplicantFile is found, this method returns null.
	 */
	ApplicantFile getById(Integer applicantFileId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ApplicantFile.
	 *
	 * @param applicantFile The information of the updated ApplicantFile.
	 * @return The updated ApplicantFile.
     *
	 * @throws EntityNotFoundException if no ApplicantFile is found with given id.
	 */
	ApplicantFile update(ApplicantFile applicantFile) throws EntityNotFoundException;

    /**
	 * Deletes a ApplicantFile.
	 *
	 * @param applicantFileId The id of the deleted ApplicantFile.
	 * @return The deleted ApplicantFile.
     *
	 * @throws EntityNotFoundException if no ApplicantFile is found with the given id.
	 */
	ApplicantFile delete(Integer applicantFileId) throws EntityNotFoundException;

	/**
	 * Finds all ApplicantFiles.
	 *
	 * @return A list of ApplicantFiles.
	 */
    @Deprecated
	Page<ApplicantFile> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ApplicantFiles.
	 * @return A list of ApplicantFiles.
	 */
    Page<ApplicantFile> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ApplicantFiles in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ApplicantFile.
	 */
	long count(String query);

    Page<ApplicantFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

