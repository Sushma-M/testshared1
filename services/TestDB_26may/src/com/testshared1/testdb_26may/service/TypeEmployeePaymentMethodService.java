/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEmployeePaymentMethod;

/**
 * Service object for domain model class TypeEmployeePaymentMethod.
 *
 * @see {@link TypeEmployeePaymentMethod}
 */
public interface TypeEmployeePaymentMethodService {

    /**
     * Creates a new TypeEmployeePaymentMethod.
     *
     * @param typeEmployeePaymentMethod The information of the created CompositeTable.
     * @return The created TypeEmployeePaymentMethod.
     */
	TypeEmployeePaymentMethod create(TypeEmployeePaymentMethod typeEmployeePaymentMethod);


	/**
	 * Finds TypeEmployeePaymentMethod by id.
	 *
	 * @param typeEmployeePaymentMethodId The id of the wanted TypeEmployeePaymentMethod.
	 * @return The found TypeEmployeePaymentMethod. If no TypeEmployeePaymentMethod is found, this method returns null.
	 */
	TypeEmployeePaymentMethod getById(Integer typeEmployeePaymentMethodId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeEmployeePaymentMethod.
	 *
	 * @param typeEmployeePaymentMethod The information of the updated TypeEmployeePaymentMethod.
	 * @return The updated TypeEmployeePaymentMethod.
     *
	 * @throws EntityNotFoundException if no TypeEmployeePaymentMethod is found with given id.
	 */
	TypeEmployeePaymentMethod update(TypeEmployeePaymentMethod typeEmployeePaymentMethod) throws EntityNotFoundException;

    /**
	 * Deletes a TypeEmployeePaymentMethod.
	 *
	 * @param typeEmployeePaymentMethodId The id of the deleted TypeEmployeePaymentMethod.
	 * @return The deleted TypeEmployeePaymentMethod.
     *
	 * @throws EntityNotFoundException if no TypeEmployeePaymentMethod is found with the given id.
	 */
	TypeEmployeePaymentMethod delete(Integer typeEmployeePaymentMethodId) throws EntityNotFoundException;

	/**
	 * Finds all TypeEmployeePaymentMethods.
	 *
	 * @return A list of TypeEmployeePaymentMethods.
	 */
    @Deprecated
	Page<TypeEmployeePaymentMethod> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeEmployeePaymentMethods.
	 * @return A list of TypeEmployeePaymentMethods.
	 */
    Page<TypeEmployeePaymentMethod> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeEmployeePaymentMethods in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeEmployeePaymentMethod.
	 */
	long count(String query);

    Page<TypeEmployeePaymentMethod> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

