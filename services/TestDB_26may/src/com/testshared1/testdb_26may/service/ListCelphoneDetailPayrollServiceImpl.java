/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListCelphoneDetailPayroll;

/**
 * ServiceImpl object for domain model class ListCelphoneDetailPayroll.
 *
 * @see ListCelphoneDetailPayroll
 */
@Service("TestDB_26may.ListCelphoneDetailPayrollService")
public class ListCelphoneDetailPayrollServiceImpl implements ListCelphoneDetailPayrollService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCelphoneDetailPayrollServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListCelphoneDetailPayrollDao")
    private WMGenericDao<ListCelphoneDetailPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListCelphoneDetailPayroll, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListCelphoneDetailPayroll create(ListCelphoneDetailPayroll listcelphonedetailpayroll) {
        LOGGER.debug("Creating a new ListCelphoneDetailPayroll with information: {}", listcelphonedetailpayroll);
        return this.wmGenericDao.create(listcelphonedetailpayroll);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListCelphoneDetailPayroll getById(Integer listcelphonedetailpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListCelphoneDetailPayroll by id: {}", listcelphonedetailpayrollId);
        ListCelphoneDetailPayroll listcelphonedetailpayroll = this.wmGenericDao.findById(listcelphonedetailpayrollId);
        if (listcelphonedetailpayroll == null){
            LOGGER.debug("No ListCelphoneDetailPayroll found with id: {}", listcelphonedetailpayrollId);
            throw new EntityNotFoundException(String.valueOf(listcelphonedetailpayrollId));
        }
        return listcelphonedetailpayroll;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListCelphoneDetailPayroll update(ListCelphoneDetailPayroll listcelphonedetailpayroll) throws EntityNotFoundException {
        LOGGER.debug("Updating ListCelphoneDetailPayroll with information: {}", listcelphonedetailpayroll);
        this.wmGenericDao.update(listcelphonedetailpayroll);

        Integer listcelphonedetailpayrollId = listcelphonedetailpayroll.getIdListCelphoneDetailPayroll();

        return this.wmGenericDao.findById(listcelphonedetailpayrollId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListCelphoneDetailPayroll delete(Integer listcelphonedetailpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCelphoneDetailPayroll with id: {}", listcelphonedetailpayrollId);
        ListCelphoneDetailPayroll deleted = this.wmGenericDao.findById(listcelphonedetailpayrollId);
        if (deleted == null) {
            LOGGER.debug("No ListCelphoneDetailPayroll found with id: {}", listcelphonedetailpayrollId);
            throw new EntityNotFoundException(String.valueOf(listcelphonedetailpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListCelphoneDetailPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListCelphoneDetailPayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListCelphoneDetailPayroll> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListCelphoneDetailPayrolls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListCelphoneDetailPayroll to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListCelphoneDetailPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

