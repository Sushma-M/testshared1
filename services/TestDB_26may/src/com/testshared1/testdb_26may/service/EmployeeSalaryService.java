/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeSalary;

/**
 * Service object for domain model class EmployeeSalary.
 *
 * @see {@link EmployeeSalary}
 */
public interface EmployeeSalaryService {

    /**
     * Creates a new EmployeeSalary.
     *
     * @param employeeSalary The information of the created CompositeTable.
     * @return The created EmployeeSalary.
     */
	EmployeeSalary create(EmployeeSalary employeeSalary);


	/**
	 * Finds EmployeeSalary by id.
	 *
	 * @param employeeSalaryId The id of the wanted EmployeeSalary.
	 * @return The found EmployeeSalary. If no EmployeeSalary is found, this method returns null.
	 */
	EmployeeSalary getById(Integer employeeSalaryId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeSalary.
	 *
	 * @param employeeSalary The information of the updated EmployeeSalary.
	 * @return The updated EmployeeSalary.
     *
	 * @throws EntityNotFoundException if no EmployeeSalary is found with given id.
	 */
	EmployeeSalary update(EmployeeSalary employeeSalary) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeSalary.
	 *
	 * @param employeeSalaryId The id of the deleted EmployeeSalary.
	 * @return The deleted EmployeeSalary.
     *
	 * @throws EntityNotFoundException if no EmployeeSalary is found with the given id.
	 */
	EmployeeSalary delete(Integer employeeSalaryId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeSalaries.
	 *
	 * @return A list of EmployeeSalaries.
	 */
    @Deprecated
	Page<EmployeeSalary> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeSalaries.
	 * @return A list of EmployeeSalaries.
	 */
    Page<EmployeeSalary> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeSalaries in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeSalary.
	 */
	long count(String query);

    Page<EmployeeSalary> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

