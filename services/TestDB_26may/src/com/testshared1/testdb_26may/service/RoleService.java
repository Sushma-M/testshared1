/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Role;

/**
 * Service object for domain model class Role.
 *
 * @see {@link Role}
 */
public interface RoleService {

    /**
     * Creates a new Role.
     *
     * @param role The information of the created CompositeTable.
     * @return The created Role.
     */
	Role create(Role role);


	/**
	 * Finds Role by id.
	 *
	 * @param roleId The id of the wanted Role.
	 * @return The found Role. If no Role is found, this method returns null.
	 */
	Role getById(Integer roleId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Role.
	 *
	 * @param role The information of the updated Role.
	 * @return The updated Role.
     *
	 * @throws EntityNotFoundException if no Role is found with given id.
	 */
	Role update(Role role) throws EntityNotFoundException;

    /**
	 * Deletes a Role.
	 *
	 * @param roleId The id of the deleted Role.
	 * @return The deleted Role.
     *
	 * @throws EntityNotFoundException if no Role is found with the given id.
	 */
	Role delete(Integer roleId) throws EntityNotFoundException;

	/**
	 * Finds all Roles.
	 *
	 * @return A list of Roles.
	 */
    @Deprecated
	Page<Role> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Roles.
	 * @return A list of Roles.
	 */
    Page<Role> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Roles in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Role.
	 */
	long count(String query);

    Page<Role> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

