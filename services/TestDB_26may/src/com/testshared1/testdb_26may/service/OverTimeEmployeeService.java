/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.OverTimeEmployee;

/**
 * Service object for domain model class OverTimeEmployee.
 *
 * @see {@link OverTimeEmployee}
 */
public interface OverTimeEmployeeService {

    /**
     * Creates a new OverTimeEmployee.
     *
     * @param overTimeEmployee The information of the created CompositeTable.
     * @return The created OverTimeEmployee.
     */
	OverTimeEmployee create(OverTimeEmployee overTimeEmployee);


	/**
	 * Finds OverTimeEmployee by id.
	 *
	 * @param overTimeEmployeeId The id of the wanted OverTimeEmployee.
	 * @return The found OverTimeEmployee. If no OverTimeEmployee is found, this method returns null.
	 */
	OverTimeEmployee getById(Integer overTimeEmployeeId) throws EntityNotFoundException;

	/**
	 * Updates the information of a OverTimeEmployee.
	 *
	 * @param overTimeEmployee The information of the updated OverTimeEmployee.
	 * @return The updated OverTimeEmployee.
     *
	 * @throws EntityNotFoundException if no OverTimeEmployee is found with given id.
	 */
	OverTimeEmployee update(OverTimeEmployee overTimeEmployee) throws EntityNotFoundException;

    /**
	 * Deletes a OverTimeEmployee.
	 *
	 * @param overTimeEmployeeId The id of the deleted OverTimeEmployee.
	 * @return The deleted OverTimeEmployee.
     *
	 * @throws EntityNotFoundException if no OverTimeEmployee is found with the given id.
	 */
	OverTimeEmployee delete(Integer overTimeEmployeeId) throws EntityNotFoundException;

	/**
	 * Finds all OverTimeEmployees.
	 *
	 * @return A list of OverTimeEmployees.
	 */
    @Deprecated
	Page<OverTimeEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all OverTimeEmployees.
	 * @return A list of OverTimeEmployees.
	 */
    Page<OverTimeEmployee> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the OverTimeEmployees in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the OverTimeEmployee.
	 */
	long count(String query);

    Page<OverTimeEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

