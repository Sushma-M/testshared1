/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.DeductionEventual;

/**
 * Service object for domain model class DeductionEventual.
 *
 * @see {@link DeductionEventual}
 */
public interface DeductionEventualService {

    /**
     * Creates a new DeductionEventual.
     *
     * @param deductionEventual The information of the created CompositeTable.
     * @return The created DeductionEventual.
     */
	DeductionEventual create(DeductionEventual deductionEventual);


	/**
	 * Finds DeductionEventual by id.
	 *
	 * @param deductionEventualId The id of the wanted DeductionEventual.
	 * @return The found DeductionEventual. If no DeductionEventual is found, this method returns null.
	 */
	DeductionEventual getById(Integer deductionEventualId) throws EntityNotFoundException;

	/**
	 * Updates the information of a DeductionEventual.
	 *
	 * @param deductionEventual The information of the updated DeductionEventual.
	 * @return The updated DeductionEventual.
     *
	 * @throws EntityNotFoundException if no DeductionEventual is found with given id.
	 */
	DeductionEventual update(DeductionEventual deductionEventual) throws EntityNotFoundException;

    /**
	 * Deletes a DeductionEventual.
	 *
	 * @param deductionEventualId The id of the deleted DeductionEventual.
	 * @return The deleted DeductionEventual.
     *
	 * @throws EntityNotFoundException if no DeductionEventual is found with the given id.
	 */
	DeductionEventual delete(Integer deductionEventualId) throws EntityNotFoundException;

	/**
	 * Finds all DeductionEventuals.
	 *
	 * @return A list of DeductionEventuals.
	 */
    @Deprecated
	Page<DeductionEventual> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all DeductionEventuals.
	 * @return A list of DeductionEventuals.
	 */
    Page<DeductionEventual> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DeductionEventuals in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the DeductionEventual.
	 */
	long count(String query);

    Page<DeductionEventual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

