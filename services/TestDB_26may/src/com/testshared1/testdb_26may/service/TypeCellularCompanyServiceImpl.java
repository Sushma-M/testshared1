/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeCellularCompany;

/**
 * ServiceImpl object for domain model class TypeCellularCompany.
 *
 * @see TypeCellularCompany
 */
@Service("TestDB_26may.TypeCellularCompanyService")
public class TypeCellularCompanyServiceImpl implements TypeCellularCompanyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeCellularCompanyServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeCellularCompanyDao")
    private WMGenericDao<TypeCellularCompany, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeCellularCompany, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeCellularCompany create(TypeCellularCompany typecellularcompany) {
        LOGGER.debug("Creating a new TypeCellularCompany with information: {}", typecellularcompany);
        return this.wmGenericDao.create(typecellularcompany);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeCellularCompany getById(Integer typecellularcompanyId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeCellularCompany by id: {}", typecellularcompanyId);
        TypeCellularCompany typecellularcompany = this.wmGenericDao.findById(typecellularcompanyId);
        if (typecellularcompany == null){
            LOGGER.debug("No TypeCellularCompany found with id: {}", typecellularcompanyId);
            throw new EntityNotFoundException(String.valueOf(typecellularcompanyId));
        }
        return typecellularcompany;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeCellularCompany update(TypeCellularCompany typecellularcompany) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeCellularCompany with information: {}", typecellularcompany);
        this.wmGenericDao.update(typecellularcompany);

        Integer typecellularcompanyId = typecellularcompany.getIdTypeCellularCompany();

        return this.wmGenericDao.findById(typecellularcompanyId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeCellularCompany delete(Integer typecellularcompanyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeCellularCompany with id: {}", typecellularcompanyId);
        TypeCellularCompany deleted = this.wmGenericDao.findById(typecellularcompanyId);
        if (deleted == null) {
            LOGGER.debug("No TypeCellularCompany found with id: {}", typecellularcompanyId);
            throw new EntityNotFoundException(String.valueOf(typecellularcompanyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeCellularCompany> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeCellularCompanies");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeCellularCompany> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeCellularCompanies");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeCellularCompany to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeCellularCompany> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

