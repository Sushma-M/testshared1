/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Month;

/**
 * Service object for domain model class Month.
 *
 * @see {@link Month}
 */
public interface MonthService {

    /**
     * Creates a new Month.
     *
     * @param month The information of the created CompositeTable.
     * @return The created Month.
     */
	Month create(Month month);


	/**
	 * Finds Month by id.
	 *
	 * @param monthId The id of the wanted Month.
	 * @return The found Month. If no Month is found, this method returns null.
	 */
	Month getById(Integer monthId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Month.
	 *
	 * @param month The information of the updated Month.
	 * @return The updated Month.
     *
	 * @throws EntityNotFoundException if no Month is found with given id.
	 */
	Month update(Month month) throws EntityNotFoundException;

    /**
	 * Deletes a Month.
	 *
	 * @param monthId The id of the deleted Month.
	 * @return The deleted Month.
     *
	 * @throws EntityNotFoundException if no Month is found with the given id.
	 */
	Month delete(Integer monthId) throws EntityNotFoundException;

	/**
	 * Finds all Months.
	 *
	 * @return A list of Months.
	 */
    @Deprecated
	Page<Month> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Months.
	 * @return A list of Months.
	 */
    Page<Month> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Months in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Month.
	 */
	long count(String query);

    Page<Month> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

