/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.DeductionPeriodic;

/**
 * ServiceImpl object for domain model class DeductionPeriodic.
 *
 * @see DeductionPeriodic
 */
@Service("TestDB_26may.DeductionPeriodicService")
public class DeductionPeriodicServiceImpl implements DeductionPeriodicService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeductionPeriodicServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.DeductionPeriodicDao")
    private WMGenericDao<DeductionPeriodic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DeductionPeriodic, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public DeductionPeriodic create(DeductionPeriodic deductionperiodic) {
        LOGGER.debug("Creating a new DeductionPeriodic with information: {}", deductionperiodic);
        return this.wmGenericDao.create(deductionperiodic);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public DeductionPeriodic getById(Integer deductionperiodicId) throws EntityNotFoundException {
        LOGGER.debug("Finding DeductionPeriodic by id: {}", deductionperiodicId);
        DeductionPeriodic deductionperiodic = this.wmGenericDao.findById(deductionperiodicId);
        if (deductionperiodic == null){
            LOGGER.debug("No DeductionPeriodic found with id: {}", deductionperiodicId);
            throw new EntityNotFoundException(String.valueOf(deductionperiodicId));
        }
        return deductionperiodic;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public DeductionPeriodic update(DeductionPeriodic deductionperiodic) throws EntityNotFoundException {
        LOGGER.debug("Updating DeductionPeriodic with information: {}", deductionperiodic);
        this.wmGenericDao.update(deductionperiodic);

        Integer deductionperiodicId = deductionperiodic.getIdDeductionPeriodic();

        return this.wmGenericDao.findById(deductionperiodicId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public DeductionPeriodic delete(Integer deductionperiodicId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeductionPeriodic with id: {}", deductionperiodicId);
        DeductionPeriodic deleted = this.wmGenericDao.findById(deductionperiodicId);
        if (deleted == null) {
            LOGGER.debug("No DeductionPeriodic found with id: {}", deductionperiodicId);
            throw new EntityNotFoundException(String.valueOf(deductionperiodicId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<DeductionPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DeductionPeriodics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<DeductionPeriodic> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DeductionPeriodics");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table DeductionPeriodic to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<DeductionPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

