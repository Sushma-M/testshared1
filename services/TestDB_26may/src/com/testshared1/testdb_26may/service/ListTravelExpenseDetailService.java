/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListTravelExpenseDetail;

/**
 * Service object for domain model class ListTravelExpenseDetail.
 *
 * @see {@link ListTravelExpenseDetail}
 */
public interface ListTravelExpenseDetailService {

    /**
     * Creates a new ListTravelExpenseDetail.
     *
     * @param listTravelExpenseDetail The information of the created CompositeTable.
     * @return The created ListTravelExpenseDetail.
     */
	ListTravelExpenseDetail create(ListTravelExpenseDetail listTravelExpenseDetail);


	/**
	 * Finds ListTravelExpenseDetail by id.
	 *
	 * @param listTravelExpenseDetailId The id of the wanted ListTravelExpenseDetail.
	 * @return The found ListTravelExpenseDetail. If no ListTravelExpenseDetail is found, this method returns null.
	 */
	ListTravelExpenseDetail getById(Integer listTravelExpenseDetailId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ListTravelExpenseDetail.
	 *
	 * @param listTravelExpenseDetail The information of the updated ListTravelExpenseDetail.
	 * @return The updated ListTravelExpenseDetail.
     *
	 * @throws EntityNotFoundException if no ListTravelExpenseDetail is found with given id.
	 */
	ListTravelExpenseDetail update(ListTravelExpenseDetail listTravelExpenseDetail) throws EntityNotFoundException;

    /**
	 * Deletes a ListTravelExpenseDetail.
	 *
	 * @param listTravelExpenseDetailId The id of the deleted ListTravelExpenseDetail.
	 * @return The deleted ListTravelExpenseDetail.
     *
	 * @throws EntityNotFoundException if no ListTravelExpenseDetail is found with the given id.
	 */
	ListTravelExpenseDetail delete(Integer listTravelExpenseDetailId) throws EntityNotFoundException;

	/**
	 * Finds all ListTravelExpenseDetails.
	 *
	 * @return A list of ListTravelExpenseDetails.
	 */
    @Deprecated
	Page<ListTravelExpenseDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ListTravelExpenseDetails.
	 * @return A list of ListTravelExpenseDetails.
	 */
    Page<ListTravelExpenseDetail> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ListTravelExpenseDetails in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ListTravelExpenseDetail.
	 */
	long count(String query);

    Page<ListTravelExpenseDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

