/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.OverTimeSegmentPayroll;

/**
 * ServiceImpl object for domain model class OverTimeSegmentPayroll.
 *
 * @see OverTimeSegmentPayroll
 */
@Service("TestDB_26may.OverTimeSegmentPayrollService")
public class OverTimeSegmentPayrollServiceImpl implements OverTimeSegmentPayrollService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OverTimeSegmentPayrollServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.OverTimeSegmentPayrollDao")
    private WMGenericDao<OverTimeSegmentPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OverTimeSegmentPayroll, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public OverTimeSegmentPayroll create(OverTimeSegmentPayroll overtimesegmentpayroll) {
        LOGGER.debug("Creating a new OverTimeSegmentPayroll with information: {}", overtimesegmentpayroll);
        return this.wmGenericDao.create(overtimesegmentpayroll);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public OverTimeSegmentPayroll getById(Integer overtimesegmentpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Finding OverTimeSegmentPayroll by id: {}", overtimesegmentpayrollId);
        OverTimeSegmentPayroll overtimesegmentpayroll = this.wmGenericDao.findById(overtimesegmentpayrollId);
        if (overtimesegmentpayroll == null){
            LOGGER.debug("No OverTimeSegmentPayroll found with id: {}", overtimesegmentpayrollId);
            throw new EntityNotFoundException(String.valueOf(overtimesegmentpayrollId));
        }
        return overtimesegmentpayroll;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public OverTimeSegmentPayroll update(OverTimeSegmentPayroll overtimesegmentpayroll) throws EntityNotFoundException {
        LOGGER.debug("Updating OverTimeSegmentPayroll with information: {}", overtimesegmentpayroll);
        this.wmGenericDao.update(overtimesegmentpayroll);

        Integer overtimesegmentpayrollId = overtimesegmentpayroll.getIdOverTimeSegmentPayroll();

        return this.wmGenericDao.findById(overtimesegmentpayrollId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public OverTimeSegmentPayroll delete(Integer overtimesegmentpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OverTimeSegmentPayroll with id: {}", overtimesegmentpayrollId);
        OverTimeSegmentPayroll deleted = this.wmGenericDao.findById(overtimesegmentpayrollId);
        if (deleted == null) {
            LOGGER.debug("No OverTimeSegmentPayroll found with id: {}", overtimesegmentpayrollId);
            throw new EntityNotFoundException(String.valueOf(overtimesegmentpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<OverTimeSegmentPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OverTimeSegmentPayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<OverTimeSegmentPayroll> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OverTimeSegmentPayrolls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table OverTimeSegmentPayroll to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<OverTimeSegmentPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

