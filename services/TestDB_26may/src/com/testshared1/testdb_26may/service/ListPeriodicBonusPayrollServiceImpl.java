/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListPeriodicBonusPayroll;

/**
 * ServiceImpl object for domain model class ListPeriodicBonusPayroll.
 *
 * @see ListPeriodicBonusPayroll
 */
@Service("TestDB_26may.ListPeriodicBonusPayrollService")
public class ListPeriodicBonusPayrollServiceImpl implements ListPeriodicBonusPayrollService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicBonusPayrollServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListPeriodicBonusPayrollDao")
    private WMGenericDao<ListPeriodicBonusPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListPeriodicBonusPayroll, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListPeriodicBonusPayroll create(ListPeriodicBonusPayroll listperiodicbonuspayroll) {
        LOGGER.debug("Creating a new ListPeriodicBonusPayroll with information: {}", listperiodicbonuspayroll);
        return this.wmGenericDao.create(listperiodicbonuspayroll);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicBonusPayroll getById(Integer listperiodicbonuspayrollId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListPeriodicBonusPayroll by id: {}", listperiodicbonuspayrollId);
        ListPeriodicBonusPayroll listperiodicbonuspayroll = this.wmGenericDao.findById(listperiodicbonuspayrollId);
        if (listperiodicbonuspayroll == null){
            LOGGER.debug("No ListPeriodicBonusPayroll found with id: {}", listperiodicbonuspayrollId);
            throw new EntityNotFoundException(String.valueOf(listperiodicbonuspayrollId));
        }
        return listperiodicbonuspayroll;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicBonusPayroll update(ListPeriodicBonusPayroll listperiodicbonuspayroll) throws EntityNotFoundException {
        LOGGER.debug("Updating ListPeriodicBonusPayroll with information: {}", listperiodicbonuspayroll);
        this.wmGenericDao.update(listperiodicbonuspayroll);

        Integer listperiodicbonuspayrollId = listperiodicbonuspayroll.getIdListPeriodicBonusPayroll();

        return this.wmGenericDao.findById(listperiodicbonuspayrollId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicBonusPayroll delete(Integer listperiodicbonuspayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicBonusPayroll with id: {}", listperiodicbonuspayrollId);
        ListPeriodicBonusPayroll deleted = this.wmGenericDao.findById(listperiodicbonuspayrollId);
        if (deleted == null) {
            LOGGER.debug("No ListPeriodicBonusPayroll found with id: {}", listperiodicbonuspayrollId);
            throw new EntityNotFoundException(String.valueOf(listperiodicbonuspayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListPeriodicBonusPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListPeriodicBonusPayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListPeriodicBonusPayroll> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListPeriodicBonusPayrolls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListPeriodicBonusPayroll to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListPeriodicBonusPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

