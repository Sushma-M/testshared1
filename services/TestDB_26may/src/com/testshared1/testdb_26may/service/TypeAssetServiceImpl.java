/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeAsset;

/**
 * ServiceImpl object for domain model class TypeAsset.
 *
 * @see TypeAsset
 */
@Service("TestDB_26may.TypeAssetService")
public class TypeAssetServiceImpl implements TypeAssetService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAssetServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeAssetDao")
    private WMGenericDao<TypeAsset, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeAsset, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeAsset create(TypeAsset typeasset) {
        LOGGER.debug("Creating a new TypeAsset with information: {}", typeasset);
        return this.wmGenericDao.create(typeasset);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeAsset getById(Integer typeassetId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeAsset by id: {}", typeassetId);
        TypeAsset typeasset = this.wmGenericDao.findById(typeassetId);
        if (typeasset == null){
            LOGGER.debug("No TypeAsset found with id: {}", typeassetId);
            throw new EntityNotFoundException(String.valueOf(typeassetId));
        }
        return typeasset;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeAsset update(TypeAsset typeasset) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeAsset with information: {}", typeasset);
        this.wmGenericDao.update(typeasset);

        Integer typeassetId = typeasset.getIdTypeAsset();

        return this.wmGenericDao.findById(typeassetId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeAsset delete(Integer typeassetId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeAsset with id: {}", typeassetId);
        TypeAsset deleted = this.wmGenericDao.findById(typeassetId);
        if (deleted == null) {
            LOGGER.debug("No TypeAsset found with id: {}", typeassetId);
            throw new EntityNotFoundException(String.valueOf(typeassetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeAsset> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeAssets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeAsset> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeAssets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeAsset to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeAsset> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

