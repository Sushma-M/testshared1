/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeMaritalStatus;

/**
 * Service object for domain model class TypeMaritalStatus.
 *
 * @see {@link TypeMaritalStatus}
 */
public interface TypeMaritalStatusService {

    /**
     * Creates a new TypeMaritalStatus.
     *
     * @param typeMaritalStatus The information of the created CompositeTable.
     * @return The created TypeMaritalStatus.
     */
	TypeMaritalStatus create(TypeMaritalStatus typeMaritalStatus);


	/**
	 * Finds TypeMaritalStatus by id.
	 *
	 * @param typeMaritalStatusId The id of the wanted TypeMaritalStatus.
	 * @return The found TypeMaritalStatus. If no TypeMaritalStatus is found, this method returns null.
	 */
	TypeMaritalStatus getById(Integer typeMaritalStatusId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeMaritalStatus.
	 *
	 * @param typeMaritalStatus The information of the updated TypeMaritalStatus.
	 * @return The updated TypeMaritalStatus.
     *
	 * @throws EntityNotFoundException if no TypeMaritalStatus is found with given id.
	 */
	TypeMaritalStatus update(TypeMaritalStatus typeMaritalStatus) throws EntityNotFoundException;

    /**
	 * Deletes a TypeMaritalStatus.
	 *
	 * @param typeMaritalStatusId The id of the deleted TypeMaritalStatus.
	 * @return The deleted TypeMaritalStatus.
     *
	 * @throws EntityNotFoundException if no TypeMaritalStatus is found with the given id.
	 */
	TypeMaritalStatus delete(Integer typeMaritalStatusId) throws EntityNotFoundException;

	/**
	 * Finds all TypeMaritalStatuses.
	 *
	 * @return A list of TypeMaritalStatuses.
	 */
    @Deprecated
	Page<TypeMaritalStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeMaritalStatuses.
	 * @return A list of TypeMaritalStatuses.
	 */
    Page<TypeMaritalStatus> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeMaritalStatuses in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeMaritalStatus.
	 */
	long count(String query);

    Page<TypeMaritalStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

