/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.MobileNumber;

/**
 * Service object for domain model class MobileNumber.
 *
 * @see {@link MobileNumber}
 */
public interface MobileNumberService {

    /**
     * Creates a new MobileNumber.
     *
     * @param mobileNumber The information of the created CompositeTable.
     * @return The created MobileNumber.
     */
	MobileNumber create(MobileNumber mobileNumber);


	/**
	 * Finds MobileNumber by id.
	 *
	 * @param mobileNumberId The id of the wanted MobileNumber.
	 * @return The found MobileNumber. If no MobileNumber is found, this method returns null.
	 */
	MobileNumber getById(Integer mobileNumberId) throws EntityNotFoundException;

	/**
	 * Updates the information of a MobileNumber.
	 *
	 * @param mobileNumber The information of the updated MobileNumber.
	 * @return The updated MobileNumber.
     *
	 * @throws EntityNotFoundException if no MobileNumber is found with given id.
	 */
	MobileNumber update(MobileNumber mobileNumber) throws EntityNotFoundException;

    /**
	 * Deletes a MobileNumber.
	 *
	 * @param mobileNumberId The id of the deleted MobileNumber.
	 * @return The deleted MobileNumber.
     *
	 * @throws EntityNotFoundException if no MobileNumber is found with the given id.
	 */
	MobileNumber delete(Integer mobileNumberId) throws EntityNotFoundException;

	/**
	 * Finds all MobileNumbers.
	 *
	 * @return A list of MobileNumbers.
	 */
    @Deprecated
	Page<MobileNumber> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all MobileNumbers.
	 * @return A list of MobileNumbers.
	 */
    Page<MobileNumber> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the MobileNumbers in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the MobileNumber.
	 */
	long count(String query);

    Page<MobileNumber> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

