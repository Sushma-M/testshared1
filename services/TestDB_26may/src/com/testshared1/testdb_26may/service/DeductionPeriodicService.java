/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.DeductionPeriodic;

/**
 * Service object for domain model class DeductionPeriodic.
 *
 * @see {@link DeductionPeriodic}
 */
public interface DeductionPeriodicService {

    /**
     * Creates a new DeductionPeriodic.
     *
     * @param deductionPeriodic The information of the created CompositeTable.
     * @return The created DeductionPeriodic.
     */
	DeductionPeriodic create(DeductionPeriodic deductionPeriodic);


	/**
	 * Finds DeductionPeriodic by id.
	 *
	 * @param deductionPeriodicId The id of the wanted DeductionPeriodic.
	 * @return The found DeductionPeriodic. If no DeductionPeriodic is found, this method returns null.
	 */
	DeductionPeriodic getById(Integer deductionPeriodicId) throws EntityNotFoundException;

	/**
	 * Updates the information of a DeductionPeriodic.
	 *
	 * @param deductionPeriodic The information of the updated DeductionPeriodic.
	 * @return The updated DeductionPeriodic.
     *
	 * @throws EntityNotFoundException if no DeductionPeriodic is found with given id.
	 */
	DeductionPeriodic update(DeductionPeriodic deductionPeriodic) throws EntityNotFoundException;

    /**
	 * Deletes a DeductionPeriodic.
	 *
	 * @param deductionPeriodicId The id of the deleted DeductionPeriodic.
	 * @return The deleted DeductionPeriodic.
     *
	 * @throws EntityNotFoundException if no DeductionPeriodic is found with the given id.
	 */
	DeductionPeriodic delete(Integer deductionPeriodicId) throws EntityNotFoundException;

	/**
	 * Finds all DeductionPeriodics.
	 *
	 * @return A list of DeductionPeriodics.
	 */
    @Deprecated
	Page<DeductionPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all DeductionPeriodics.
	 * @return A list of DeductionPeriodics.
	 */
    Page<DeductionPeriodic> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DeductionPeriodics in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the DeductionPeriodic.
	 */
	long count(String query);

    Page<DeductionPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

