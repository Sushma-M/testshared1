/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Commission;

/**
 * Service object for domain model class Commission.
 *
 * @see {@link Commission}
 */
public interface CommissionService {

    /**
     * Creates a new Commission.
     *
     * @param commission The information of the created CompositeTable.
     * @return The created Commission.
     */
	Commission create(Commission commission);


	/**
	 * Finds Commission by id.
	 *
	 * @param commissionId The id of the wanted Commission.
	 * @return The found Commission. If no Commission is found, this method returns null.
	 */
	Commission getById(Integer commissionId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Commission.
	 *
	 * @param commission The information of the updated Commission.
	 * @return The updated Commission.
     *
	 * @throws EntityNotFoundException if no Commission is found with given id.
	 */
	Commission update(Commission commission) throws EntityNotFoundException;

    /**
	 * Deletes a Commission.
	 *
	 * @param commissionId The id of the deleted Commission.
	 * @return The deleted Commission.
     *
	 * @throws EntityNotFoundException if no Commission is found with the given id.
	 */
	Commission delete(Integer commissionId) throws EntityNotFoundException;

	/**
	 * Finds all Commissions.
	 *
	 * @return A list of Commissions.
	 */
    @Deprecated
	Page<Commission> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Commissions.
	 * @return A list of Commissions.
	 */
    Page<Commission> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Commissions in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Commission.
	 */
	long count(String query);

    Page<Commission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

