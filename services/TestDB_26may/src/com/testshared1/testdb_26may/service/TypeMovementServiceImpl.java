/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeMovement;

/**
 * ServiceImpl object for domain model class TypeMovement.
 *
 * @see TypeMovement
 */
@Service("TestDB_26may.TypeMovementService")
public class TypeMovementServiceImpl implements TypeMovementService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeMovementServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeMovementDao")
    private WMGenericDao<TypeMovement, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeMovement, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeMovement create(TypeMovement typemovement) {
        LOGGER.debug("Creating a new TypeMovement with information: {}", typemovement);
        return this.wmGenericDao.create(typemovement);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeMovement getById(Integer typemovementId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeMovement by id: {}", typemovementId);
        TypeMovement typemovement = this.wmGenericDao.findById(typemovementId);
        if (typemovement == null){
            LOGGER.debug("No TypeMovement found with id: {}", typemovementId);
            throw new EntityNotFoundException(String.valueOf(typemovementId));
        }
        return typemovement;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeMovement update(TypeMovement typemovement) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeMovement with information: {}", typemovement);
        this.wmGenericDao.update(typemovement);

        Integer typemovementId = typemovement.getIdTypeMovement();

        return this.wmGenericDao.findById(typemovementId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeMovement delete(Integer typemovementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeMovement with id: {}", typemovementId);
        TypeMovement deleted = this.wmGenericDao.findById(typemovementId);
        if (deleted == null) {
            LOGGER.debug("No TypeMovement found with id: {}", typemovementId);
            throw new EntityNotFoundException(String.valueOf(typemovementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeMovement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeMovements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeMovement> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeMovements");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeMovement to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeMovement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

