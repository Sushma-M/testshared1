/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeAlert;

/**
 * ServiceImpl object for domain model class TypeAlert.
 *
 * @see TypeAlert
 */
@Service("TestDB_26may.TypeAlertService")
public class TypeAlertServiceImpl implements TypeAlertService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAlertServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeAlertDao")
    private WMGenericDao<TypeAlert, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeAlert, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeAlert create(TypeAlert typealert) {
        LOGGER.debug("Creating a new TypeAlert with information: {}", typealert);
        return this.wmGenericDao.create(typealert);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeAlert getById(Integer typealertId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeAlert by id: {}", typealertId);
        TypeAlert typealert = this.wmGenericDao.findById(typealertId);
        if (typealert == null){
            LOGGER.debug("No TypeAlert found with id: {}", typealertId);
            throw new EntityNotFoundException(String.valueOf(typealertId));
        }
        return typealert;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeAlert update(TypeAlert typealert) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeAlert with information: {}", typealert);
        this.wmGenericDao.update(typealert);

        Integer typealertId = typealert.getIdTypeAlert();

        return this.wmGenericDao.findById(typealertId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeAlert delete(Integer typealertId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeAlert with id: {}", typealertId);
        TypeAlert deleted = this.wmGenericDao.findById(typealertId);
        if (deleted == null) {
            LOGGER.debug("No TypeAlert found with id: {}", typealertId);
            throw new EntityNotFoundException(String.valueOf(typealertId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeAlert> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeAlerts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeAlert> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeAlerts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeAlert to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeAlert> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

