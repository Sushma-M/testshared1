/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeLaborHistory;

/**
 * ServiceImpl object for domain model class EmployeeLaborHistory.
 *
 * @see EmployeeLaborHistory
 */
@Service("TestDB_26may.EmployeeLaborHistoryService")
public class EmployeeLaborHistoryServiceImpl implements EmployeeLaborHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeLaborHistoryServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeLaborHistoryDao")
    private WMGenericDao<EmployeeLaborHistory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeLaborHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeLaborHistory create(EmployeeLaborHistory employeelaborhistory) {
        LOGGER.debug("Creating a new EmployeeLaborHistory with information: {}", employeelaborhistory);
        return this.wmGenericDao.create(employeelaborhistory);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeLaborHistory getById(Integer employeelaborhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeLaborHistory by id: {}", employeelaborhistoryId);
        EmployeeLaborHistory employeelaborhistory = this.wmGenericDao.findById(employeelaborhistoryId);
        if (employeelaborhistory == null){
            LOGGER.debug("No EmployeeLaborHistory found with id: {}", employeelaborhistoryId);
            throw new EntityNotFoundException(String.valueOf(employeelaborhistoryId));
        }
        return employeelaborhistory;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeLaborHistory update(EmployeeLaborHistory employeelaborhistory) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeLaborHistory with information: {}", employeelaborhistory);
        this.wmGenericDao.update(employeelaborhistory);

        Integer employeelaborhistoryId = employeelaborhistory.getIdEmployeeLaborHistory();

        return this.wmGenericDao.findById(employeelaborhistoryId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeLaborHistory delete(Integer employeelaborhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeLaborHistory with id: {}", employeelaborhistoryId);
        EmployeeLaborHistory deleted = this.wmGenericDao.findById(employeelaborhistoryId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeLaborHistory found with id: {}", employeelaborhistoryId);
            throw new EntityNotFoundException(String.valueOf(employeelaborhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeLaborHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeLaborHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeLaborHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeLaborHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeLaborHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeLaborHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

