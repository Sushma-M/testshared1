/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.BonusEventual;

/**
 * ServiceImpl object for domain model class BonusEventual.
 *
 * @see BonusEventual
 */
@Service("TestDB_26may.BonusEventualService")
public class BonusEventualServiceImpl implements BonusEventualService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BonusEventualServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.BonusEventualDao")
    private WMGenericDao<BonusEventual, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BonusEventual, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public BonusEventual create(BonusEventual bonuseventual) {
        LOGGER.debug("Creating a new BonusEventual with information: {}", bonuseventual);
        return this.wmGenericDao.create(bonuseventual);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public BonusEventual getById(Integer bonuseventualId) throws EntityNotFoundException {
        LOGGER.debug("Finding BonusEventual by id: {}", bonuseventualId);
        BonusEventual bonuseventual = this.wmGenericDao.findById(bonuseventualId);
        if (bonuseventual == null){
            LOGGER.debug("No BonusEventual found with id: {}", bonuseventualId);
            throw new EntityNotFoundException(String.valueOf(bonuseventualId));
        }
        return bonuseventual;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public BonusEventual update(BonusEventual bonuseventual) throws EntityNotFoundException {
        LOGGER.debug("Updating BonusEventual with information: {}", bonuseventual);
        this.wmGenericDao.update(bonuseventual);

        Integer bonuseventualId = bonuseventual.getIdBonusEventual();

        return this.wmGenericDao.findById(bonuseventualId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public BonusEventual delete(Integer bonuseventualId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BonusEventual with id: {}", bonuseventualId);
        BonusEventual deleted = this.wmGenericDao.findById(bonuseventualId);
        if (deleted == null) {
            LOGGER.debug("No BonusEventual found with id: {}", bonuseventualId);
            throw new EntityNotFoundException(String.valueOf(bonuseventualId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<BonusEventual> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BonusEventuals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<BonusEventual> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BonusEventuals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table BonusEventual to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<BonusEventual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

