/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.BadgeTemplate;

/**
 * ServiceImpl object for domain model class BadgeTemplate.
 *
 * @see BadgeTemplate
 */
@Service("TestDB_26may.BadgeTemplateService")
public class BadgeTemplateServiceImpl implements BadgeTemplateService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BadgeTemplateServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.BadgeTemplateDao")
    private WMGenericDao<BadgeTemplate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BadgeTemplate, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public BadgeTemplate create(BadgeTemplate badgetemplate) {
        LOGGER.debug("Creating a new BadgeTemplate with information: {}", badgetemplate);
        return this.wmGenericDao.create(badgetemplate);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public BadgeTemplate getById(Integer badgetemplateId) throws EntityNotFoundException {
        LOGGER.debug("Finding BadgeTemplate by id: {}", badgetemplateId);
        BadgeTemplate badgetemplate = this.wmGenericDao.findById(badgetemplateId);
        if (badgetemplate == null){
            LOGGER.debug("No BadgeTemplate found with id: {}", badgetemplateId);
            throw new EntityNotFoundException(String.valueOf(badgetemplateId));
        }
        return badgetemplate;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public BadgeTemplate update(BadgeTemplate badgetemplate) throws EntityNotFoundException {
        LOGGER.debug("Updating BadgeTemplate with information: {}", badgetemplate);
        this.wmGenericDao.update(badgetemplate);

        Integer badgetemplateId = badgetemplate.getIdBadgeTemplate();

        return this.wmGenericDao.findById(badgetemplateId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public BadgeTemplate delete(Integer badgetemplateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BadgeTemplate with id: {}", badgetemplateId);
        BadgeTemplate deleted = this.wmGenericDao.findById(badgetemplateId);
        if (deleted == null) {
            LOGGER.debug("No BadgeTemplate found with id: {}", badgetemplateId);
            throw new EntityNotFoundException(String.valueOf(badgetemplateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<BadgeTemplate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BadgeTemplates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<BadgeTemplate> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BadgeTemplates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table BadgeTemplate to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<BadgeTemplate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

