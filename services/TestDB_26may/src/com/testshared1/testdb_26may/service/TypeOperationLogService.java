/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeOperationLog;

/**
 * Service object for domain model class TypeOperationLog.
 *
 * @see {@link TypeOperationLog}
 */
public interface TypeOperationLogService {

    /**
     * Creates a new TypeOperationLog.
     *
     * @param typeOperationLog The information of the created CompositeTable.
     * @return The created TypeOperationLog.
     */
	TypeOperationLog create(TypeOperationLog typeOperationLog);


	/**
	 * Finds TypeOperationLog by id.
	 *
	 * @param typeOperationLogId The id of the wanted TypeOperationLog.
	 * @return The found TypeOperationLog. If no TypeOperationLog is found, this method returns null.
	 */
	TypeOperationLog getById(Integer typeOperationLogId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeOperationLog.
	 *
	 * @param typeOperationLog The information of the updated TypeOperationLog.
	 * @return The updated TypeOperationLog.
     *
	 * @throws EntityNotFoundException if no TypeOperationLog is found with given id.
	 */
	TypeOperationLog update(TypeOperationLog typeOperationLog) throws EntityNotFoundException;

    /**
	 * Deletes a TypeOperationLog.
	 *
	 * @param typeOperationLogId The id of the deleted TypeOperationLog.
	 * @return The deleted TypeOperationLog.
     *
	 * @throws EntityNotFoundException if no TypeOperationLog is found with the given id.
	 */
	TypeOperationLog delete(Integer typeOperationLogId) throws EntityNotFoundException;

	/**
	 * Finds all TypeOperationLogs.
	 *
	 * @return A list of TypeOperationLogs.
	 */
    @Deprecated
	Page<TypeOperationLog> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeOperationLogs.
	 * @return A list of TypeOperationLogs.
	 */
    Page<TypeOperationLog> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeOperationLogs in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeOperationLog.
	 */
	long count(String query);

    Page<TypeOperationLog> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

