/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.WorkPositionPerformanceIndicator;

/**
 * ServiceImpl object for domain model class WorkPositionPerformanceIndicator.
 *
 * @see WorkPositionPerformanceIndicator
 */
@Service("TestDB_26may.WorkPositionPerformanceIndicatorService")
public class WorkPositionPerformanceIndicatorServiceImpl implements WorkPositionPerformanceIndicatorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionPerformanceIndicatorServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionPerformanceIndicatorDao")
    private WMGenericDao<WorkPositionPerformanceIndicator, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPositionPerformanceIndicator, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public WorkPositionPerformanceIndicator create(WorkPositionPerformanceIndicator workpositionperformanceindicator) {
        LOGGER.debug("Creating a new WorkPositionPerformanceIndicator with information: {}", workpositionperformanceindicator);
        return this.wmGenericDao.create(workpositionperformanceindicator);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionPerformanceIndicator getById(Integer workpositionperformanceindicatorId) throws EntityNotFoundException {
        LOGGER.debug("Finding WorkPositionPerformanceIndicator by id: {}", workpositionperformanceindicatorId);
        WorkPositionPerformanceIndicator workpositionperformanceindicator = this.wmGenericDao.findById(workpositionperformanceindicatorId);
        if (workpositionperformanceindicator == null){
            LOGGER.debug("No WorkPositionPerformanceIndicator found with id: {}", workpositionperformanceindicatorId);
            throw new EntityNotFoundException(String.valueOf(workpositionperformanceindicatorId));
        }
        return workpositionperformanceindicator;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionPerformanceIndicator update(WorkPositionPerformanceIndicator workpositionperformanceindicator) throws EntityNotFoundException {
        LOGGER.debug("Updating WorkPositionPerformanceIndicator with information: {}", workpositionperformanceindicator);
        this.wmGenericDao.update(workpositionperformanceindicator);

        Integer workpositionperformanceindicatorId = workpositionperformanceindicator.getIdWorkPositionPerformanceIndicator();

        return this.wmGenericDao.findById(workpositionperformanceindicatorId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionPerformanceIndicator delete(Integer workpositionperformanceindicatorId) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPositionPerformanceIndicator with id: {}", workpositionperformanceindicatorId);
        WorkPositionPerformanceIndicator deleted = this.wmGenericDao.findById(workpositionperformanceindicatorId);
        if (deleted == null) {
            LOGGER.debug("No WorkPositionPerformanceIndicator found with id: {}", workpositionperformanceindicatorId);
            throw new EntityNotFoundException(String.valueOf(workpositionperformanceindicatorId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<WorkPositionPerformanceIndicator> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositionPerformanceIndicators");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<WorkPositionPerformanceIndicator> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositionPerformanceIndicators");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table WorkPositionPerformanceIndicator to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<WorkPositionPerformanceIndicator> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

