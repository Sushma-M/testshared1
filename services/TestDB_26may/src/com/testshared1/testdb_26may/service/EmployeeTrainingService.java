/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeTraining;

/**
 * Service object for domain model class EmployeeTraining.
 *
 * @see {@link EmployeeTraining}
 */
public interface EmployeeTrainingService {

    /**
     * Creates a new EmployeeTraining.
     *
     * @param employeeTraining The information of the created CompositeTable.
     * @return The created EmployeeTraining.
     */
	EmployeeTraining create(EmployeeTraining employeeTraining);


	/**
	 * Finds EmployeeTraining by id.
	 *
	 * @param employeeTrainingId The id of the wanted EmployeeTraining.
	 * @return The found EmployeeTraining. If no EmployeeTraining is found, this method returns null.
	 */
	EmployeeTraining getById(Integer employeeTrainingId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeTraining.
	 *
	 * @param employeeTraining The information of the updated EmployeeTraining.
	 * @return The updated EmployeeTraining.
     *
	 * @throws EntityNotFoundException if no EmployeeTraining is found with given id.
	 */
	EmployeeTraining update(EmployeeTraining employeeTraining) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeTraining.
	 *
	 * @param employeeTrainingId The id of the deleted EmployeeTraining.
	 * @return The deleted EmployeeTraining.
     *
	 * @throws EntityNotFoundException if no EmployeeTraining is found with the given id.
	 */
	EmployeeTraining delete(Integer employeeTrainingId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeTrainings.
	 *
	 * @return A list of EmployeeTrainings.
	 */
    @Deprecated
	Page<EmployeeTraining> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeTrainings.
	 * @return A list of EmployeeTrainings.
	 */
    Page<EmployeeTraining> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeTrainings in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeTraining.
	 */
	long count(String query);

    Page<EmployeeTraining> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

