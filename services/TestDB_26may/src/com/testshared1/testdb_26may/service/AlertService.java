/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Alert;

/**
 * Service object for domain model class Alert.
 *
 * @see {@link Alert}
 */
public interface AlertService {

    /**
     * Creates a new Alert.
     *
     * @param alert The information of the created CompositeTable.
     * @return The created Alert.
     */
	Alert create(Alert alert);


	/**
	 * Finds Alert by id.
	 *
	 * @param alertId The id of the wanted Alert.
	 * @return The found Alert. If no Alert is found, this method returns null.
	 */
	Alert getById(Integer alertId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Alert.
	 *
	 * @param alert The information of the updated Alert.
	 * @return The updated Alert.
     *
	 * @throws EntityNotFoundException if no Alert is found with given id.
	 */
	Alert update(Alert alert) throws EntityNotFoundException;

    /**
	 * Deletes a Alert.
	 *
	 * @param alertId The id of the deleted Alert.
	 * @return The deleted Alert.
     *
	 * @throws EntityNotFoundException if no Alert is found with the given id.
	 */
	Alert delete(Integer alertId) throws EntityNotFoundException;

	/**
	 * Finds all Alerts.
	 *
	 * @return A list of Alerts.
	 */
    @Deprecated
	Page<Alert> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Alerts.
	 * @return A list of Alerts.
	 */
    Page<Alert> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Alerts in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Alert.
	 */
	long count(String query);

    Page<Alert> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

