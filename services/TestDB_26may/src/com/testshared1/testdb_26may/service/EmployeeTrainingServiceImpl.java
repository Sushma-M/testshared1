/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeTraining;

/**
 * ServiceImpl object for domain model class EmployeeTraining.
 *
 * @see EmployeeTraining
 */
@Service("TestDB_26may.EmployeeTrainingService")
public class EmployeeTrainingServiceImpl implements EmployeeTrainingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTrainingServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeTrainingDao")
    private WMGenericDao<EmployeeTraining, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeTraining, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeTraining create(EmployeeTraining employeetraining) {
        LOGGER.debug("Creating a new EmployeeTraining with information: {}", employeetraining);
        return this.wmGenericDao.create(employeetraining);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeTraining getById(Integer employeetrainingId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeTraining by id: {}", employeetrainingId);
        EmployeeTraining employeetraining = this.wmGenericDao.findById(employeetrainingId);
        if (employeetraining == null){
            LOGGER.debug("No EmployeeTraining found with id: {}", employeetrainingId);
            throw new EntityNotFoundException(String.valueOf(employeetrainingId));
        }
        return employeetraining;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeTraining update(EmployeeTraining employeetraining) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeTraining with information: {}", employeetraining);
        this.wmGenericDao.update(employeetraining);

        Integer employeetrainingId = employeetraining.getIdEmployeeTraining();

        return this.wmGenericDao.findById(employeetrainingId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeTraining delete(Integer employeetrainingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeTraining with id: {}", employeetrainingId);
        EmployeeTraining deleted = this.wmGenericDao.findById(employeetrainingId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeTraining found with id: {}", employeetrainingId);
            throw new EntityNotFoundException(String.valueOf(employeetrainingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeTraining> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeTrainings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeTraining> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeTrainings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeTraining to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeTraining> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

