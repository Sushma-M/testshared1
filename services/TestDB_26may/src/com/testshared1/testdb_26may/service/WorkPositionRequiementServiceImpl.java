/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.WorkPositionRequiement;

/**
 * ServiceImpl object for domain model class WorkPositionRequiement.
 *
 * @see WorkPositionRequiement
 */
@Service("TestDB_26may.WorkPositionRequiementService")
public class WorkPositionRequiementServiceImpl implements WorkPositionRequiementService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionRequiementServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionRequiementDao")
    private WMGenericDao<WorkPositionRequiement, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPositionRequiement, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public WorkPositionRequiement create(WorkPositionRequiement workpositionrequiement) {
        LOGGER.debug("Creating a new WorkPositionRequiement with information: {}", workpositionrequiement);
        return this.wmGenericDao.create(workpositionrequiement);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionRequiement getById(Integer workpositionrequiementId) throws EntityNotFoundException {
        LOGGER.debug("Finding WorkPositionRequiement by id: {}", workpositionrequiementId);
        WorkPositionRequiement workpositionrequiement = this.wmGenericDao.findById(workpositionrequiementId);
        if (workpositionrequiement == null){
            LOGGER.debug("No WorkPositionRequiement found with id: {}", workpositionrequiementId);
            throw new EntityNotFoundException(String.valueOf(workpositionrequiementId));
        }
        return workpositionrequiement;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionRequiement update(WorkPositionRequiement workpositionrequiement) throws EntityNotFoundException {
        LOGGER.debug("Updating WorkPositionRequiement with information: {}", workpositionrequiement);
        this.wmGenericDao.update(workpositionrequiement);

        Integer workpositionrequiementId = workpositionrequiement.getIdWorkPositionRequiement();

        return this.wmGenericDao.findById(workpositionrequiementId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPositionRequiement delete(Integer workpositionrequiementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPositionRequiement with id: {}", workpositionrequiementId);
        WorkPositionRequiement deleted = this.wmGenericDao.findById(workpositionrequiementId);
        if (deleted == null) {
            LOGGER.debug("No WorkPositionRequiement found with id: {}", workpositionrequiementId);
            throw new EntityNotFoundException(String.valueOf(workpositionrequiementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<WorkPositionRequiement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositionRequiements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<WorkPositionRequiement> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositionRequiements");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table WorkPositionRequiement to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<WorkPositionRequiement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

