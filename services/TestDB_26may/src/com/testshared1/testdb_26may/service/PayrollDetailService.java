/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.PayrollDetail;

/**
 * Service object for domain model class PayrollDetail.
 *
 * @see {@link PayrollDetail}
 */
public interface PayrollDetailService {

    /**
     * Creates a new PayrollDetail.
     *
     * @param payrollDetail The information of the created CompositeTable.
     * @return The created PayrollDetail.
     */
	PayrollDetail create(PayrollDetail payrollDetail);


	/**
	 * Finds PayrollDetail by id.
	 *
	 * @param payrollDetailId The id of the wanted PayrollDetail.
	 * @return The found PayrollDetail. If no PayrollDetail is found, this method returns null.
	 */
	PayrollDetail getById(Integer payrollDetailId) throws EntityNotFoundException;

	/**
	 * Updates the information of a PayrollDetail.
	 *
	 * @param payrollDetail The information of the updated PayrollDetail.
	 * @return The updated PayrollDetail.
     *
	 * @throws EntityNotFoundException if no PayrollDetail is found with given id.
	 */
	PayrollDetail update(PayrollDetail payrollDetail) throws EntityNotFoundException;

    /**
	 * Deletes a PayrollDetail.
	 *
	 * @param payrollDetailId The id of the deleted PayrollDetail.
	 * @return The deleted PayrollDetail.
     *
	 * @throws EntityNotFoundException if no PayrollDetail is found with the given id.
	 */
	PayrollDetail delete(Integer payrollDetailId) throws EntityNotFoundException;

	/**
	 * Finds all PayrollDetails.
	 *
	 * @return A list of PayrollDetails.
	 */
    @Deprecated
	Page<PayrollDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all PayrollDetails.
	 * @return A list of PayrollDetails.
	 */
    Page<PayrollDetail> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PayrollDetails in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the PayrollDetail.
	 */
	long count(String query);

    Page<PayrollDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

