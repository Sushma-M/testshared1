/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.WorkPosition;

/**
 * ServiceImpl object for domain model class WorkPosition.
 *
 * @see WorkPosition
 */
@Service("TestDB_26may.WorkPositionService")
public class WorkPositionServiceImpl implements WorkPositionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.WorkPositionDao")
    private WMGenericDao<WorkPosition, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPosition, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public WorkPosition create(WorkPosition workposition) {
        LOGGER.debug("Creating a new WorkPosition with information: {}", workposition);
        return this.wmGenericDao.create(workposition);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPosition getById(Integer workpositionId) throws EntityNotFoundException {
        LOGGER.debug("Finding WorkPosition by id: {}", workpositionId);
        WorkPosition workposition = this.wmGenericDao.findById(workpositionId);
        if (workposition == null){
            LOGGER.debug("No WorkPosition found with id: {}", workpositionId);
            throw new EntityNotFoundException(String.valueOf(workpositionId));
        }
        return workposition;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPosition update(WorkPosition workposition) throws EntityNotFoundException {
        LOGGER.debug("Updating WorkPosition with information: {}", workposition);
        this.wmGenericDao.update(workposition);

        Integer workpositionId = workposition.getIdWorkPosition();

        return this.wmGenericDao.findById(workpositionId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public WorkPosition delete(Integer workpositionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPosition with id: {}", workpositionId);
        WorkPosition deleted = this.wmGenericDao.findById(workpositionId);
        if (deleted == null) {
            LOGGER.debug("No WorkPosition found with id: {}", workpositionId);
            throw new EntityNotFoundException(String.valueOf(workpositionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<WorkPosition> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<WorkPosition> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all WorkPositions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table WorkPosition to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<WorkPosition> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

