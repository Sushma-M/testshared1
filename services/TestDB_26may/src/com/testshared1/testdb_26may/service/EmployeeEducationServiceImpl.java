/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeEducation;

/**
 * ServiceImpl object for domain model class EmployeeEducation.
 *
 * @see EmployeeEducation
 */
@Service("TestDB_26may.EmployeeEducationService")
public class EmployeeEducationServiceImpl implements EmployeeEducationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeEducationServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeEducationDao")
    private WMGenericDao<EmployeeEducation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeEducation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeEducation create(EmployeeEducation employeeeducation) {
        LOGGER.debug("Creating a new EmployeeEducation with information: {}", employeeeducation);
        return this.wmGenericDao.create(employeeeducation);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeEducation getById(Integer employeeeducationId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeEducation by id: {}", employeeeducationId);
        EmployeeEducation employeeeducation = this.wmGenericDao.findById(employeeeducationId);
        if (employeeeducation == null){
            LOGGER.debug("No EmployeeEducation found with id: {}", employeeeducationId);
            throw new EntityNotFoundException(String.valueOf(employeeeducationId));
        }
        return employeeeducation;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeEducation update(EmployeeEducation employeeeducation) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeEducation with information: {}", employeeeducation);
        this.wmGenericDao.update(employeeeducation);

        Integer employeeeducationId = employeeeducation.getIdEmployeeEducation();

        return this.wmGenericDao.findById(employeeeducationId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeEducation delete(Integer employeeeducationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeEducation with id: {}", employeeeducationId);
        EmployeeEducation deleted = this.wmGenericDao.findById(employeeeducationId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeEducation found with id: {}", employeeeducationId);
            throw new EntityNotFoundException(String.valueOf(employeeeducationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeEducation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeEducations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeEducation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeEducations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeEducation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeEducation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

