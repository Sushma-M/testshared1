/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeOperationLog;

/**
 * ServiceImpl object for domain model class TypeOperationLog.
 *
 * @see TypeOperationLog
 */
@Service("TestDB_26may.TypeOperationLogService")
public class TypeOperationLogServiceImpl implements TypeOperationLogService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationLogServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeOperationLogDao")
    private WMGenericDao<TypeOperationLog, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeOperationLog, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeOperationLog create(TypeOperationLog typeoperationlog) {
        LOGGER.debug("Creating a new TypeOperationLog with information: {}", typeoperationlog);
        return this.wmGenericDao.create(typeoperationlog);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeOperationLog getById(Integer typeoperationlogId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeOperationLog by id: {}", typeoperationlogId);
        TypeOperationLog typeoperationlog = this.wmGenericDao.findById(typeoperationlogId);
        if (typeoperationlog == null){
            LOGGER.debug("No TypeOperationLog found with id: {}", typeoperationlogId);
            throw new EntityNotFoundException(String.valueOf(typeoperationlogId));
        }
        return typeoperationlog;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeOperationLog update(TypeOperationLog typeoperationlog) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeOperationLog with information: {}", typeoperationlog);
        this.wmGenericDao.update(typeoperationlog);

        Integer typeoperationlogId = typeoperationlog.getIdTypeOperationLog();

        return this.wmGenericDao.findById(typeoperationlogId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeOperationLog delete(Integer typeoperationlogId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeOperationLog with id: {}", typeoperationlogId);
        TypeOperationLog deleted = this.wmGenericDao.findById(typeoperationlogId);
        if (deleted == null) {
            LOGGER.debug("No TypeOperationLog found with id: {}", typeoperationlogId);
            throw new EntityNotFoundException(String.valueOf(typeoperationlogId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeOperationLog> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeOperationLogs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeOperationLog> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeOperationLogs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeOperationLog to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeOperationLog> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

