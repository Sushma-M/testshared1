/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEmployeeTermination;

/**
 * ServiceImpl object for domain model class TypeEmployeeTermination.
 *
 * @see TypeEmployeeTermination
 */
@Service("TestDB_26may.TypeEmployeeTerminationService")
public class TypeEmployeeTerminationServiceImpl implements TypeEmployeeTerminationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeeTerminationServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEmployeeTerminationDao")
    private WMGenericDao<TypeEmployeeTermination, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEmployeeTermination, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeEmployeeTermination create(TypeEmployeeTermination typeemployeetermination) {
        LOGGER.debug("Creating a new TypeEmployeeTermination with information: {}", typeemployeetermination);
        return this.wmGenericDao.create(typeemployeetermination);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeeTermination getById(Integer typeemployeeterminationId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeEmployeeTermination by id: {}", typeemployeeterminationId);
        TypeEmployeeTermination typeemployeetermination = this.wmGenericDao.findById(typeemployeeterminationId);
        if (typeemployeetermination == null){
            LOGGER.debug("No TypeEmployeeTermination found with id: {}", typeemployeeterminationId);
            throw new EntityNotFoundException(String.valueOf(typeemployeeterminationId));
        }
        return typeemployeetermination;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeeTermination update(TypeEmployeeTermination typeemployeetermination) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeEmployeeTermination with information: {}", typeemployeetermination);
        this.wmGenericDao.update(typeemployeetermination);

        Integer typeemployeeterminationId = typeemployeetermination.getIdEmployeeTermination();

        return this.wmGenericDao.findById(typeemployeeterminationId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeeTermination delete(Integer typeemployeeterminationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeeTermination with id: {}", typeemployeeterminationId);
        TypeEmployeeTermination deleted = this.wmGenericDao.findById(typeemployeeterminationId);
        if (deleted == null) {
            LOGGER.debug("No TypeEmployeeTermination found with id: {}", typeemployeeterminationId);
            throw new EntityNotFoundException(String.valueOf(typeemployeeterminationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeEmployeeTermination> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeeTerminations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeEmployeeTermination> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeeTerminations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeEmployeeTermination to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeEmployeeTermination> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

