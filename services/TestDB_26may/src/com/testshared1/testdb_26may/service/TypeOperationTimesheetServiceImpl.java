/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeOperationTimesheet;

/**
 * ServiceImpl object for domain model class TypeOperationTimesheet.
 *
 * @see TypeOperationTimesheet
 */
@Service("TestDB_26may.TypeOperationTimesheetService")
public class TypeOperationTimesheetServiceImpl implements TypeOperationTimesheetService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationTimesheetServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeOperationTimesheetDao")
    private WMGenericDao<TypeOperationTimesheet, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeOperationTimesheet, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeOperationTimesheet create(TypeOperationTimesheet typeoperationtimesheet) {
        LOGGER.debug("Creating a new TypeOperationTimesheet with information: {}", typeoperationtimesheet);
        return this.wmGenericDao.create(typeoperationtimesheet);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeOperationTimesheet getById(Integer typeoperationtimesheetId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeOperationTimesheet by id: {}", typeoperationtimesheetId);
        TypeOperationTimesheet typeoperationtimesheet = this.wmGenericDao.findById(typeoperationtimesheetId);
        if (typeoperationtimesheet == null){
            LOGGER.debug("No TypeOperationTimesheet found with id: {}", typeoperationtimesheetId);
            throw new EntityNotFoundException(String.valueOf(typeoperationtimesheetId));
        }
        return typeoperationtimesheet;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeOperationTimesheet update(TypeOperationTimesheet typeoperationtimesheet) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeOperationTimesheet with information: {}", typeoperationtimesheet);
        this.wmGenericDao.update(typeoperationtimesheet);

        Integer typeoperationtimesheetId = typeoperationtimesheet.getIdTypeOperationTimesheet();

        return this.wmGenericDao.findById(typeoperationtimesheetId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeOperationTimesheet delete(Integer typeoperationtimesheetId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeOperationTimesheet with id: {}", typeoperationtimesheetId);
        TypeOperationTimesheet deleted = this.wmGenericDao.findById(typeoperationtimesheetId);
        if (deleted == null) {
            LOGGER.debug("No TypeOperationTimesheet found with id: {}", typeoperationtimesheetId);
            throw new EntityNotFoundException(String.valueOf(typeoperationtimesheetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeOperationTimesheet> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeOperationTimesheets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeOperationTimesheet> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeOperationTimesheets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeOperationTimesheet to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeOperationTimesheet> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

