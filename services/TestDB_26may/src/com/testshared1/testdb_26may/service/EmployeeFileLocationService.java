/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeFileLocation;

/**
 * Service object for domain model class EmployeeFileLocation.
 *
 * @see {@link EmployeeFileLocation}
 */
public interface EmployeeFileLocationService {

    /**
     * Creates a new EmployeeFileLocation.
     *
     * @param employeeFileLocation The information of the created CompositeTable.
     * @return The created EmployeeFileLocation.
     */
	EmployeeFileLocation create(EmployeeFileLocation employeeFileLocation);


	/**
	 * Finds EmployeeFileLocation by id.
	 *
	 * @param employeeFileLocationId The id of the wanted EmployeeFileLocation.
	 * @return The found EmployeeFileLocation. If no EmployeeFileLocation is found, this method returns null.
	 */
	EmployeeFileLocation getById(Integer employeeFileLocationId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeFileLocation.
	 *
	 * @param employeeFileLocation The information of the updated EmployeeFileLocation.
	 * @return The updated EmployeeFileLocation.
     *
	 * @throws EntityNotFoundException if no EmployeeFileLocation is found with given id.
	 */
	EmployeeFileLocation update(EmployeeFileLocation employeeFileLocation) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeFileLocation.
	 *
	 * @param employeeFileLocationId The id of the deleted EmployeeFileLocation.
	 * @return The deleted EmployeeFileLocation.
     *
	 * @throws EntityNotFoundException if no EmployeeFileLocation is found with the given id.
	 */
	EmployeeFileLocation delete(Integer employeeFileLocationId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeFileLocations.
	 *
	 * @return A list of EmployeeFileLocations.
	 */
    @Deprecated
	Page<EmployeeFileLocation> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeFileLocations.
	 * @return A list of EmployeeFileLocations.
	 */
    Page<EmployeeFileLocation> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeFileLocations in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeFileLocation.
	 */
	long count(String query);

    Page<EmployeeFileLocation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

