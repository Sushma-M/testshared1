/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Alert;

/**
 * ServiceImpl object for domain model class Alert.
 *
 * @see Alert
 */
@Service("TestDB_26may.AlertService")
public class AlertServiceImpl implements AlertService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlertServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AlertDao")
    private WMGenericDao<Alert, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Alert, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public Alert create(Alert alert) {
        LOGGER.debug("Creating a new Alert with information: {}", alert);
        return this.wmGenericDao.create(alert);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Alert getById(Integer alertId) throws EntityNotFoundException {
        LOGGER.debug("Finding Alert by id: {}", alertId);
        Alert alert = this.wmGenericDao.findById(alertId);
        if (alert == null){
            LOGGER.debug("No Alert found with id: {}", alertId);
            throw new EntityNotFoundException(String.valueOf(alertId));
        }
        return alert;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public Alert update(Alert alert) throws EntityNotFoundException {
        LOGGER.debug("Updating Alert with information: {}", alert);
        this.wmGenericDao.update(alert);

        Integer alertId = alert.getIdAlert();

        return this.wmGenericDao.findById(alertId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public Alert delete(Integer alertId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Alert with id: {}", alertId);
        Alert deleted = this.wmGenericDao.findById(alertId);
        if (deleted == null) {
            LOGGER.debug("No Alert found with id: {}", alertId);
            throw new EntityNotFoundException(String.valueOf(alertId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<Alert> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Alerts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<Alert> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Alerts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table Alert to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Alert> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

