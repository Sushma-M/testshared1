/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeContract;

/**
 * ServiceImpl object for domain model class EmployeeContract.
 *
 * @see EmployeeContract
 */
@Service("TestDB_26may.EmployeeContractService")
public class EmployeeContractServiceImpl implements EmployeeContractService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeContractServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeContractDao")
    private WMGenericDao<EmployeeContract, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeContract, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeContract create(EmployeeContract employeecontract) {
        LOGGER.debug("Creating a new EmployeeContract with information: {}", employeecontract);
        return this.wmGenericDao.create(employeecontract);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeContract getById(Integer employeecontractId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeContract by id: {}", employeecontractId);
        EmployeeContract employeecontract = this.wmGenericDao.findById(employeecontractId);
        if (employeecontract == null){
            LOGGER.debug("No EmployeeContract found with id: {}", employeecontractId);
            throw new EntityNotFoundException(String.valueOf(employeecontractId));
        }
        return employeecontract;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeContract update(EmployeeContract employeecontract) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeContract with information: {}", employeecontract);
        this.wmGenericDao.update(employeecontract);

        Integer employeecontractId = employeecontract.getIdEmployeeContract();

        return this.wmGenericDao.findById(employeecontractId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeContract delete(Integer employeecontractId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeContract with id: {}", employeecontractId);
        EmployeeContract deleted = this.wmGenericDao.findById(employeecontractId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeContract found with id: {}", employeecontractId);
            throw new EntityNotFoundException(String.valueOf(employeecontractId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeContract> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeContracts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeContract> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeContracts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeContract to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeContract> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

