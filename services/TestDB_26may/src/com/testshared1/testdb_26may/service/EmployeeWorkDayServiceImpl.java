/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeWorkDay;

/**
 * ServiceImpl object for domain model class EmployeeWorkDay.
 *
 * @see EmployeeWorkDay
 */
@Service("TestDB_26may.EmployeeWorkDayService")
public class EmployeeWorkDayServiceImpl implements EmployeeWorkDayService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeWorkDayServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeWorkDayDao")
    private WMGenericDao<EmployeeWorkDay, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeWorkDay, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeWorkDay create(EmployeeWorkDay employeeworkday) {
        LOGGER.debug("Creating a new EmployeeWorkDay with information: {}", employeeworkday);
        return this.wmGenericDao.create(employeeworkday);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeWorkDay getById(Integer employeeworkdayId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeWorkDay by id: {}", employeeworkdayId);
        EmployeeWorkDay employeeworkday = this.wmGenericDao.findById(employeeworkdayId);
        if (employeeworkday == null){
            LOGGER.debug("No EmployeeWorkDay found with id: {}", employeeworkdayId);
            throw new EntityNotFoundException(String.valueOf(employeeworkdayId));
        }
        return employeeworkday;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeWorkDay update(EmployeeWorkDay employeeworkday) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeWorkDay with information: {}", employeeworkday);
        this.wmGenericDao.update(employeeworkday);

        Integer employeeworkdayId = employeeworkday.getIdEmployeeWorkDay();

        return this.wmGenericDao.findById(employeeworkdayId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeWorkDay delete(Integer employeeworkdayId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeWorkDay with id: {}", employeeworkdayId);
        EmployeeWorkDay deleted = this.wmGenericDao.findById(employeeworkdayId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeWorkDay found with id: {}", employeeworkdayId);
            throw new EntityNotFoundException(String.valueOf(employeeworkdayId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeWorkDay> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeWorkDays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeWorkDay> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeWorkDays");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeWorkDay to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeWorkDay> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

