/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.CompanyInfo;

/**
 * ServiceImpl object for domain model class CompanyInfo.
 *
 * @see CompanyInfo
 */
@Service("TestDB_26may.CompanyInfoService")
public class CompanyInfoServiceImpl implements CompanyInfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyInfoServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.CompanyInfoDao")
    private WMGenericDao<CompanyInfo, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompanyInfo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public CompanyInfo create(CompanyInfo companyinfo) {
        LOGGER.debug("Creating a new CompanyInfo with information: {}", companyinfo);
        return this.wmGenericDao.create(companyinfo);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public CompanyInfo getById(Integer companyinfoId) throws EntityNotFoundException {
        LOGGER.debug("Finding CompanyInfo by id: {}", companyinfoId);
        CompanyInfo companyinfo = this.wmGenericDao.findById(companyinfoId);
        if (companyinfo == null){
            LOGGER.debug("No CompanyInfo found with id: {}", companyinfoId);
            throw new EntityNotFoundException(String.valueOf(companyinfoId));
        }
        return companyinfo;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public CompanyInfo update(CompanyInfo companyinfo) throws EntityNotFoundException {
        LOGGER.debug("Updating CompanyInfo with information: {}", companyinfo);
        this.wmGenericDao.update(companyinfo);

        Integer companyinfoId = companyinfo.getIdCompanyInfo();

        return this.wmGenericDao.findById(companyinfoId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public CompanyInfo delete(Integer companyinfoId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompanyInfo with id: {}", companyinfoId);
        CompanyInfo deleted = this.wmGenericDao.findById(companyinfoId);
        if (deleted == null) {
            LOGGER.debug("No CompanyInfo found with id: {}", companyinfoId);
            throw new EntityNotFoundException(String.valueOf(companyinfoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<CompanyInfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompanyInfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<CompanyInfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompanyInfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table CompanyInfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<CompanyInfo> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

