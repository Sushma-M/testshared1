/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ApplicantNote;

/**
 * Service object for domain model class ApplicantNote.
 *
 * @see {@link ApplicantNote}
 */
public interface ApplicantNoteService {

    /**
     * Creates a new ApplicantNote.
     *
     * @param applicantNote The information of the created CompositeTable.
     * @return The created ApplicantNote.
     */
	ApplicantNote create(ApplicantNote applicantNote);


	/**
	 * Finds ApplicantNote by id.
	 *
	 * @param applicantNoteId The id of the wanted ApplicantNote.
	 * @return The found ApplicantNote. If no ApplicantNote is found, this method returns null.
	 */
	ApplicantNote getById(Integer applicantNoteId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ApplicantNote.
	 *
	 * @param applicantNote The information of the updated ApplicantNote.
	 * @return The updated ApplicantNote.
     *
	 * @throws EntityNotFoundException if no ApplicantNote is found with given id.
	 */
	ApplicantNote update(ApplicantNote applicantNote) throws EntityNotFoundException;

    /**
	 * Deletes a ApplicantNote.
	 *
	 * @param applicantNoteId The id of the deleted ApplicantNote.
	 * @return The deleted ApplicantNote.
     *
	 * @throws EntityNotFoundException if no ApplicantNote is found with the given id.
	 */
	ApplicantNote delete(Integer applicantNoteId) throws EntityNotFoundException;

	/**
	 * Finds all ApplicantNotes.
	 *
	 * @return A list of ApplicantNotes.
	 */
    @Deprecated
	Page<ApplicantNote> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ApplicantNotes.
	 * @return A list of ApplicantNotes.
	 */
    Page<ApplicantNote> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ApplicantNotes in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ApplicantNote.
	 */
	long count(String query);

    Page<ApplicantNote> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

