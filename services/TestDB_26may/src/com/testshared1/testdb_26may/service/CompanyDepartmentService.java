/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.CompanyDepartment;

/**
 * Service object for domain model class CompanyDepartment.
 *
 * @see {@link CompanyDepartment}
 */
public interface CompanyDepartmentService {

    /**
     * Creates a new CompanyDepartment.
     *
     * @param companyDepartment The information of the created CompositeTable.
     * @return The created CompanyDepartment.
     */
	CompanyDepartment create(CompanyDepartment companyDepartment);


	/**
	 * Finds CompanyDepartment by id.
	 *
	 * @param companyDepartmentId The id of the wanted CompanyDepartment.
	 * @return The found CompanyDepartment. If no CompanyDepartment is found, this method returns null.
	 */
	CompanyDepartment getById(Integer companyDepartmentId) throws EntityNotFoundException;

	/**
	 * Updates the information of a CompanyDepartment.
	 *
	 * @param companyDepartment The information of the updated CompanyDepartment.
	 * @return The updated CompanyDepartment.
     *
	 * @throws EntityNotFoundException if no CompanyDepartment is found with given id.
	 */
	CompanyDepartment update(CompanyDepartment companyDepartment) throws EntityNotFoundException;

    /**
	 * Deletes a CompanyDepartment.
	 *
	 * @param companyDepartmentId The id of the deleted CompanyDepartment.
	 * @return The deleted CompanyDepartment.
     *
	 * @throws EntityNotFoundException if no CompanyDepartment is found with the given id.
	 */
	CompanyDepartment delete(Integer companyDepartmentId) throws EntityNotFoundException;

	/**
	 * Finds all CompanyDepartments.
	 *
	 * @return A list of CompanyDepartments.
	 */
    @Deprecated
	Page<CompanyDepartment> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all CompanyDepartments.
	 * @return A list of CompanyDepartments.
	 */
    Page<CompanyDepartment> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the CompanyDepartments in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the CompanyDepartment.
	 */
	long count(String query);

    Page<CompanyDepartment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

