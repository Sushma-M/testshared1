/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeMessage;

/**
 * Service object for domain model class EmployeeMessage.
 *
 * @see {@link EmployeeMessage}
 */
public interface EmployeeMessageService {

    /**
     * Creates a new EmployeeMessage.
     *
     * @param employeeMessage The information of the created CompositeTable.
     * @return The created EmployeeMessage.
     */
	EmployeeMessage create(EmployeeMessage employeeMessage);


	/**
	 * Finds EmployeeMessage by id.
	 *
	 * @param employeeMessageId The id of the wanted EmployeeMessage.
	 * @return The found EmployeeMessage. If no EmployeeMessage is found, this method returns null.
	 */
	EmployeeMessage getById(Integer employeeMessageId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeMessage.
	 *
	 * @param employeeMessage The information of the updated EmployeeMessage.
	 * @return The updated EmployeeMessage.
     *
	 * @throws EntityNotFoundException if no EmployeeMessage is found with given id.
	 */
	EmployeeMessage update(EmployeeMessage employeeMessage) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeMessage.
	 *
	 * @param employeeMessageId The id of the deleted EmployeeMessage.
	 * @return The deleted EmployeeMessage.
     *
	 * @throws EntityNotFoundException if no EmployeeMessage is found with the given id.
	 */
	EmployeeMessage delete(Integer employeeMessageId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeMessages.
	 *
	 * @return A list of EmployeeMessages.
	 */
    @Deprecated
	Page<EmployeeMessage> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeMessages.
	 * @return A list of EmployeeMessages.
	 */
    Page<EmployeeMessage> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeMessages in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeMessage.
	 */
	long count(String query);

    Page<EmployeeMessage> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

