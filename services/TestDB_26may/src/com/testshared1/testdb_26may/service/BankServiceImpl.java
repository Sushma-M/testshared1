/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Bank;

/**
 * ServiceImpl object for domain model class Bank.
 *
 * @see Bank
 */
@Service("TestDB_26may.BankService")
public class BankServiceImpl implements BankService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BankServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.BankDao")
    private WMGenericDao<Bank, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Bank, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public Bank create(Bank bank) {
        LOGGER.debug("Creating a new Bank with information: {}", bank);
        return this.wmGenericDao.create(bank);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Bank getById(Integer bankId) throws EntityNotFoundException {
        LOGGER.debug("Finding Bank by id: {}", bankId);
        Bank bank = this.wmGenericDao.findById(bankId);
        if (bank == null){
            LOGGER.debug("No Bank found with id: {}", bankId);
            throw new EntityNotFoundException(String.valueOf(bankId));
        }
        return bank;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public Bank update(Bank bank) throws EntityNotFoundException {
        LOGGER.debug("Updating Bank with information: {}", bank);
        this.wmGenericDao.update(bank);

        Integer bankId = bank.getIdBank();

        return this.wmGenericDao.findById(bankId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public Bank delete(Integer bankId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bank with id: {}", bankId);
        Bank deleted = this.wmGenericDao.findById(bankId);
        if (deleted == null) {
            LOGGER.debug("No Bank found with id: {}", bankId);
            throw new EntityNotFoundException(String.valueOf(bankId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<Bank> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Banks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<Bank> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Banks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table Bank to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Bank> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

