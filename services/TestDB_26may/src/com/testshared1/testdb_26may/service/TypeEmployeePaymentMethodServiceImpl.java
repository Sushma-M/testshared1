/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEmployeePaymentMethod;

/**
 * ServiceImpl object for domain model class TypeEmployeePaymentMethod.
 *
 * @see TypeEmployeePaymentMethod
 */
@Service("TestDB_26may.TypeEmployeePaymentMethodService")
public class TypeEmployeePaymentMethodServiceImpl implements TypeEmployeePaymentMethodService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentMethodServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEmployeePaymentMethodDao")
    private WMGenericDao<TypeEmployeePaymentMethod, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEmployeePaymentMethod, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeEmployeePaymentMethod create(TypeEmployeePaymentMethod typeemployeepaymentmethod) {
        LOGGER.debug("Creating a new TypeEmployeePaymentMethod with information: {}", typeemployeepaymentmethod);
        return this.wmGenericDao.create(typeemployeepaymentmethod);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeePaymentMethod getById(Integer typeemployeepaymentmethodId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeEmployeePaymentMethod by id: {}", typeemployeepaymentmethodId);
        TypeEmployeePaymentMethod typeemployeepaymentmethod = this.wmGenericDao.findById(typeemployeepaymentmethodId);
        if (typeemployeepaymentmethod == null){
            LOGGER.debug("No TypeEmployeePaymentMethod found with id: {}", typeemployeepaymentmethodId);
            throw new EntityNotFoundException(String.valueOf(typeemployeepaymentmethodId));
        }
        return typeemployeepaymentmethod;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeePaymentMethod update(TypeEmployeePaymentMethod typeemployeepaymentmethod) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeEmployeePaymentMethod with information: {}", typeemployeepaymentmethod);
        this.wmGenericDao.update(typeemployeepaymentmethod);

        Integer typeemployeepaymentmethodId = typeemployeepaymentmethod.getIdTypeEmployeeStatus();

        return this.wmGenericDao.findById(typeemployeepaymentmethodId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeePaymentMethod delete(Integer typeemployeepaymentmethodId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeePaymentMethod with id: {}", typeemployeepaymentmethodId);
        TypeEmployeePaymentMethod deleted = this.wmGenericDao.findById(typeemployeepaymentmethodId);
        if (deleted == null) {
            LOGGER.debug("No TypeEmployeePaymentMethod found with id: {}", typeemployeepaymentmethodId);
            throw new EntityNotFoundException(String.valueOf(typeemployeepaymentmethodId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeEmployeePaymentMethod> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeePaymentMethods");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeEmployeePaymentMethod> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeePaymentMethods");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeEmployeePaymentMethod to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeEmployeePaymentMethod> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

