/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ScheduleDynamic;

/**
 * Service object for domain model class ScheduleDynamic.
 *
 * @see {@link ScheduleDynamic}
 */
public interface ScheduleDynamicService {

    /**
     * Creates a new ScheduleDynamic.
     *
     * @param scheduleDynamic The information of the created CompositeTable.
     * @return The created ScheduleDynamic.
     */
	ScheduleDynamic create(ScheduleDynamic scheduleDynamic);


	/**
	 * Finds ScheduleDynamic by id.
	 *
	 * @param scheduleDynamicId The id of the wanted ScheduleDynamic.
	 * @return The found ScheduleDynamic. If no ScheduleDynamic is found, this method returns null.
	 */
	ScheduleDynamic getById(Integer scheduleDynamicId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ScheduleDynamic.
	 *
	 * @param scheduleDynamic The information of the updated ScheduleDynamic.
	 * @return The updated ScheduleDynamic.
     *
	 * @throws EntityNotFoundException if no ScheduleDynamic is found with given id.
	 */
	ScheduleDynamic update(ScheduleDynamic scheduleDynamic) throws EntityNotFoundException;

    /**
	 * Deletes a ScheduleDynamic.
	 *
	 * @param scheduleDynamicId The id of the deleted ScheduleDynamic.
	 * @return The deleted ScheduleDynamic.
     *
	 * @throws EntityNotFoundException if no ScheduleDynamic is found with the given id.
	 */
	ScheduleDynamic delete(Integer scheduleDynamicId) throws EntityNotFoundException;

	/**
	 * Finds all ScheduleDynamics.
	 *
	 * @return A list of ScheduleDynamics.
	 */
    @Deprecated
	Page<ScheduleDynamic> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ScheduleDynamics.
	 * @return A list of ScheduleDynamics.
	 */
    Page<ScheduleDynamic> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ScheduleDynamics in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ScheduleDynamic.
	 */
	long count(String query);

    Page<ScheduleDynamic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

