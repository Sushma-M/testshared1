/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.RolePermission;

/**
 * ServiceImpl object for domain model class RolePermission.
 *
 * @see RolePermission
 */
@Service("TestDB_26may.RolePermissionService")
public class RolePermissionServiceImpl implements RolePermissionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RolePermissionServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.RolePermissionDao")
    private WMGenericDao<RolePermission, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RolePermission, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public RolePermission create(RolePermission rolepermission) {
        LOGGER.debug("Creating a new RolePermission with information: {}", rolepermission);
        return this.wmGenericDao.create(rolepermission);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public RolePermission getById(Integer rolepermissionId) throws EntityNotFoundException {
        LOGGER.debug("Finding RolePermission by id: {}", rolepermissionId);
        RolePermission rolepermission = this.wmGenericDao.findById(rolepermissionId);
        if (rolepermission == null){
            LOGGER.debug("No RolePermission found with id: {}", rolepermissionId);
            throw new EntityNotFoundException(String.valueOf(rolepermissionId));
        }
        return rolepermission;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public RolePermission update(RolePermission rolepermission) throws EntityNotFoundException {
        LOGGER.debug("Updating RolePermission with information: {}", rolepermission);
        this.wmGenericDao.update(rolepermission);

        Integer rolepermissionId = rolepermission.getIdRolePermission();

        return this.wmGenericDao.findById(rolepermissionId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public RolePermission delete(Integer rolepermissionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RolePermission with id: {}", rolepermissionId);
        RolePermission deleted = this.wmGenericDao.findById(rolepermissionId);
        if (deleted == null) {
            LOGGER.debug("No RolePermission found with id: {}", rolepermissionId);
            throw new EntityNotFoundException(String.valueOf(rolepermissionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<RolePermission> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RolePermissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<RolePermission> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RolePermissions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table RolePermission to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<RolePermission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

