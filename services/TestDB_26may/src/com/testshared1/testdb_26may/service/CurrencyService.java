/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Currency;

/**
 * Service object for domain model class Currency.
 *
 * @see {@link Currency}
 */
public interface CurrencyService {

    /**
     * Creates a new Currency.
     *
     * @param currency The information of the created CompositeTable.
     * @return The created Currency.
     */
	Currency create(Currency currency);


	/**
	 * Finds Currency by id.
	 *
	 * @param currencyId The id of the wanted Currency.
	 * @return The found Currency. If no Currency is found, this method returns null.
	 */
	Currency getById(Integer currencyId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Currency.
	 *
	 * @param currency The information of the updated Currency.
	 * @return The updated Currency.
     *
	 * @throws EntityNotFoundException if no Currency is found with given id.
	 */
	Currency update(Currency currency) throws EntityNotFoundException;

    /**
	 * Deletes a Currency.
	 *
	 * @param currencyId The id of the deleted Currency.
	 * @return The deleted Currency.
     *
	 * @throws EntityNotFoundException if no Currency is found with the given id.
	 */
	Currency delete(Integer currencyId) throws EntityNotFoundException;

	/**
	 * Finds all Currencies.
	 *
	 * @return A list of Currencies.
	 */
    @Deprecated
	Page<Currency> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Currencies.
	 * @return A list of Currencies.
	 */
    Page<Currency> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Currencies in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Currency.
	 */
	long count(String query);

    Page<Currency> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

