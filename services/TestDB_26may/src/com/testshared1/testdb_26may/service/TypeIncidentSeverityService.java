/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeIncidentSeverity;

/**
 * Service object for domain model class TypeIncidentSeverity.
 *
 * @see {@link TypeIncidentSeverity}
 */
public interface TypeIncidentSeverityService {

    /**
     * Creates a new TypeIncidentSeverity.
     *
     * @param typeIncidentSeverity The information of the created CompositeTable.
     * @return The created TypeIncidentSeverity.
     */
	TypeIncidentSeverity create(TypeIncidentSeverity typeIncidentSeverity);


	/**
	 * Finds TypeIncidentSeverity by id.
	 *
	 * @param typeIncidentSeverityId The id of the wanted TypeIncidentSeverity.
	 * @return The found TypeIncidentSeverity. If no TypeIncidentSeverity is found, this method returns null.
	 */
	TypeIncidentSeverity getById(Integer typeIncidentSeverityId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeIncidentSeverity.
	 *
	 * @param typeIncidentSeverity The information of the updated TypeIncidentSeverity.
	 * @return The updated TypeIncidentSeverity.
     *
	 * @throws EntityNotFoundException if no TypeIncidentSeverity is found with given id.
	 */
	TypeIncidentSeverity update(TypeIncidentSeverity typeIncidentSeverity) throws EntityNotFoundException;

    /**
	 * Deletes a TypeIncidentSeverity.
	 *
	 * @param typeIncidentSeverityId The id of the deleted TypeIncidentSeverity.
	 * @return The deleted TypeIncidentSeverity.
     *
	 * @throws EntityNotFoundException if no TypeIncidentSeverity is found with the given id.
	 */
	TypeIncidentSeverity delete(Integer typeIncidentSeverityId) throws EntityNotFoundException;

	/**
	 * Finds all TypeIncidentSeverities.
	 *
	 * @return A list of TypeIncidentSeverities.
	 */
    @Deprecated
	Page<TypeIncidentSeverity> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeIncidentSeverities.
	 * @return A list of TypeIncidentSeverities.
	 */
    Page<TypeIncidentSeverity> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeIncidentSeverities in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeIncidentSeverity.
	 */
	long count(String query);

    Page<TypeIncidentSeverity> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

