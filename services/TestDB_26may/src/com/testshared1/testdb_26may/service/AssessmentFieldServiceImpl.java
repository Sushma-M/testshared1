/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssessmentField;

/**
 * ServiceImpl object for domain model class AssessmentField.
 *
 * @see AssessmentField
 */
@Service("TestDB_26may.AssessmentFieldService")
public class AssessmentFieldServiceImpl implements AssessmentFieldService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentFieldServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssessmentFieldDao")
    private WMGenericDao<AssessmentField, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssessmentField, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public AssessmentField create(AssessmentField assessmentfield) {
        LOGGER.debug("Creating a new AssessmentField with information: {}", assessmentfield);
        return this.wmGenericDao.create(assessmentfield);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public AssessmentField getById(Integer assessmentfieldId) throws EntityNotFoundException {
        LOGGER.debug("Finding AssessmentField by id: {}", assessmentfieldId);
        AssessmentField assessmentfield = this.wmGenericDao.findById(assessmentfieldId);
        if (assessmentfield == null){
            LOGGER.debug("No AssessmentField found with id: {}", assessmentfieldId);
            throw new EntityNotFoundException(String.valueOf(assessmentfieldId));
        }
        return assessmentfield;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public AssessmentField update(AssessmentField assessmentfield) throws EntityNotFoundException {
        LOGGER.debug("Updating AssessmentField with information: {}", assessmentfield);
        this.wmGenericDao.update(assessmentfield);

        Integer assessmentfieldId = assessmentfield.getIdAssessmentField();

        return this.wmGenericDao.findById(assessmentfieldId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public AssessmentField delete(Integer assessmentfieldId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssessmentField with id: {}", assessmentfieldId);
        AssessmentField deleted = this.wmGenericDao.findById(assessmentfieldId);
        if (deleted == null) {
            LOGGER.debug("No AssessmentField found with id: {}", assessmentfieldId);
            throw new EntityNotFoundException(String.valueOf(assessmentfieldId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<AssessmentField> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AssessmentFields");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<AssessmentField> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AssessmentFields");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table AssessmentField to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<AssessmentField> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

