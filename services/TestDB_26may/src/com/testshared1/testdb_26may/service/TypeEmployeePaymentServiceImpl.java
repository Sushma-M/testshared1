/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEmployeePayment;

/**
 * ServiceImpl object for domain model class TypeEmployeePayment.
 *
 * @see TypeEmployeePayment
 */
@Service("TestDB_26may.TypeEmployeePaymentService")
public class TypeEmployeePaymentServiceImpl implements TypeEmployeePaymentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeEmployeePaymentDao")
    private WMGenericDao<TypeEmployeePayment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEmployeePayment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeEmployeePayment create(TypeEmployeePayment typeemployeepayment) {
        LOGGER.debug("Creating a new TypeEmployeePayment with information: {}", typeemployeepayment);
        return this.wmGenericDao.create(typeemployeepayment);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeePayment getById(Integer typeemployeepaymentId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeEmployeePayment by id: {}", typeemployeepaymentId);
        TypeEmployeePayment typeemployeepayment = this.wmGenericDao.findById(typeemployeepaymentId);
        if (typeemployeepayment == null){
            LOGGER.debug("No TypeEmployeePayment found with id: {}", typeemployeepaymentId);
            throw new EntityNotFoundException(String.valueOf(typeemployeepaymentId));
        }
        return typeemployeepayment;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeePayment update(TypeEmployeePayment typeemployeepayment) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeEmployeePayment with information: {}", typeemployeepayment);
        this.wmGenericDao.update(typeemployeepayment);

        Integer typeemployeepaymentId = typeemployeepayment.getIdTypeEmployeePayment();

        return this.wmGenericDao.findById(typeemployeepaymentId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeEmployeePayment delete(Integer typeemployeepaymentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeePayment with id: {}", typeemployeepaymentId);
        TypeEmployeePayment deleted = this.wmGenericDao.findById(typeemployeepaymentId);
        if (deleted == null) {
            LOGGER.debug("No TypeEmployeePayment found with id: {}", typeemployeepaymentId);
            throw new EntityNotFoundException(String.valueOf(typeemployeepaymentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeEmployeePayment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeePayments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeEmployeePayment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeEmployeePayments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeEmployeePayment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeEmployeePayment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

