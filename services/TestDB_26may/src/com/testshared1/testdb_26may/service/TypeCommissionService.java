/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeCommission;

/**
 * Service object for domain model class TypeCommission.
 *
 * @see {@link TypeCommission}
 */
public interface TypeCommissionService {

    /**
     * Creates a new TypeCommission.
     *
     * @param typeCommission The information of the created CompositeTable.
     * @return The created TypeCommission.
     */
	TypeCommission create(TypeCommission typeCommission);


	/**
	 * Finds TypeCommission by id.
	 *
	 * @param typeCommissionId The id of the wanted TypeCommission.
	 * @return The found TypeCommission. If no TypeCommission is found, this method returns null.
	 */
	TypeCommission getById(Integer typeCommissionId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeCommission.
	 *
	 * @param typeCommission The information of the updated TypeCommission.
	 * @return The updated TypeCommission.
     *
	 * @throws EntityNotFoundException if no TypeCommission is found with given id.
	 */
	TypeCommission update(TypeCommission typeCommission) throws EntityNotFoundException;

    /**
	 * Deletes a TypeCommission.
	 *
	 * @param typeCommissionId The id of the deleted TypeCommission.
	 * @return The deleted TypeCommission.
     *
	 * @throws EntityNotFoundException if no TypeCommission is found with the given id.
	 */
	TypeCommission delete(Integer typeCommissionId) throws EntityNotFoundException;

	/**
	 * Finds all TypeCommissions.
	 *
	 * @return A list of TypeCommissions.
	 */
    @Deprecated
	Page<TypeCommission> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeCommissions.
	 * @return A list of TypeCommissions.
	 */
    Page<TypeCommission> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeCommissions in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeCommission.
	 */
	long count(String query);

    Page<TypeCommission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

