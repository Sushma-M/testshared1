/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssessmentEmployeeData;

/**
 * Service object for domain model class AssessmentEmployeeData.
 *
 * @see {@link AssessmentEmployeeData}
 */
public interface AssessmentEmployeeDataService {

    /**
     * Creates a new AssessmentEmployeeData.
     *
     * @param assessmentEmployeeData The information of the created CompositeTable.
     * @return The created AssessmentEmployeeData.
     */
	AssessmentEmployeeData create(AssessmentEmployeeData assessmentEmployeeData);


	/**
	 * Finds AssessmentEmployeeData by id.
	 *
	 * @param assessmentEmployeeDataId The id of the wanted AssessmentEmployeeData.
	 * @return The found AssessmentEmployeeData. If no AssessmentEmployeeData is found, this method returns null.
	 */
	AssessmentEmployeeData getById(Integer assessmentEmployeeDataId) throws EntityNotFoundException;

	/**
	 * Updates the information of a AssessmentEmployeeData.
	 *
	 * @param assessmentEmployeeData The information of the updated AssessmentEmployeeData.
	 * @return The updated AssessmentEmployeeData.
     *
	 * @throws EntityNotFoundException if no AssessmentEmployeeData is found with given id.
	 */
	AssessmentEmployeeData update(AssessmentEmployeeData assessmentEmployeeData) throws EntityNotFoundException;

    /**
	 * Deletes a AssessmentEmployeeData.
	 *
	 * @param assessmentEmployeeDataId The id of the deleted AssessmentEmployeeData.
	 * @return The deleted AssessmentEmployeeData.
     *
	 * @throws EntityNotFoundException if no AssessmentEmployeeData is found with the given id.
	 */
	AssessmentEmployeeData delete(Integer assessmentEmployeeDataId) throws EntityNotFoundException;

	/**
	 * Finds all AssessmentEmployeeDatas.
	 *
	 * @return A list of AssessmentEmployeeDatas.
	 */
    @Deprecated
	Page<AssessmentEmployeeData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all AssessmentEmployeeDatas.
	 * @return A list of AssessmentEmployeeDatas.
	 */
    Page<AssessmentEmployeeData> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AssessmentEmployeeDatas in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the AssessmentEmployeeData.
	 */
	long count(String query);

    Page<AssessmentEmployeeData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

