/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Payroll;

/**
 * Service object for domain model class Payroll.
 *
 * @see {@link Payroll}
 */
public interface PayrollService {

    /**
     * Creates a new Payroll.
     *
     * @param payroll The information of the created CompositeTable.
     * @return The created Payroll.
     */
	Payroll create(Payroll payroll);


	/**
	 * Finds Payroll by id.
	 *
	 * @param payrollId The id of the wanted Payroll.
	 * @return The found Payroll. If no Payroll is found, this method returns null.
	 */
	Payroll getById(Integer payrollId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Payroll.
	 *
	 * @param payroll The information of the updated Payroll.
	 * @return The updated Payroll.
     *
	 * @throws EntityNotFoundException if no Payroll is found with given id.
	 */
	Payroll update(Payroll payroll) throws EntityNotFoundException;

    /**
	 * Deletes a Payroll.
	 *
	 * @param payrollId The id of the deleted Payroll.
	 * @return The deleted Payroll.
     *
	 * @throws EntityNotFoundException if no Payroll is found with the given id.
	 */
	Payroll delete(Integer payrollId) throws EntityNotFoundException;

	/**
	 * Finds all Payrolls.
	 *
	 * @return A list of Payrolls.
	 */
    @Deprecated
	Page<Payroll> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Payrolls.
	 * @return A list of Payrolls.
	 */
    Page<Payroll> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Payrolls in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Payroll.
	 */
	long count(String query);

    Page<Payroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

