/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListAssetUnloaded;

/**
 * ServiceImpl object for domain model class ListAssetUnloaded.
 *
 * @see ListAssetUnloaded
 */
@Service("TestDB_26may.ListAssetUnloadedService")
public class ListAssetUnloadedServiceImpl implements ListAssetUnloadedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetUnloadedServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListAssetUnloadedDao")
    private WMGenericDao<ListAssetUnloaded, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListAssetUnloaded, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListAssetUnloaded create(ListAssetUnloaded listassetunloaded) {
        LOGGER.debug("Creating a new ListAssetUnloaded with information: {}", listassetunloaded);
        return this.wmGenericDao.create(listassetunloaded);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetUnloaded getById(Integer listassetunloadedId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListAssetUnloaded by id: {}", listassetunloadedId);
        ListAssetUnloaded listassetunloaded = this.wmGenericDao.findById(listassetunloadedId);
        if (listassetunloaded == null){
            LOGGER.debug("No ListAssetUnloaded found with id: {}", listassetunloadedId);
            throw new EntityNotFoundException(String.valueOf(listassetunloadedId));
        }
        return listassetunloaded;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetUnloaded update(ListAssetUnloaded listassetunloaded) throws EntityNotFoundException {
        LOGGER.debug("Updating ListAssetUnloaded with information: {}", listassetunloaded);
        this.wmGenericDao.update(listassetunloaded);

        Integer listassetunloadedId = listassetunloaded.getIdListAssetUnloaded();

        return this.wmGenericDao.findById(listassetunloadedId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetUnloaded delete(Integer listassetunloadedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetUnloaded with id: {}", listassetunloadedId);
        ListAssetUnloaded deleted = this.wmGenericDao.findById(listassetunloadedId);
        if (deleted == null) {
            LOGGER.debug("No ListAssetUnloaded found with id: {}", listassetunloadedId);
            throw new EntityNotFoundException(String.valueOf(listassetunloadedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListAssetUnloaded> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListAssetUnloadeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListAssetUnloaded> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListAssetUnloadeds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListAssetUnloaded to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListAssetUnloaded> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

