/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeePersonalReference;

/**
 * Service object for domain model class EmployeePersonalReference.
 *
 * @see {@link EmployeePersonalReference}
 */
public interface EmployeePersonalReferenceService {

    /**
     * Creates a new EmployeePersonalReference.
     *
     * @param employeePersonalReference The information of the created CompositeTable.
     * @return The created EmployeePersonalReference.
     */
	EmployeePersonalReference create(EmployeePersonalReference employeePersonalReference);


	/**
	 * Finds EmployeePersonalReference by id.
	 *
	 * @param employeePersonalReferenceId The id of the wanted EmployeePersonalReference.
	 * @return The found EmployeePersonalReference. If no EmployeePersonalReference is found, this method returns null.
	 */
	EmployeePersonalReference getById(Integer employeePersonalReferenceId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeePersonalReference.
	 *
	 * @param employeePersonalReference The information of the updated EmployeePersonalReference.
	 * @return The updated EmployeePersonalReference.
     *
	 * @throws EntityNotFoundException if no EmployeePersonalReference is found with given id.
	 */
	EmployeePersonalReference update(EmployeePersonalReference employeePersonalReference) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeePersonalReference.
	 *
	 * @param employeePersonalReferenceId The id of the deleted EmployeePersonalReference.
	 * @return The deleted EmployeePersonalReference.
     *
	 * @throws EntityNotFoundException if no EmployeePersonalReference is found with the given id.
	 */
	EmployeePersonalReference delete(Integer employeePersonalReferenceId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeePersonalReferences.
	 *
	 * @return A list of EmployeePersonalReferences.
	 */
    @Deprecated
	Page<EmployeePersonalReference> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeePersonalReferences.
	 * @return A list of EmployeePersonalReferences.
	 */
    Page<EmployeePersonalReference> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeePersonalReferences in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeePersonalReference.
	 */
	long count(String query);

    Page<EmployeePersonalReference> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

