/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ScheduleFixedDay;

/**
 * ServiceImpl object for domain model class ScheduleFixedDay.
 *
 * @see ScheduleFixedDay
 */
@Service("TestDB_26may.ScheduleFixedDayService")
public class ScheduleFixedDayServiceImpl implements ScheduleFixedDayService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedDayServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ScheduleFixedDayDao")
    private WMGenericDao<ScheduleFixedDay, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ScheduleFixedDay, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ScheduleFixedDay create(ScheduleFixedDay schedulefixedday) {
        LOGGER.debug("Creating a new ScheduleFixedDay with information: {}", schedulefixedday);
        return this.wmGenericDao.create(schedulefixedday);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ScheduleFixedDay getById(Integer schedulefixeddayId) throws EntityNotFoundException {
        LOGGER.debug("Finding ScheduleFixedDay by id: {}", schedulefixeddayId);
        ScheduleFixedDay schedulefixedday = this.wmGenericDao.findById(schedulefixeddayId);
        if (schedulefixedday == null){
            LOGGER.debug("No ScheduleFixedDay found with id: {}", schedulefixeddayId);
            throw new EntityNotFoundException(String.valueOf(schedulefixeddayId));
        }
        return schedulefixedday;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ScheduleFixedDay update(ScheduleFixedDay schedulefixedday) throws EntityNotFoundException {
        LOGGER.debug("Updating ScheduleFixedDay with information: {}", schedulefixedday);
        this.wmGenericDao.update(schedulefixedday);

        Integer schedulefixeddayId = schedulefixedday.getIdScheduleFixedDay();

        return this.wmGenericDao.findById(schedulefixeddayId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ScheduleFixedDay delete(Integer schedulefixeddayId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleFixedDay with id: {}", schedulefixeddayId);
        ScheduleFixedDay deleted = this.wmGenericDao.findById(schedulefixeddayId);
        if (deleted == null) {
            LOGGER.debug("No ScheduleFixedDay found with id: {}", schedulefixeddayId);
            throw new EntityNotFoundException(String.valueOf(schedulefixeddayId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ScheduleFixedDay> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ScheduleFixedDays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ScheduleFixedDay> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ScheduleFixedDays");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ScheduleFixedDay to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ScheduleFixedDay> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

