/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.IncidenceEmployee;

/**
 * Service object for domain model class IncidenceEmployee.
 *
 * @see {@link IncidenceEmployee}
 */
public interface IncidenceEmployeeService {

    /**
     * Creates a new IncidenceEmployee.
     *
     * @param incidenceEmployee The information of the created CompositeTable.
     * @return The created IncidenceEmployee.
     */
	IncidenceEmployee create(IncidenceEmployee incidenceEmployee);


	/**
	 * Finds IncidenceEmployee by id.
	 *
	 * @param incidenceEmployeeId The id of the wanted IncidenceEmployee.
	 * @return The found IncidenceEmployee. If no IncidenceEmployee is found, this method returns null.
	 */
	IncidenceEmployee getById(Integer incidenceEmployeeId) throws EntityNotFoundException;

	/**
	 * Updates the information of a IncidenceEmployee.
	 *
	 * @param incidenceEmployee The information of the updated IncidenceEmployee.
	 * @return The updated IncidenceEmployee.
     *
	 * @throws EntityNotFoundException if no IncidenceEmployee is found with given id.
	 */
	IncidenceEmployee update(IncidenceEmployee incidenceEmployee) throws EntityNotFoundException;

    /**
	 * Deletes a IncidenceEmployee.
	 *
	 * @param incidenceEmployeeId The id of the deleted IncidenceEmployee.
	 * @return The deleted IncidenceEmployee.
     *
	 * @throws EntityNotFoundException if no IncidenceEmployee is found with the given id.
	 */
	IncidenceEmployee delete(Integer incidenceEmployeeId) throws EntityNotFoundException;

	/**
	 * Finds all IncidenceEmployees.
	 *
	 * @return A list of IncidenceEmployees.
	 */
    @Deprecated
	Page<IncidenceEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all IncidenceEmployees.
	 * @return A list of IncidenceEmployees.
	 */
    Page<IncidenceEmployee> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the IncidenceEmployees in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the IncidenceEmployee.
	 */
	long count(String query);

    Page<IncidenceEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

