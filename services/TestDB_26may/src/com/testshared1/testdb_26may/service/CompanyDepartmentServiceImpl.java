/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.CompanyDepartment;

/**
 * ServiceImpl object for domain model class CompanyDepartment.
 *
 * @see CompanyDepartment
 */
@Service("TestDB_26may.CompanyDepartmentService")
public class CompanyDepartmentServiceImpl implements CompanyDepartmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyDepartmentServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.CompanyDepartmentDao")
    private WMGenericDao<CompanyDepartment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompanyDepartment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public CompanyDepartment create(CompanyDepartment companydepartment) {
        LOGGER.debug("Creating a new CompanyDepartment with information: {}", companydepartment);
        return this.wmGenericDao.create(companydepartment);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public CompanyDepartment getById(Integer companydepartmentId) throws EntityNotFoundException {
        LOGGER.debug("Finding CompanyDepartment by id: {}", companydepartmentId);
        CompanyDepartment companydepartment = this.wmGenericDao.findById(companydepartmentId);
        if (companydepartment == null){
            LOGGER.debug("No CompanyDepartment found with id: {}", companydepartmentId);
            throw new EntityNotFoundException(String.valueOf(companydepartmentId));
        }
        return companydepartment;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public CompanyDepartment update(CompanyDepartment companydepartment) throws EntityNotFoundException {
        LOGGER.debug("Updating CompanyDepartment with information: {}", companydepartment);
        this.wmGenericDao.update(companydepartment);

        Integer companydepartmentId = companydepartment.getIdCompanyDepartment();

        return this.wmGenericDao.findById(companydepartmentId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public CompanyDepartment delete(Integer companydepartmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompanyDepartment with id: {}", companydepartmentId);
        CompanyDepartment deleted = this.wmGenericDao.findById(companydepartmentId);
        if (deleted == null) {
            LOGGER.debug("No CompanyDepartment found with id: {}", companydepartmentId);
            throw new EntityNotFoundException(String.valueOf(companydepartmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<CompanyDepartment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompanyDepartments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<CompanyDepartment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompanyDepartments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table CompanyDepartment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<CompanyDepartment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

