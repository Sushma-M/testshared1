/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.CompensatoryDayCredit;

/**
 * ServiceImpl object for domain model class CompensatoryDayCredit.
 *
 * @see CompensatoryDayCredit
 */
@Service("TestDB_26may.CompensatoryDayCreditService")
public class CompensatoryDayCreditServiceImpl implements CompensatoryDayCreditService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompensatoryDayCreditServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.CompensatoryDayCreditDao")
    private WMGenericDao<CompensatoryDayCredit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompensatoryDayCredit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public CompensatoryDayCredit create(CompensatoryDayCredit compensatorydaycredit) {
        LOGGER.debug("Creating a new CompensatoryDayCredit with information: {}", compensatorydaycredit);
        return this.wmGenericDao.create(compensatorydaycredit);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public CompensatoryDayCredit getById(Integer compensatorydaycreditId) throws EntityNotFoundException {
        LOGGER.debug("Finding CompensatoryDayCredit by id: {}", compensatorydaycreditId);
        CompensatoryDayCredit compensatorydaycredit = this.wmGenericDao.findById(compensatorydaycreditId);
        if (compensatorydaycredit == null){
            LOGGER.debug("No CompensatoryDayCredit found with id: {}", compensatorydaycreditId);
            throw new EntityNotFoundException(String.valueOf(compensatorydaycreditId));
        }
        return compensatorydaycredit;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public CompensatoryDayCredit update(CompensatoryDayCredit compensatorydaycredit) throws EntityNotFoundException {
        LOGGER.debug("Updating CompensatoryDayCredit with information: {}", compensatorydaycredit);
        this.wmGenericDao.update(compensatorydaycredit);

        Integer compensatorydaycreditId = compensatorydaycredit.getIdCompensatoryDayCredit();

        return this.wmGenericDao.findById(compensatorydaycreditId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public CompensatoryDayCredit delete(Integer compensatorydaycreditId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompensatoryDayCredit with id: {}", compensatorydaycreditId);
        CompensatoryDayCredit deleted = this.wmGenericDao.findById(compensatorydaycreditId);
        if (deleted == null) {
            LOGGER.debug("No CompensatoryDayCredit found with id: {}", compensatorydaycreditId);
            throw new EntityNotFoundException(String.valueOf(compensatorydaycreditId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<CompensatoryDayCredit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompensatoryDayCredits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<CompensatoryDayCredit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompensatoryDayCredits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table CompensatoryDayCredit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<CompensatoryDayCredit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

