/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Log;

/**
 * Service object for domain model class Log.
 *
 * @see {@link Log}
 */
public interface LogService {

    /**
     * Creates a new Log.
     *
     * @param log The information of the created CompositeTable.
     * @return The created Log.
     */
	Log create(Log log);


	/**
	 * Finds Log by id.
	 *
	 * @param logId The id of the wanted Log.
	 * @return The found Log. If no Log is found, this method returns null.
	 */
	Log getById(Integer logId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Log.
	 *
	 * @param log The information of the updated Log.
	 * @return The updated Log.
     *
	 * @throws EntityNotFoundException if no Log is found with given id.
	 */
	Log update(Log log) throws EntityNotFoundException;

    /**
	 * Deletes a Log.
	 *
	 * @param logId The id of the deleted Log.
	 * @return The deleted Log.
     *
	 * @throws EntityNotFoundException if no Log is found with the given id.
	 */
	Log delete(Integer logId) throws EntityNotFoundException;

	/**
	 * Finds all Logs.
	 *
	 * @return A list of Logs.
	 */
    @Deprecated
	Page<Log> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Logs.
	 * @return A list of Logs.
	 */
    Page<Log> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Logs in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Log.
	 */
	long count(String query);

    Page<Log> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

