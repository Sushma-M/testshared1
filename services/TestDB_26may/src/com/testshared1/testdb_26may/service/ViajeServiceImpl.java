/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Viaje;

/**
 * ServiceImpl object for domain model class Viaje.
 *
 * @see Viaje
 */
@Service("TestDB_26may.ViajeService")
public class ViajeServiceImpl implements ViajeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViajeServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ViajeDao")
    private WMGenericDao<Viaje, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Viaje, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public Viaje create(Viaje viaje) {
        LOGGER.debug("Creating a new Viaje with information: {}", viaje);
        return this.wmGenericDao.create(viaje);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Viaje getById(Integer viajeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Viaje by id: {}", viajeId);
        Viaje viaje = this.wmGenericDao.findById(viajeId);
        if (viaje == null){
            LOGGER.debug("No Viaje found with id: {}", viajeId);
            throw new EntityNotFoundException(String.valueOf(viajeId));
        }
        return viaje;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public Viaje update(Viaje viaje) throws EntityNotFoundException {
        LOGGER.debug("Updating Viaje with information: {}", viaje);
        this.wmGenericDao.update(viaje);

        Integer viajeId = viaje.getIdTravel();

        return this.wmGenericDao.findById(viajeId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public Viaje delete(Integer viajeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Viaje with id: {}", viajeId);
        Viaje deleted = this.wmGenericDao.findById(viajeId);
        if (deleted == null) {
            LOGGER.debug("No Viaje found with id: {}", viajeId);
            throw new EntityNotFoundException(String.valueOf(viajeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<Viaje> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Viajes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<Viaje> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Viajes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table Viaje to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Viaje> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

