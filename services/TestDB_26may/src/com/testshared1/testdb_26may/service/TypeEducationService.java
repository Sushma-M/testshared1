/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEducation;

/**
 * Service object for domain model class TypeEducation.
 *
 * @see {@link TypeEducation}
 */
public interface TypeEducationService {

    /**
     * Creates a new TypeEducation.
     *
     * @param typeEducation The information of the created CompositeTable.
     * @return The created TypeEducation.
     */
	TypeEducation create(TypeEducation typeEducation);


	/**
	 * Finds TypeEducation by id.
	 *
	 * @param typeEducationId The id of the wanted TypeEducation.
	 * @return The found TypeEducation. If no TypeEducation is found, this method returns null.
	 */
	TypeEducation getById(Integer typeEducationId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeEducation.
	 *
	 * @param typeEducation The information of the updated TypeEducation.
	 * @return The updated TypeEducation.
     *
	 * @throws EntityNotFoundException if no TypeEducation is found with given id.
	 */
	TypeEducation update(TypeEducation typeEducation) throws EntityNotFoundException;

    /**
	 * Deletes a TypeEducation.
	 *
	 * @param typeEducationId The id of the deleted TypeEducation.
	 * @return The deleted TypeEducation.
     *
	 * @throws EntityNotFoundException if no TypeEducation is found with the given id.
	 */
	TypeEducation delete(Integer typeEducationId) throws EntityNotFoundException;

	/**
	 * Finds all TypeEducations.
	 *
	 * @return A list of TypeEducations.
	 */
    @Deprecated
	Page<TypeEducation> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeEducations.
	 * @return A list of TypeEducations.
	 */
    Page<TypeEducation> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeEducations in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeEducation.
	 */
	long count(String query);

    Page<TypeEducation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

