/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeGenerationForm;

/**
 * ServiceImpl object for domain model class TypeGenerationForm.
 *
 * @see TypeGenerationForm
 */
@Service("TestDB_26may.TypeGenerationFormService")
public class TypeGenerationFormServiceImpl implements TypeGenerationFormService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeGenerationFormServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeGenerationFormDao")
    private WMGenericDao<TypeGenerationForm, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeGenerationForm, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeGenerationForm create(TypeGenerationForm typegenerationform) {
        LOGGER.debug("Creating a new TypeGenerationForm with information: {}", typegenerationform);
        return this.wmGenericDao.create(typegenerationform);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeGenerationForm getById(Integer typegenerationformId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeGenerationForm by id: {}", typegenerationformId);
        TypeGenerationForm typegenerationform = this.wmGenericDao.findById(typegenerationformId);
        if (typegenerationform == null){
            LOGGER.debug("No TypeGenerationForm found with id: {}", typegenerationformId);
            throw new EntityNotFoundException(String.valueOf(typegenerationformId));
        }
        return typegenerationform;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeGenerationForm update(TypeGenerationForm typegenerationform) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeGenerationForm with information: {}", typegenerationform);
        this.wmGenericDao.update(typegenerationform);

        Integer typegenerationformId = typegenerationform.getIdTypeEmployeePaymentMethod();

        return this.wmGenericDao.findById(typegenerationformId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeGenerationForm delete(Integer typegenerationformId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeGenerationForm with id: {}", typegenerationformId);
        TypeGenerationForm deleted = this.wmGenericDao.findById(typegenerationformId);
        if (deleted == null) {
            LOGGER.debug("No TypeGenerationForm found with id: {}", typegenerationformId);
            throw new EntityNotFoundException(String.valueOf(typegenerationformId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeGenerationForm> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeGenerationForms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeGenerationForm> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeGenerationForms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeGenerationForm to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeGenerationForm> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

