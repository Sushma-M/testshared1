/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListTravelExpenseDetail;

/**
 * ServiceImpl object for domain model class ListTravelExpenseDetail.
 *
 * @see ListTravelExpenseDetail
 */
@Service("TestDB_26may.ListTravelExpenseDetailService")
public class ListTravelExpenseDetailServiceImpl implements ListTravelExpenseDetailService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListTravelExpenseDetailServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListTravelExpenseDetailDao")
    private WMGenericDao<ListTravelExpenseDetail, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListTravelExpenseDetail, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListTravelExpenseDetail create(ListTravelExpenseDetail listtravelexpensedetail) {
        LOGGER.debug("Creating a new ListTravelExpenseDetail with information: {}", listtravelexpensedetail);
        return this.wmGenericDao.create(listtravelexpensedetail);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListTravelExpenseDetail getById(Integer listtravelexpensedetailId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListTravelExpenseDetail by id: {}", listtravelexpensedetailId);
        ListTravelExpenseDetail listtravelexpensedetail = this.wmGenericDao.findById(listtravelexpensedetailId);
        if (listtravelexpensedetail == null){
            LOGGER.debug("No ListTravelExpenseDetail found with id: {}", listtravelexpensedetailId);
            throw new EntityNotFoundException(String.valueOf(listtravelexpensedetailId));
        }
        return listtravelexpensedetail;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListTravelExpenseDetail update(ListTravelExpenseDetail listtravelexpensedetail) throws EntityNotFoundException {
        LOGGER.debug("Updating ListTravelExpenseDetail with information: {}", listtravelexpensedetail);
        this.wmGenericDao.update(listtravelexpensedetail);

        Integer listtravelexpensedetailId = listtravelexpensedetail.getIdListTravelExpenseDetail();

        return this.wmGenericDao.findById(listtravelexpensedetailId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListTravelExpenseDetail delete(Integer listtravelexpensedetailId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListTravelExpenseDetail with id: {}", listtravelexpensedetailId);
        ListTravelExpenseDetail deleted = this.wmGenericDao.findById(listtravelexpensedetailId);
        if (deleted == null) {
            LOGGER.debug("No ListTravelExpenseDetail found with id: {}", listtravelexpensedetailId);
            throw new EntityNotFoundException(String.valueOf(listtravelexpensedetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListTravelExpenseDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListTravelExpenseDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListTravelExpenseDetail> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListTravelExpenseDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListTravelExpenseDetail to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListTravelExpenseDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

