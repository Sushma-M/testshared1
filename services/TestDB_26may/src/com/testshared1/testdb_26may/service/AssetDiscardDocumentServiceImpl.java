/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssetDiscardDocument;

/**
 * ServiceImpl object for domain model class AssetDiscardDocument.
 *
 * @see AssetDiscardDocument
 */
@Service("TestDB_26may.AssetDiscardDocumentService")
public class AssetDiscardDocumentServiceImpl implements AssetDiscardDocumentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDiscardDocumentServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetDiscardDocumentDao")
    private WMGenericDao<AssetDiscardDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetDiscardDocument, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public AssetDiscardDocument create(AssetDiscardDocument assetdiscarddocument) {
        LOGGER.debug("Creating a new AssetDiscardDocument with information: {}", assetdiscarddocument);
        return this.wmGenericDao.create(assetdiscarddocument);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public AssetDiscardDocument getById(Integer assetdiscarddocumentId) throws EntityNotFoundException {
        LOGGER.debug("Finding AssetDiscardDocument by id: {}", assetdiscarddocumentId);
        AssetDiscardDocument assetdiscarddocument = this.wmGenericDao.findById(assetdiscarddocumentId);
        if (assetdiscarddocument == null){
            LOGGER.debug("No AssetDiscardDocument found with id: {}", assetdiscarddocumentId);
            throw new EntityNotFoundException(String.valueOf(assetdiscarddocumentId));
        }
        return assetdiscarddocument;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public AssetDiscardDocument update(AssetDiscardDocument assetdiscarddocument) throws EntityNotFoundException {
        LOGGER.debug("Updating AssetDiscardDocument with information: {}", assetdiscarddocument);
        this.wmGenericDao.update(assetdiscarddocument);

        Integer assetdiscarddocumentId = assetdiscarddocument.getIdAssetDiscardDocument();

        return this.wmGenericDao.findById(assetdiscarddocumentId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public AssetDiscardDocument delete(Integer assetdiscarddocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetDiscardDocument with id: {}", assetdiscarddocumentId);
        AssetDiscardDocument deleted = this.wmGenericDao.findById(assetdiscarddocumentId);
        if (deleted == null) {
            LOGGER.debug("No AssetDiscardDocument found with id: {}", assetdiscarddocumentId);
            throw new EntityNotFoundException(String.valueOf(assetdiscarddocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<AssetDiscardDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AssetDiscardDocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<AssetDiscardDocument> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AssetDiscardDocuments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table AssetDiscardDocument to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<AssetDiscardDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

