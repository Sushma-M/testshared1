/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.WorkPositionResponsibility;

/**
 * Service object for domain model class WorkPositionResponsibility.
 *
 * @see {@link WorkPositionResponsibility}
 */
public interface WorkPositionResponsibilityService {

    /**
     * Creates a new WorkPositionResponsibility.
     *
     * @param workPositionResponsibility The information of the created CompositeTable.
     * @return The created WorkPositionResponsibility.
     */
	WorkPositionResponsibility create(WorkPositionResponsibility workPositionResponsibility);


	/**
	 * Finds WorkPositionResponsibility by id.
	 *
	 * @param workPositionResponsibilityId The id of the wanted WorkPositionResponsibility.
	 * @return The found WorkPositionResponsibility. If no WorkPositionResponsibility is found, this method returns null.
	 */
	WorkPositionResponsibility getById(Integer workPositionResponsibilityId) throws EntityNotFoundException;

	/**
	 * Updates the information of a WorkPositionResponsibility.
	 *
	 * @param workPositionResponsibility The information of the updated WorkPositionResponsibility.
	 * @return The updated WorkPositionResponsibility.
     *
	 * @throws EntityNotFoundException if no WorkPositionResponsibility is found with given id.
	 */
	WorkPositionResponsibility update(WorkPositionResponsibility workPositionResponsibility) throws EntityNotFoundException;

    /**
	 * Deletes a WorkPositionResponsibility.
	 *
	 * @param workPositionResponsibilityId The id of the deleted WorkPositionResponsibility.
	 * @return The deleted WorkPositionResponsibility.
     *
	 * @throws EntityNotFoundException if no WorkPositionResponsibility is found with the given id.
	 */
	WorkPositionResponsibility delete(Integer workPositionResponsibilityId) throws EntityNotFoundException;

	/**
	 * Finds all WorkPositionResponsibilities.
	 *
	 * @return A list of WorkPositionResponsibilities.
	 */
    @Deprecated
	Page<WorkPositionResponsibility> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all WorkPositionResponsibilities.
	 * @return A list of WorkPositionResponsibilities.
	 */
    Page<WorkPositionResponsibility> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the WorkPositionResponsibilities in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the WorkPositionResponsibility.
	 */
	long count(String query);

    Page<WorkPositionResponsibility> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

