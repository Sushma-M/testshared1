/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListRolePermission;

/**
 * ServiceImpl object for domain model class ListRolePermission.
 *
 * @see ListRolePermission
 */
@Service("TestDB_26may.ListRolePermissionService")
public class ListRolePermissionServiceImpl implements ListRolePermissionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListRolePermissionServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListRolePermissionDao")
    private WMGenericDao<ListRolePermission, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListRolePermission, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListRolePermission create(ListRolePermission listrolepermission) {
        LOGGER.debug("Creating a new ListRolePermission with information: {}", listrolepermission);
        return this.wmGenericDao.create(listrolepermission);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListRolePermission getById(Integer listrolepermissionId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListRolePermission by id: {}", listrolepermissionId);
        ListRolePermission listrolepermission = this.wmGenericDao.findById(listrolepermissionId);
        if (listrolepermission == null){
            LOGGER.debug("No ListRolePermission found with id: {}", listrolepermissionId);
            throw new EntityNotFoundException(String.valueOf(listrolepermissionId));
        }
        return listrolepermission;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListRolePermission update(ListRolePermission listrolepermission) throws EntityNotFoundException {
        LOGGER.debug("Updating ListRolePermission with information: {}", listrolepermission);
        this.wmGenericDao.update(listrolepermission);

        Integer listrolepermissionId = listrolepermission.getIdListRolePermission();

        return this.wmGenericDao.findById(listrolepermissionId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListRolePermission delete(Integer listrolepermissionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListRolePermission with id: {}", listrolepermissionId);
        ListRolePermission deleted = this.wmGenericDao.findById(listrolepermissionId);
        if (deleted == null) {
            LOGGER.debug("No ListRolePermission found with id: {}", listrolepermissionId);
            throw new EntityNotFoundException(String.valueOf(listrolepermissionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListRolePermission> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListRolePermissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListRolePermission> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListRolePermissions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListRolePermission to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListRolePermission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

