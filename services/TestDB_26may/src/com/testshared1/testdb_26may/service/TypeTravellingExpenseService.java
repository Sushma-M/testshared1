/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeTravellingExpense;

/**
 * Service object for domain model class TypeTravellingExpense.
 *
 * @see {@link TypeTravellingExpense}
 */
public interface TypeTravellingExpenseService {

    /**
     * Creates a new TypeTravellingExpense.
     *
     * @param typeTravellingExpense The information of the created CompositeTable.
     * @return The created TypeTravellingExpense.
     */
	TypeTravellingExpense create(TypeTravellingExpense typeTravellingExpense);


	/**
	 * Finds TypeTravellingExpense by id.
	 *
	 * @param typeTravellingExpenseId The id of the wanted TypeTravellingExpense.
	 * @return The found TypeTravellingExpense. If no TypeTravellingExpense is found, this method returns null.
	 */
	TypeTravellingExpense getById(Integer typeTravellingExpenseId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeTravellingExpense.
	 *
	 * @param typeTravellingExpense The information of the updated TypeTravellingExpense.
	 * @return The updated TypeTravellingExpense.
     *
	 * @throws EntityNotFoundException if no TypeTravellingExpense is found with given id.
	 */
	TypeTravellingExpense update(TypeTravellingExpense typeTravellingExpense) throws EntityNotFoundException;

    /**
	 * Deletes a TypeTravellingExpense.
	 *
	 * @param typeTravellingExpenseId The id of the deleted TypeTravellingExpense.
	 * @return The deleted TypeTravellingExpense.
     *
	 * @throws EntityNotFoundException if no TypeTravellingExpense is found with the given id.
	 */
	TypeTravellingExpense delete(Integer typeTravellingExpenseId) throws EntityNotFoundException;

	/**
	 * Finds all TypeTravellingExpenses.
	 *
	 * @return A list of TypeTravellingExpenses.
	 */
    @Deprecated
	Page<TypeTravellingExpense> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeTravellingExpenses.
	 * @return A list of TypeTravellingExpenses.
	 */
    Page<TypeTravellingExpense> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeTravellingExpenses in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeTravellingExpense.
	 */
	long count(String query);

    Page<TypeTravellingExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

