/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.MobileNumber;

/**
 * ServiceImpl object for domain model class MobileNumber.
 *
 * @see MobileNumber
 */
@Service("TestDB_26may.MobileNumberService")
public class MobileNumberServiceImpl implements MobileNumberService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MobileNumberServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.MobileNumberDao")
    private WMGenericDao<MobileNumber, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MobileNumber, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public MobileNumber create(MobileNumber mobilenumber) {
        LOGGER.debug("Creating a new MobileNumber with information: {}", mobilenumber);
        return this.wmGenericDao.create(mobilenumber);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public MobileNumber getById(Integer mobilenumberId) throws EntityNotFoundException {
        LOGGER.debug("Finding MobileNumber by id: {}", mobilenumberId);
        MobileNumber mobilenumber = this.wmGenericDao.findById(mobilenumberId);
        if (mobilenumber == null){
            LOGGER.debug("No MobileNumber found with id: {}", mobilenumberId);
            throw new EntityNotFoundException(String.valueOf(mobilenumberId));
        }
        return mobilenumber;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public MobileNumber update(MobileNumber mobilenumber) throws EntityNotFoundException {
        LOGGER.debug("Updating MobileNumber with information: {}", mobilenumber);
        this.wmGenericDao.update(mobilenumber);

        Integer mobilenumberId = mobilenumber.getIdCellphone();

        return this.wmGenericDao.findById(mobilenumberId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public MobileNumber delete(Integer mobilenumberId) throws EntityNotFoundException {
        LOGGER.debug("Deleting MobileNumber with id: {}", mobilenumberId);
        MobileNumber deleted = this.wmGenericDao.findById(mobilenumberId);
        if (deleted == null) {
            LOGGER.debug("No MobileNumber found with id: {}", mobilenumberId);
            throw new EntityNotFoundException(String.valueOf(mobilenumberId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<MobileNumber> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MobileNumbers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<MobileNumber> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MobileNumbers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table MobileNumber to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<MobileNumber> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

