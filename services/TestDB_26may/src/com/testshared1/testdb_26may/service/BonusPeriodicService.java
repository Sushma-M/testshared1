/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.BonusPeriodic;

/**
 * Service object for domain model class BonusPeriodic.
 *
 * @see {@link BonusPeriodic}
 */
public interface BonusPeriodicService {

    /**
     * Creates a new BonusPeriodic.
     *
     * @param bonusPeriodic The information of the created CompositeTable.
     * @return The created BonusPeriodic.
     */
	BonusPeriodic create(BonusPeriodic bonusPeriodic);


	/**
	 * Finds BonusPeriodic by id.
	 *
	 * @param bonusPeriodicId The id of the wanted BonusPeriodic.
	 * @return The found BonusPeriodic. If no BonusPeriodic is found, this method returns null.
	 */
	BonusPeriodic getById(Integer bonusPeriodicId) throws EntityNotFoundException;

	/**
	 * Updates the information of a BonusPeriodic.
	 *
	 * @param bonusPeriodic The information of the updated BonusPeriodic.
	 * @return The updated BonusPeriodic.
     *
	 * @throws EntityNotFoundException if no BonusPeriodic is found with given id.
	 */
	BonusPeriodic update(BonusPeriodic bonusPeriodic) throws EntityNotFoundException;

    /**
	 * Deletes a BonusPeriodic.
	 *
	 * @param bonusPeriodicId The id of the deleted BonusPeriodic.
	 * @return The deleted BonusPeriodic.
     *
	 * @throws EntityNotFoundException if no BonusPeriodic is found with the given id.
	 */
	BonusPeriodic delete(Integer bonusPeriodicId) throws EntityNotFoundException;

	/**
	 * Finds all BonusPeriodics.
	 *
	 * @return A list of BonusPeriodics.
	 */
    @Deprecated
	Page<BonusPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all BonusPeriodics.
	 * @return A list of BonusPeriodics.
	 */
    Page<BonusPeriodic> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BonusPeriodics in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the BonusPeriodic.
	 */
	long count(String query);

    Page<BonusPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

