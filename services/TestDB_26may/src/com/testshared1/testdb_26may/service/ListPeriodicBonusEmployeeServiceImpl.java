/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListPeriodicBonusEmployee;

/**
 * ServiceImpl object for domain model class ListPeriodicBonusEmployee.
 *
 * @see ListPeriodicBonusEmployee
 */
@Service("TestDB_26may.ListPeriodicBonusEmployeeService")
public class ListPeriodicBonusEmployeeServiceImpl implements ListPeriodicBonusEmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicBonusEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListPeriodicBonusEmployeeDao")
    private WMGenericDao<ListPeriodicBonusEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListPeriodicBonusEmployee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListPeriodicBonusEmployee create(ListPeriodicBonusEmployee listperiodicbonusemployee) {
        LOGGER.debug("Creating a new ListPeriodicBonusEmployee with information: {}", listperiodicbonusemployee);
        return this.wmGenericDao.create(listperiodicbonusemployee);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicBonusEmployee getById(Integer listperiodicbonusemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListPeriodicBonusEmployee by id: {}", listperiodicbonusemployeeId);
        ListPeriodicBonusEmployee listperiodicbonusemployee = this.wmGenericDao.findById(listperiodicbonusemployeeId);
        if (listperiodicbonusemployee == null){
            LOGGER.debug("No ListPeriodicBonusEmployee found with id: {}", listperiodicbonusemployeeId);
            throw new EntityNotFoundException(String.valueOf(listperiodicbonusemployeeId));
        }
        return listperiodicbonusemployee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicBonusEmployee update(ListPeriodicBonusEmployee listperiodicbonusemployee) throws EntityNotFoundException {
        LOGGER.debug("Updating ListPeriodicBonusEmployee with information: {}", listperiodicbonusemployee);
        this.wmGenericDao.update(listperiodicbonusemployee);

        Integer listperiodicbonusemployeeId = listperiodicbonusemployee.getIdListPeriodicBonusEmployee();

        return this.wmGenericDao.findById(listperiodicbonusemployeeId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicBonusEmployee delete(Integer listperiodicbonusemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicBonusEmployee with id: {}", listperiodicbonusemployeeId);
        ListPeriodicBonusEmployee deleted = this.wmGenericDao.findById(listperiodicbonusemployeeId);
        if (deleted == null) {
            LOGGER.debug("No ListPeriodicBonusEmployee found with id: {}", listperiodicbonusemployeeId);
            throw new EntityNotFoundException(String.valueOf(listperiodicbonusemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListPeriodicBonusEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListPeriodicBonusEmployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListPeriodicBonusEmployee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListPeriodicBonusEmployees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListPeriodicBonusEmployee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListPeriodicBonusEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

