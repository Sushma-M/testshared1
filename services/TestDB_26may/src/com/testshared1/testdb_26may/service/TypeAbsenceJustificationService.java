/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeAbsenceJustification;

/**
 * Service object for domain model class TypeAbsenceJustification.
 *
 * @see {@link TypeAbsenceJustification}
 */
public interface TypeAbsenceJustificationService {

    /**
     * Creates a new TypeAbsenceJustification.
     *
     * @param typeAbsenceJustification The information of the created CompositeTable.
     * @return The created TypeAbsenceJustification.
     */
	TypeAbsenceJustification create(TypeAbsenceJustification typeAbsenceJustification);


	/**
	 * Finds TypeAbsenceJustification by id.
	 *
	 * @param typeAbsenceJustificationId The id of the wanted TypeAbsenceJustification.
	 * @return The found TypeAbsenceJustification. If no TypeAbsenceJustification is found, this method returns null.
	 */
	TypeAbsenceJustification getById(Integer typeAbsenceJustificationId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeAbsenceJustification.
	 *
	 * @param typeAbsenceJustification The information of the updated TypeAbsenceJustification.
	 * @return The updated TypeAbsenceJustification.
     *
	 * @throws EntityNotFoundException if no TypeAbsenceJustification is found with given id.
	 */
	TypeAbsenceJustification update(TypeAbsenceJustification typeAbsenceJustification) throws EntityNotFoundException;

    /**
	 * Deletes a TypeAbsenceJustification.
	 *
	 * @param typeAbsenceJustificationId The id of the deleted TypeAbsenceJustification.
	 * @return The deleted TypeAbsenceJustification.
     *
	 * @throws EntityNotFoundException if no TypeAbsenceJustification is found with the given id.
	 */
	TypeAbsenceJustification delete(Integer typeAbsenceJustificationId) throws EntityNotFoundException;

	/**
	 * Finds all TypeAbsenceJustifications.
	 *
	 * @return A list of TypeAbsenceJustifications.
	 */
    @Deprecated
	Page<TypeAbsenceJustification> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeAbsenceJustifications.
	 * @return A list of TypeAbsenceJustifications.
	 */
    Page<TypeAbsenceJustification> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeAbsenceJustifications in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeAbsenceJustification.
	 */
	long count(String query);

    Page<TypeAbsenceJustification> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

