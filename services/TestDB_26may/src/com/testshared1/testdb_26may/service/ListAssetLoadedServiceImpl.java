/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListAssetLoaded;

/**
 * ServiceImpl object for domain model class ListAssetLoaded.
 *
 * @see ListAssetLoaded
 */
@Service("TestDB_26may.ListAssetLoadedService")
public class ListAssetLoadedServiceImpl implements ListAssetLoadedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetLoadedServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListAssetLoadedDao")
    private WMGenericDao<ListAssetLoaded, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListAssetLoaded, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListAssetLoaded create(ListAssetLoaded listassetloaded) {
        LOGGER.debug("Creating a new ListAssetLoaded with information: {}", listassetloaded);
        return this.wmGenericDao.create(listassetloaded);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetLoaded getById(Integer listassetloadedId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListAssetLoaded by id: {}", listassetloadedId);
        ListAssetLoaded listassetloaded = this.wmGenericDao.findById(listassetloadedId);
        if (listassetloaded == null){
            LOGGER.debug("No ListAssetLoaded found with id: {}", listassetloadedId);
            throw new EntityNotFoundException(String.valueOf(listassetloadedId));
        }
        return listassetloaded;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetLoaded update(ListAssetLoaded listassetloaded) throws EntityNotFoundException {
        LOGGER.debug("Updating ListAssetLoaded with information: {}", listassetloaded);
        this.wmGenericDao.update(listassetloaded);

        Integer listassetloadedId = listassetloaded.getIdListAssetLoaded();

        return this.wmGenericDao.findById(listassetloadedId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListAssetLoaded delete(Integer listassetloadedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetLoaded with id: {}", listassetloadedId);
        ListAssetLoaded deleted = this.wmGenericDao.findById(listassetloadedId);
        if (deleted == null) {
            LOGGER.debug("No ListAssetLoaded found with id: {}", listassetloadedId);
            throw new EntityNotFoundException(String.valueOf(listassetloadedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListAssetLoaded> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListAssetLoadeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListAssetLoaded> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListAssetLoadeds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListAssetLoaded to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListAssetLoaded> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

