/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListEmployeePhone;

/**
 * Service object for domain model class ListEmployeePhone.
 *
 * @see {@link ListEmployeePhone}
 */
public interface ListEmployeePhoneService {

    /**
     * Creates a new ListEmployeePhone.
     *
     * @param listEmployeePhone The information of the created CompositeTable.
     * @return The created ListEmployeePhone.
     */
	ListEmployeePhone create(ListEmployeePhone listEmployeePhone);


	/**
	 * Finds ListEmployeePhone by id.
	 *
	 * @param listEmployeePhoneId The id of the wanted ListEmployeePhone.
	 * @return The found ListEmployeePhone. If no ListEmployeePhone is found, this method returns null.
	 */
	ListEmployeePhone getById(Integer listEmployeePhoneId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ListEmployeePhone.
	 *
	 * @param listEmployeePhone The information of the updated ListEmployeePhone.
	 * @return The updated ListEmployeePhone.
     *
	 * @throws EntityNotFoundException if no ListEmployeePhone is found with given id.
	 */
	ListEmployeePhone update(ListEmployeePhone listEmployeePhone) throws EntityNotFoundException;

    /**
	 * Deletes a ListEmployeePhone.
	 *
	 * @param listEmployeePhoneId The id of the deleted ListEmployeePhone.
	 * @return The deleted ListEmployeePhone.
     *
	 * @throws EntityNotFoundException if no ListEmployeePhone is found with the given id.
	 */
	ListEmployeePhone delete(Integer listEmployeePhoneId) throws EntityNotFoundException;

	/**
	 * Finds all ListEmployeePhones.
	 *
	 * @return A list of ListEmployeePhones.
	 */
    @Deprecated
	Page<ListEmployeePhone> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ListEmployeePhones.
	 * @return A list of ListEmployeePhones.
	 */
    Page<ListEmployeePhone> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ListEmployeePhones in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ListEmployeePhone.
	 */
	long count(String query);

    Page<ListEmployeePhone> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

