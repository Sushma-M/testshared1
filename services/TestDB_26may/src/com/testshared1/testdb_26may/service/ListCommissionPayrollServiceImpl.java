/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListCommissionPayroll;

/**
 * ServiceImpl object for domain model class ListCommissionPayroll.
 *
 * @see ListCommissionPayroll
 */
@Service("TestDB_26may.ListCommissionPayrollService")
public class ListCommissionPayrollServiceImpl implements ListCommissionPayrollService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCommissionPayrollServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListCommissionPayrollDao")
    private WMGenericDao<ListCommissionPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListCommissionPayroll, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListCommissionPayroll create(ListCommissionPayroll listcommissionpayroll) {
        LOGGER.debug("Creating a new ListCommissionPayroll with information: {}", listcommissionpayroll);
        return this.wmGenericDao.create(listcommissionpayroll);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListCommissionPayroll getById(Integer listcommissionpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListCommissionPayroll by id: {}", listcommissionpayrollId);
        ListCommissionPayroll listcommissionpayroll = this.wmGenericDao.findById(listcommissionpayrollId);
        if (listcommissionpayroll == null){
            LOGGER.debug("No ListCommissionPayroll found with id: {}", listcommissionpayrollId);
            throw new EntityNotFoundException(String.valueOf(listcommissionpayrollId));
        }
        return listcommissionpayroll;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListCommissionPayroll update(ListCommissionPayroll listcommissionpayroll) throws EntityNotFoundException {
        LOGGER.debug("Updating ListCommissionPayroll with information: {}", listcommissionpayroll);
        this.wmGenericDao.update(listcommissionpayroll);

        Integer listcommissionpayrollId = listcommissionpayroll.getIdListCommissionPayroll();

        return this.wmGenericDao.findById(listcommissionpayrollId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListCommissionPayroll delete(Integer listcommissionpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCommissionPayroll with id: {}", listcommissionpayrollId);
        ListCommissionPayroll deleted = this.wmGenericDao.findById(listcommissionpayrollId);
        if (deleted == null) {
            LOGGER.debug("No ListCommissionPayroll found with id: {}", listcommissionpayrollId);
            throw new EntityNotFoundException(String.valueOf(listcommissionpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListCommissionPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListCommissionPayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListCommissionPayroll> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListCommissionPayrolls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListCommissionPayroll to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListCommissionPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

