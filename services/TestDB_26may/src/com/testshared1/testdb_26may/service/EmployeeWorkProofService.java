/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeWorkProof;

/**
 * Service object for domain model class EmployeeWorkProof.
 *
 * @see {@link EmployeeWorkProof}
 */
public interface EmployeeWorkProofService {

    /**
     * Creates a new EmployeeWorkProof.
     *
     * @param employeeWorkProof The information of the created CompositeTable.
     * @return The created EmployeeWorkProof.
     */
	EmployeeWorkProof create(EmployeeWorkProof employeeWorkProof);


	/**
	 * Finds EmployeeWorkProof by id.
	 *
	 * @param employeeWorkProofId The id of the wanted EmployeeWorkProof.
	 * @return The found EmployeeWorkProof. If no EmployeeWorkProof is found, this method returns null.
	 */
	EmployeeWorkProof getById(Integer employeeWorkProofId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeWorkProof.
	 *
	 * @param employeeWorkProof The information of the updated EmployeeWorkProof.
	 * @return The updated EmployeeWorkProof.
     *
	 * @throws EntityNotFoundException if no EmployeeWorkProof is found with given id.
	 */
	EmployeeWorkProof update(EmployeeWorkProof employeeWorkProof) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeWorkProof.
	 *
	 * @param employeeWorkProofId The id of the deleted EmployeeWorkProof.
	 * @return The deleted EmployeeWorkProof.
     *
	 * @throws EntityNotFoundException if no EmployeeWorkProof is found with the given id.
	 */
	EmployeeWorkProof delete(Integer employeeWorkProofId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeWorkProofs.
	 *
	 * @return A list of EmployeeWorkProofs.
	 */
    @Deprecated
	Page<EmployeeWorkProof> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeWorkProofs.
	 * @return A list of EmployeeWorkProofs.
	 */
    Page<EmployeeWorkProof> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeWorkProofs in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeWorkProof.
	 */
	long count(String query);

    Page<EmployeeWorkProof> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

