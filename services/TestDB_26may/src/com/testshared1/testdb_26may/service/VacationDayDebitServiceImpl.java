/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.VacationDayDebit;

/**
 * ServiceImpl object for domain model class VacationDayDebit.
 *
 * @see VacationDayDebit
 */
@Service("TestDB_26may.VacationDayDebitService")
public class VacationDayDebitServiceImpl implements VacationDayDebitService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VacationDayDebitServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.VacationDayDebitDao")
    private WMGenericDao<VacationDayDebit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VacationDayDebit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public VacationDayDebit create(VacationDayDebit vacationdaydebit) {
        LOGGER.debug("Creating a new VacationDayDebit with information: {}", vacationdaydebit);
        return this.wmGenericDao.create(vacationdaydebit);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public VacationDayDebit getById(Integer vacationdaydebitId) throws EntityNotFoundException {
        LOGGER.debug("Finding VacationDayDebit by id: {}", vacationdaydebitId);
        VacationDayDebit vacationdaydebit = this.wmGenericDao.findById(vacationdaydebitId);
        if (vacationdaydebit == null){
            LOGGER.debug("No VacationDayDebit found with id: {}", vacationdaydebitId);
            throw new EntityNotFoundException(String.valueOf(vacationdaydebitId));
        }
        return vacationdaydebit;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public VacationDayDebit update(VacationDayDebit vacationdaydebit) throws EntityNotFoundException {
        LOGGER.debug("Updating VacationDayDebit with information: {}", vacationdaydebit);
        this.wmGenericDao.update(vacationdaydebit);

        Integer vacationdaydebitId = vacationdaydebit.getIdVacationDayDebit();

        return this.wmGenericDao.findById(vacationdaydebitId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public VacationDayDebit delete(Integer vacationdaydebitId) throws EntityNotFoundException {
        LOGGER.debug("Deleting VacationDayDebit with id: {}", vacationdaydebitId);
        VacationDayDebit deleted = this.wmGenericDao.findById(vacationdaydebitId);
        if (deleted == null) {
            LOGGER.debug("No VacationDayDebit found with id: {}", vacationdaydebitId);
            throw new EntityNotFoundException(String.valueOf(vacationdaydebitId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<VacationDayDebit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VacationDayDebits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<VacationDayDebit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VacationDayDebits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table VacationDayDebit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<VacationDayDebit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

