/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.IncidenceEmployee;

/**
 * ServiceImpl object for domain model class IncidenceEmployee.
 *
 * @see IncidenceEmployee
 */
@Service("TestDB_26may.IncidenceEmployeeService")
public class IncidenceEmployeeServiceImpl implements IncidenceEmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IncidenceEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.IncidenceEmployeeDao")
    private WMGenericDao<IncidenceEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IncidenceEmployee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public IncidenceEmployee create(IncidenceEmployee incidenceemployee) {
        LOGGER.debug("Creating a new IncidenceEmployee with information: {}", incidenceemployee);
        return this.wmGenericDao.create(incidenceemployee);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public IncidenceEmployee getById(Integer incidenceemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding IncidenceEmployee by id: {}", incidenceemployeeId);
        IncidenceEmployee incidenceemployee = this.wmGenericDao.findById(incidenceemployeeId);
        if (incidenceemployee == null){
            LOGGER.debug("No IncidenceEmployee found with id: {}", incidenceemployeeId);
            throw new EntityNotFoundException(String.valueOf(incidenceemployeeId));
        }
        return incidenceemployee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public IncidenceEmployee update(IncidenceEmployee incidenceemployee) throws EntityNotFoundException {
        LOGGER.debug("Updating IncidenceEmployee with information: {}", incidenceemployee);
        this.wmGenericDao.update(incidenceemployee);

        Integer incidenceemployeeId = incidenceemployee.getIdIncidenceEmployee();

        return this.wmGenericDao.findById(incidenceemployeeId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public IncidenceEmployee delete(Integer incidenceemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IncidenceEmployee with id: {}", incidenceemployeeId);
        IncidenceEmployee deleted = this.wmGenericDao.findById(incidenceemployeeId);
        if (deleted == null) {
            LOGGER.debug("No IncidenceEmployee found with id: {}", incidenceemployeeId);
            throw new EntityNotFoundException(String.valueOf(incidenceemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<IncidenceEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IncidenceEmployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<IncidenceEmployee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IncidenceEmployees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table IncidenceEmployee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<IncidenceEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

