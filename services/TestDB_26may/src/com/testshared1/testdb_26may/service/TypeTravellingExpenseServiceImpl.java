/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeTravellingExpense;

/**
 * ServiceImpl object for domain model class TypeTravellingExpense.
 *
 * @see TypeTravellingExpense
 */
@Service("TestDB_26may.TypeTravellingExpenseService")
public class TypeTravellingExpenseServiceImpl implements TypeTravellingExpenseService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeTravellingExpenseServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeTravellingExpenseDao")
    private WMGenericDao<TypeTravellingExpense, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeTravellingExpense, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeTravellingExpense create(TypeTravellingExpense typetravellingexpense) {
        LOGGER.debug("Creating a new TypeTravellingExpense with information: {}", typetravellingexpense);
        return this.wmGenericDao.create(typetravellingexpense);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeTravellingExpense getById(Integer typetravellingexpenseId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeTravellingExpense by id: {}", typetravellingexpenseId);
        TypeTravellingExpense typetravellingexpense = this.wmGenericDao.findById(typetravellingexpenseId);
        if (typetravellingexpense == null){
            LOGGER.debug("No TypeTravellingExpense found with id: {}", typetravellingexpenseId);
            throw new EntityNotFoundException(String.valueOf(typetravellingexpenseId));
        }
        return typetravellingexpense;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeTravellingExpense update(TypeTravellingExpense typetravellingexpense) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeTravellingExpense with information: {}", typetravellingexpense);
        this.wmGenericDao.update(typetravellingexpense);

        Integer typetravellingexpenseId = typetravellingexpense.getIdTypeTravellingExpense();

        return this.wmGenericDao.findById(typetravellingexpenseId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeTravellingExpense delete(Integer typetravellingexpenseId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeTravellingExpense with id: {}", typetravellingexpenseId);
        TypeTravellingExpense deleted = this.wmGenericDao.findById(typetravellingexpenseId);
        if (deleted == null) {
            LOGGER.debug("No TypeTravellingExpense found with id: {}", typetravellingexpenseId);
            throw new EntityNotFoundException(String.valueOf(typetravellingexpenseId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeTravellingExpense> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeTravellingExpenses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeTravellingExpense> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeTravellingExpenses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeTravellingExpense to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeTravellingExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

