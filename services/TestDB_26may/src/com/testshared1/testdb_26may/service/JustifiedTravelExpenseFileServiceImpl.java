/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.JustifiedTravelExpenseFile;

/**
 * ServiceImpl object for domain model class JustifiedTravelExpenseFile.
 *
 * @see JustifiedTravelExpenseFile
 */
@Service("TestDB_26may.JustifiedTravelExpenseFileService")
public class JustifiedTravelExpenseFileServiceImpl implements JustifiedTravelExpenseFileService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedTravelExpenseFileServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.JustifiedTravelExpenseFileDao")
    private WMGenericDao<JustifiedTravelExpenseFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JustifiedTravelExpenseFile, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public JustifiedTravelExpenseFile create(JustifiedTravelExpenseFile justifiedtravelexpensefile) {
        LOGGER.debug("Creating a new JustifiedTravelExpenseFile with information: {}", justifiedtravelexpensefile);
        return this.wmGenericDao.create(justifiedtravelexpensefile);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedTravelExpenseFile getById(Integer justifiedtravelexpensefileId) throws EntityNotFoundException {
        LOGGER.debug("Finding JustifiedTravelExpenseFile by id: {}", justifiedtravelexpensefileId);
        JustifiedTravelExpenseFile justifiedtravelexpensefile = this.wmGenericDao.findById(justifiedtravelexpensefileId);
        if (justifiedtravelexpensefile == null){
            LOGGER.debug("No JustifiedTravelExpenseFile found with id: {}", justifiedtravelexpensefileId);
            throw new EntityNotFoundException(String.valueOf(justifiedtravelexpensefileId));
        }
        return justifiedtravelexpensefile;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedTravelExpenseFile update(JustifiedTravelExpenseFile justifiedtravelexpensefile) throws EntityNotFoundException {
        LOGGER.debug("Updating JustifiedTravelExpenseFile with information: {}", justifiedtravelexpensefile);
        this.wmGenericDao.update(justifiedtravelexpensefile);

        Integer justifiedtravelexpensefileId = justifiedtravelexpensefile.getIdJustifiedTravelExpenseFile();

        return this.wmGenericDao.findById(justifiedtravelexpensefileId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedTravelExpenseFile delete(Integer justifiedtravelexpensefileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedTravelExpenseFile with id: {}", justifiedtravelexpensefileId);
        JustifiedTravelExpenseFile deleted = this.wmGenericDao.findById(justifiedtravelexpensefileId);
        if (deleted == null) {
            LOGGER.debug("No JustifiedTravelExpenseFile found with id: {}", justifiedtravelexpensefileId);
            throw new EntityNotFoundException(String.valueOf(justifiedtravelexpensefileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<JustifiedTravelExpenseFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JustifiedTravelExpenseFiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<JustifiedTravelExpenseFile> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JustifiedTravelExpenseFiles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table JustifiedTravelExpenseFile to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<JustifiedTravelExpenseFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

