/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeAlert;

/**
 * Service object for domain model class TypeAlert.
 *
 * @see {@link TypeAlert}
 */
public interface TypeAlertService {

    /**
     * Creates a new TypeAlert.
     *
     * @param typeAlert The information of the created CompositeTable.
     * @return The created TypeAlert.
     */
	TypeAlert create(TypeAlert typeAlert);


	/**
	 * Finds TypeAlert by id.
	 *
	 * @param typeAlertId The id of the wanted TypeAlert.
	 * @return The found TypeAlert. If no TypeAlert is found, this method returns null.
	 */
	TypeAlert getById(Integer typeAlertId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeAlert.
	 *
	 * @param typeAlert The information of the updated TypeAlert.
	 * @return The updated TypeAlert.
     *
	 * @throws EntityNotFoundException if no TypeAlert is found with given id.
	 */
	TypeAlert update(TypeAlert typeAlert) throws EntityNotFoundException;

    /**
	 * Deletes a TypeAlert.
	 *
	 * @param typeAlertId The id of the deleted TypeAlert.
	 * @return The deleted TypeAlert.
     *
	 * @throws EntityNotFoundException if no TypeAlert is found with the given id.
	 */
	TypeAlert delete(Integer typeAlertId) throws EntityNotFoundException;

	/**
	 * Finds all TypeAlerts.
	 *
	 * @return A list of TypeAlerts.
	 */
    @Deprecated
	Page<TypeAlert> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeAlerts.
	 * @return A list of TypeAlerts.
	 */
    Page<TypeAlert> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeAlerts in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeAlert.
	 */
	long count(String query);

    Page<TypeAlert> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

