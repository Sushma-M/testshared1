/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.JustifiedAbsense;

/**
 * ServiceImpl object for domain model class JustifiedAbsense.
 *
 * @see JustifiedAbsense
 */
@Service("TestDB_26may.JustifiedAbsenseService")
public class JustifiedAbsenseServiceImpl implements JustifiedAbsenseService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedAbsenseServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.JustifiedAbsenseDao")
    private WMGenericDao<JustifiedAbsense, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JustifiedAbsense, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public JustifiedAbsense create(JustifiedAbsense justifiedabsense) {
        LOGGER.debug("Creating a new JustifiedAbsense with information: {}", justifiedabsense);
        return this.wmGenericDao.create(justifiedabsense);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedAbsense getById(Integer justifiedabsenseId) throws EntityNotFoundException {
        LOGGER.debug("Finding JustifiedAbsense by id: {}", justifiedabsenseId);
        JustifiedAbsense justifiedabsense = this.wmGenericDao.findById(justifiedabsenseId);
        if (justifiedabsense == null){
            LOGGER.debug("No JustifiedAbsense found with id: {}", justifiedabsenseId);
            throw new EntityNotFoundException(String.valueOf(justifiedabsenseId));
        }
        return justifiedabsense;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedAbsense update(JustifiedAbsense justifiedabsense) throws EntityNotFoundException {
        LOGGER.debug("Updating JustifiedAbsense with information: {}", justifiedabsense);
        this.wmGenericDao.update(justifiedabsense);

        Integer justifiedabsenseId = justifiedabsense.getIdJustifiedAbsense();

        return this.wmGenericDao.findById(justifiedabsenseId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public JustifiedAbsense delete(Integer justifiedabsenseId) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedAbsense with id: {}", justifiedabsenseId);
        JustifiedAbsense deleted = this.wmGenericDao.findById(justifiedabsenseId);
        if (deleted == null) {
            LOGGER.debug("No JustifiedAbsense found with id: {}", justifiedabsenseId);
            throw new EntityNotFoundException(String.valueOf(justifiedabsenseId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<JustifiedAbsense> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JustifiedAbsenses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<JustifiedAbsense> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JustifiedAbsenses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table JustifiedAbsense to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<JustifiedAbsense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

