/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.JustifiedTravelExpenseFile;

/**
 * Service object for domain model class JustifiedTravelExpenseFile.
 *
 * @see {@link JustifiedTravelExpenseFile}
 */
public interface JustifiedTravelExpenseFileService {

    /**
     * Creates a new JustifiedTravelExpenseFile.
     *
     * @param justifiedTravelExpenseFile The information of the created CompositeTable.
     * @return The created JustifiedTravelExpenseFile.
     */
	JustifiedTravelExpenseFile create(JustifiedTravelExpenseFile justifiedTravelExpenseFile);


	/**
	 * Finds JustifiedTravelExpenseFile by id.
	 *
	 * @param justifiedTravelExpenseFileId The id of the wanted JustifiedTravelExpenseFile.
	 * @return The found JustifiedTravelExpenseFile. If no JustifiedTravelExpenseFile is found, this method returns null.
	 */
	JustifiedTravelExpenseFile getById(Integer justifiedTravelExpenseFileId) throws EntityNotFoundException;

	/**
	 * Updates the information of a JustifiedTravelExpenseFile.
	 *
	 * @param justifiedTravelExpenseFile The information of the updated JustifiedTravelExpenseFile.
	 * @return The updated JustifiedTravelExpenseFile.
     *
	 * @throws EntityNotFoundException if no JustifiedTravelExpenseFile is found with given id.
	 */
	JustifiedTravelExpenseFile update(JustifiedTravelExpenseFile justifiedTravelExpenseFile) throws EntityNotFoundException;

    /**
	 * Deletes a JustifiedTravelExpenseFile.
	 *
	 * @param justifiedTravelExpenseFileId The id of the deleted JustifiedTravelExpenseFile.
	 * @return The deleted JustifiedTravelExpenseFile.
     *
	 * @throws EntityNotFoundException if no JustifiedTravelExpenseFile is found with the given id.
	 */
	JustifiedTravelExpenseFile delete(Integer justifiedTravelExpenseFileId) throws EntityNotFoundException;

	/**
	 * Finds all JustifiedTravelExpenseFiles.
	 *
	 * @return A list of JustifiedTravelExpenseFiles.
	 */
    @Deprecated
	Page<JustifiedTravelExpenseFile> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all JustifiedTravelExpenseFiles.
	 * @return A list of JustifiedTravelExpenseFiles.
	 */
    Page<JustifiedTravelExpenseFile> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the JustifiedTravelExpenseFiles in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the JustifiedTravelExpenseFile.
	 */
	long count(String query);

    Page<JustifiedTravelExpenseFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

