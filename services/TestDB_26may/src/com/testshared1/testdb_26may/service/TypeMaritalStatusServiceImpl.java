/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeMaritalStatus;

/**
 * ServiceImpl object for domain model class TypeMaritalStatus.
 *
 * @see TypeMaritalStatus
 */
@Service("TestDB_26may.TypeMaritalStatusService")
public class TypeMaritalStatusServiceImpl implements TypeMaritalStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeMaritalStatusServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.TypeMaritalStatusDao")
    private WMGenericDao<TypeMaritalStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeMaritalStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public TypeMaritalStatus create(TypeMaritalStatus typemaritalstatus) {
        LOGGER.debug("Creating a new TypeMaritalStatus with information: {}", typemaritalstatus);
        return this.wmGenericDao.create(typemaritalstatus);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeMaritalStatus getById(Integer typemaritalstatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding TypeMaritalStatus by id: {}", typemaritalstatusId);
        TypeMaritalStatus typemaritalstatus = this.wmGenericDao.findById(typemaritalstatusId);
        if (typemaritalstatus == null){
            LOGGER.debug("No TypeMaritalStatus found with id: {}", typemaritalstatusId);
            throw new EntityNotFoundException(String.valueOf(typemaritalstatusId));
        }
        return typemaritalstatus;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public TypeMaritalStatus update(TypeMaritalStatus typemaritalstatus) throws EntityNotFoundException {
        LOGGER.debug("Updating TypeMaritalStatus with information: {}", typemaritalstatus);
        this.wmGenericDao.update(typemaritalstatus);

        Integer typemaritalstatusId = typemaritalstatus.getIdTypeEmployeeTermination();

        return this.wmGenericDao.findById(typemaritalstatusId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public TypeMaritalStatus delete(Integer typemaritalstatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeMaritalStatus with id: {}", typemaritalstatusId);
        TypeMaritalStatus deleted = this.wmGenericDao.findById(typemaritalstatusId);
        if (deleted == null) {
            LOGGER.debug("No TypeMaritalStatus found with id: {}", typemaritalstatusId);
            throw new EntityNotFoundException(String.valueOf(typemaritalstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<TypeMaritalStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TypeMaritalStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<TypeMaritalStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TypeMaritalStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table TypeMaritalStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<TypeMaritalStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

