/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.AssetReintegrationDocument;

/**
 * ServiceImpl object for domain model class AssetReintegrationDocument.
 *
 * @see AssetReintegrationDocument
 */
@Service("TestDB_26may.AssetReintegrationDocumentService")
public class AssetReintegrationDocumentServiceImpl implements AssetReintegrationDocumentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetReintegrationDocumentServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetReintegrationDocumentDao")
    private WMGenericDao<AssetReintegrationDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetReintegrationDocument, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public AssetReintegrationDocument create(AssetReintegrationDocument assetreintegrationdocument) {
        LOGGER.debug("Creating a new AssetReintegrationDocument with information: {}", assetreintegrationdocument);
        return this.wmGenericDao.create(assetreintegrationdocument);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public AssetReintegrationDocument getById(Integer assetreintegrationdocumentId) throws EntityNotFoundException {
        LOGGER.debug("Finding AssetReintegrationDocument by id: {}", assetreintegrationdocumentId);
        AssetReintegrationDocument assetreintegrationdocument = this.wmGenericDao.findById(assetreintegrationdocumentId);
        if (assetreintegrationdocument == null){
            LOGGER.debug("No AssetReintegrationDocument found with id: {}", assetreintegrationdocumentId);
            throw new EntityNotFoundException(String.valueOf(assetreintegrationdocumentId));
        }
        return assetreintegrationdocument;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public AssetReintegrationDocument update(AssetReintegrationDocument assetreintegrationdocument) throws EntityNotFoundException {
        LOGGER.debug("Updating AssetReintegrationDocument with information: {}", assetreintegrationdocument);
        this.wmGenericDao.update(assetreintegrationdocument);

        Integer assetreintegrationdocumentId = assetreintegrationdocument.getIdAssetReintegrationDocument();

        return this.wmGenericDao.findById(assetreintegrationdocumentId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public AssetReintegrationDocument delete(Integer assetreintegrationdocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetReintegrationDocument with id: {}", assetreintegrationdocumentId);
        AssetReintegrationDocument deleted = this.wmGenericDao.findById(assetreintegrationdocumentId);
        if (deleted == null) {
            LOGGER.debug("No AssetReintegrationDocument found with id: {}", assetreintegrationdocumentId);
            throw new EntityNotFoundException(String.valueOf(assetreintegrationdocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<AssetReintegrationDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AssetReintegrationDocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<AssetReintegrationDocument> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AssetReintegrationDocuments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table AssetReintegrationDocument to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<AssetReintegrationDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

