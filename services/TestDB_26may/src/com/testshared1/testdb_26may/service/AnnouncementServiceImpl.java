/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Announcement;

/**
 * ServiceImpl object for domain model class Announcement.
 *
 * @see Announcement
 */
@Service("TestDB_26may.AnnouncementService")
public class AnnouncementServiceImpl implements AnnouncementService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnnouncementServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AnnouncementDao")
    private WMGenericDao<Announcement, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Announcement, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public Announcement create(Announcement announcement) {
        LOGGER.debug("Creating a new Announcement with information: {}", announcement);
        return this.wmGenericDao.create(announcement);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Announcement getById(Integer announcementId) throws EntityNotFoundException {
        LOGGER.debug("Finding Announcement by id: {}", announcementId);
        Announcement announcement = this.wmGenericDao.findById(announcementId);
        if (announcement == null){
            LOGGER.debug("No Announcement found with id: {}", announcementId);
            throw new EntityNotFoundException(String.valueOf(announcementId));
        }
        return announcement;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public Announcement update(Announcement announcement) throws EntityNotFoundException {
        LOGGER.debug("Updating Announcement with information: {}", announcement);
        this.wmGenericDao.update(announcement);

        Integer announcementId = announcement.getIdAnnouncement();

        return this.wmGenericDao.findById(announcementId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public Announcement delete(Integer announcementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Announcement with id: {}", announcementId);
        Announcement deleted = this.wmGenericDao.findById(announcementId);
        if (deleted == null) {
            LOGGER.debug("No Announcement found with id: {}", announcementId);
            throw new EntityNotFoundException(String.valueOf(announcementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<Announcement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Announcements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<Announcement> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Announcements");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table Announcement to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Announcement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

