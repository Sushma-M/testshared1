/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListAssetReintegrated;

/**
 * Service object for domain model class ListAssetReintegrated.
 *
 * @see {@link ListAssetReintegrated}
 */
public interface ListAssetReintegratedService {

    /**
     * Creates a new ListAssetReintegrated.
     *
     * @param listAssetReintegrated The information of the created CompositeTable.
     * @return The created ListAssetReintegrated.
     */
	ListAssetReintegrated create(ListAssetReintegrated listAssetReintegrated);


	/**
	 * Finds ListAssetReintegrated by id.
	 *
	 * @param listAssetReintegratedId The id of the wanted ListAssetReintegrated.
	 * @return The found ListAssetReintegrated. If no ListAssetReintegrated is found, this method returns null.
	 */
	ListAssetReintegrated getById(Integer listAssetReintegratedId) throws EntityNotFoundException;

	/**
	 * Updates the information of a ListAssetReintegrated.
	 *
	 * @param listAssetReintegrated The information of the updated ListAssetReintegrated.
	 * @return The updated ListAssetReintegrated.
     *
	 * @throws EntityNotFoundException if no ListAssetReintegrated is found with given id.
	 */
	ListAssetReintegrated update(ListAssetReintegrated listAssetReintegrated) throws EntityNotFoundException;

    /**
	 * Deletes a ListAssetReintegrated.
	 *
	 * @param listAssetReintegratedId The id of the deleted ListAssetReintegrated.
	 * @return The deleted ListAssetReintegrated.
     *
	 * @throws EntityNotFoundException if no ListAssetReintegrated is found with the given id.
	 */
	ListAssetReintegrated delete(Integer listAssetReintegratedId) throws EntityNotFoundException;

	/**
	 * Finds all ListAssetReintegrateds.
	 *
	 * @return A list of ListAssetReintegrateds.
	 */
    @Deprecated
	Page<ListAssetReintegrated> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all ListAssetReintegrateds.
	 * @return A list of ListAssetReintegrateds.
	 */
    Page<ListAssetReintegrated> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ListAssetReintegrateds in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the ListAssetReintegrated.
	 */
	long count(String query);

    Page<ListAssetReintegrated> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

