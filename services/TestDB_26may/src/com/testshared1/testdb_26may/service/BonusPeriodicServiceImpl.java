/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.BonusPeriodic;

/**
 * ServiceImpl object for domain model class BonusPeriodic.
 *
 * @see BonusPeriodic
 */
@Service("TestDB_26may.BonusPeriodicService")
public class BonusPeriodicServiceImpl implements BonusPeriodicService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BonusPeriodicServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.BonusPeriodicDao")
    private WMGenericDao<BonusPeriodic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BonusPeriodic, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public BonusPeriodic create(BonusPeriodic bonusperiodic) {
        LOGGER.debug("Creating a new BonusPeriodic with information: {}", bonusperiodic);
        return this.wmGenericDao.create(bonusperiodic);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public BonusPeriodic getById(Integer bonusperiodicId) throws EntityNotFoundException {
        LOGGER.debug("Finding BonusPeriodic by id: {}", bonusperiodicId);
        BonusPeriodic bonusperiodic = this.wmGenericDao.findById(bonusperiodicId);
        if (bonusperiodic == null){
            LOGGER.debug("No BonusPeriodic found with id: {}", bonusperiodicId);
            throw new EntityNotFoundException(String.valueOf(bonusperiodicId));
        }
        return bonusperiodic;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public BonusPeriodic update(BonusPeriodic bonusperiodic) throws EntityNotFoundException {
        LOGGER.debug("Updating BonusPeriodic with information: {}", bonusperiodic);
        this.wmGenericDao.update(bonusperiodic);

        Integer bonusperiodicId = bonusperiodic.getIdBonusPeriodic();

        return this.wmGenericDao.findById(bonusperiodicId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public BonusPeriodic delete(Integer bonusperiodicId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BonusPeriodic with id: {}", bonusperiodicId);
        BonusPeriodic deleted = this.wmGenericDao.findById(bonusperiodicId);
        if (deleted == null) {
            LOGGER.debug("No BonusPeriodic found with id: {}", bonusperiodicId);
            throw new EntityNotFoundException(String.valueOf(bonusperiodicId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<BonusPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BonusPeriodics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<BonusPeriodic> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BonusPeriodics");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table BonusPeriodic to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<BonusPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

