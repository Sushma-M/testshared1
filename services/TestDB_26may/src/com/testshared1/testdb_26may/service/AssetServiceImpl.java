/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Asset;

/**
 * ServiceImpl object for domain model class Asset.
 *
 * @see Asset
 */
@Service("TestDB_26may.AssetService")
public class AssetServiceImpl implements AssetService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssetDao")
    private WMGenericDao<Asset, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Asset, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public Asset create(Asset asset) {
        LOGGER.debug("Creating a new Asset with information: {}", asset);
        return this.wmGenericDao.create(asset);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Asset getById(Integer assetId) throws EntityNotFoundException {
        LOGGER.debug("Finding Asset by id: {}", assetId);
        Asset asset = this.wmGenericDao.findById(assetId);
        if (asset == null){
            LOGGER.debug("No Asset found with id: {}", assetId);
            throw new EntityNotFoundException(String.valueOf(assetId));
        }
        return asset;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public Asset update(Asset asset) throws EntityNotFoundException {
        LOGGER.debug("Updating Asset with information: {}", asset);
        this.wmGenericDao.update(asset);

        Integer assetId = asset.getIdAsset();

        return this.wmGenericDao.findById(assetId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public Asset delete(Integer assetId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Asset with id: {}", assetId);
        Asset deleted = this.wmGenericDao.findById(assetId);
        if (deleted == null) {
            LOGGER.debug("No Asset found with id: {}", assetId);
            throw new EntityNotFoundException(String.valueOf(assetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<Asset> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Assets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<Asset> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Assets");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table Asset to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Asset> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

