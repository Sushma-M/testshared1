/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Asset;

/**
 * Service object for domain model class Asset.
 *
 * @see {@link Asset}
 */
public interface AssetService {

    /**
     * Creates a new Asset.
     *
     * @param asset The information of the created CompositeTable.
     * @return The created Asset.
     */
	Asset create(Asset asset);


	/**
	 * Finds Asset by id.
	 *
	 * @param assetId The id of the wanted Asset.
	 * @return The found Asset. If no Asset is found, this method returns null.
	 */
	Asset getById(Integer assetId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Asset.
	 *
	 * @param asset The information of the updated Asset.
	 * @return The updated Asset.
     *
	 * @throws EntityNotFoundException if no Asset is found with given id.
	 */
	Asset update(Asset asset) throws EntityNotFoundException;

    /**
	 * Deletes a Asset.
	 *
	 * @param assetId The id of the deleted Asset.
	 * @return The deleted Asset.
     *
	 * @throws EntityNotFoundException if no Asset is found with the given id.
	 */
	Asset delete(Integer assetId) throws EntityNotFoundException;

	/**
	 * Finds all Assets.
	 *
	 * @return A list of Assets.
	 */
    @Deprecated
	Page<Asset> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Assets.
	 * @return A list of Assets.
	 */
    Page<Asset> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Assets in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Asset.
	 */
	long count(String query);

    Page<Asset> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

