/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.ListPeriodicDeductionEmployee;

/**
 * ServiceImpl object for domain model class ListPeriodicDeductionEmployee.
 *
 * @see ListPeriodicDeductionEmployee
 */
@Service("TestDB_26may.ListPeriodicDeductionEmployeeService")
public class ListPeriodicDeductionEmployeeServiceImpl implements ListPeriodicDeductionEmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.ListPeriodicDeductionEmployeeDao")
    private WMGenericDao<ListPeriodicDeductionEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListPeriodicDeductionEmployee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public ListPeriodicDeductionEmployee create(ListPeriodicDeductionEmployee listperiodicdeductionemployee) {
        LOGGER.debug("Creating a new ListPeriodicDeductionEmployee with information: {}", listperiodicdeductionemployee);
        return this.wmGenericDao.create(listperiodicdeductionemployee);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicDeductionEmployee getById(Integer listperiodicdeductionemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding ListPeriodicDeductionEmployee by id: {}", listperiodicdeductionemployeeId);
        ListPeriodicDeductionEmployee listperiodicdeductionemployee = this.wmGenericDao.findById(listperiodicdeductionemployeeId);
        if (listperiodicdeductionemployee == null){
            LOGGER.debug("No ListPeriodicDeductionEmployee found with id: {}", listperiodicdeductionemployeeId);
            throw new EntityNotFoundException(String.valueOf(listperiodicdeductionemployeeId));
        }
        return listperiodicdeductionemployee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicDeductionEmployee update(ListPeriodicDeductionEmployee listperiodicdeductionemployee) throws EntityNotFoundException {
        LOGGER.debug("Updating ListPeriodicDeductionEmployee with information: {}", listperiodicdeductionemployee);
        this.wmGenericDao.update(listperiodicdeductionemployee);

        Integer listperiodicdeductionemployeeId = listperiodicdeductionemployee.getIdListPeriodicDeductionEmployee();

        return this.wmGenericDao.findById(listperiodicdeductionemployeeId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public ListPeriodicDeductionEmployee delete(Integer listperiodicdeductionemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicDeductionEmployee with id: {}", listperiodicdeductionemployeeId);
        ListPeriodicDeductionEmployee deleted = this.wmGenericDao.findById(listperiodicdeductionemployeeId);
        if (deleted == null) {
            LOGGER.debug("No ListPeriodicDeductionEmployee found with id: {}", listperiodicdeductionemployeeId);
            throw new EntityNotFoundException(String.valueOf(listperiodicdeductionemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<ListPeriodicDeductionEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ListPeriodicDeductionEmployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<ListPeriodicDeductionEmployee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ListPeriodicDeductionEmployees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table ListPeriodicDeductionEmployee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<ListPeriodicDeductionEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

