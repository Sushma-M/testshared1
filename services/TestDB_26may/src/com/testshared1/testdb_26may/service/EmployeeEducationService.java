/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeEducation;

/**
 * Service object for domain model class EmployeeEducation.
 *
 * @see {@link EmployeeEducation}
 */
public interface EmployeeEducationService {

    /**
     * Creates a new EmployeeEducation.
     *
     * @param employeeEducation The information of the created CompositeTable.
     * @return The created EmployeeEducation.
     */
	EmployeeEducation create(EmployeeEducation employeeEducation);


	/**
	 * Finds EmployeeEducation by id.
	 *
	 * @param employeeEducationId The id of the wanted EmployeeEducation.
	 * @return The found EmployeeEducation. If no EmployeeEducation is found, this method returns null.
	 */
	EmployeeEducation getById(Integer employeeEducationId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeEducation.
	 *
	 * @param employeeEducation The information of the updated EmployeeEducation.
	 * @return The updated EmployeeEducation.
     *
	 * @throws EntityNotFoundException if no EmployeeEducation is found with given id.
	 */
	EmployeeEducation update(EmployeeEducation employeeEducation) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeEducation.
	 *
	 * @param employeeEducationId The id of the deleted EmployeeEducation.
	 * @return The deleted EmployeeEducation.
     *
	 * @throws EntityNotFoundException if no EmployeeEducation is found with the given id.
	 */
	EmployeeEducation delete(Integer employeeEducationId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeEducations.
	 *
	 * @return A list of EmployeeEducations.
	 */
    @Deprecated
	Page<EmployeeEducation> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeEducations.
	 * @return A list of EmployeeEducations.
	 */
    Page<EmployeeEducation> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeEducations in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeEducation.
	 */
	long count(String query);

    Page<EmployeeEducation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

