/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeMessage;

/**
 * ServiceImpl object for domain model class EmployeeMessage.
 *
 * @see EmployeeMessage
 */
@Service("TestDB_26may.EmployeeMessageService")
public class EmployeeMessageServiceImpl implements EmployeeMessageService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeMessageServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.EmployeeMessageDao")
    private WMGenericDao<EmployeeMessage, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeMessage, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public EmployeeMessage create(EmployeeMessage employeemessage) {
        LOGGER.debug("Creating a new EmployeeMessage with information: {}", employeemessage);
        return this.wmGenericDao.create(employeemessage);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeMessage getById(Integer employeemessageId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeMessage by id: {}", employeemessageId);
        EmployeeMessage employeemessage = this.wmGenericDao.findById(employeemessageId);
        if (employeemessage == null){
            LOGGER.debug("No EmployeeMessage found with id: {}", employeemessageId);
            throw new EntityNotFoundException(String.valueOf(employeemessageId));
        }
        return employeemessage;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeMessage update(EmployeeMessage employeemessage) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeMessage with information: {}", employeemessage);
        this.wmGenericDao.update(employeemessage);

        Integer employeemessageId = employeemessage.getIdEmployeeMessage();

        return this.wmGenericDao.findById(employeemessageId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public EmployeeMessage delete(Integer employeemessageId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeMessage with id: {}", employeemessageId);
        EmployeeMessage deleted = this.wmGenericDao.findById(employeemessageId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeMessage found with id: {}", employeemessageId);
            throw new EntityNotFoundException(String.valueOf(employeemessageId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<EmployeeMessage> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeMessages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<EmployeeMessage> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeMessages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table EmployeeMessage to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<EmployeeMessage> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

