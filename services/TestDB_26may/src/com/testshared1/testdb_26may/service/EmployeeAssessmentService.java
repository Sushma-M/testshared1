/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.EmployeeAssessment;

/**
 * Service object for domain model class EmployeeAssessment.
 *
 * @see {@link EmployeeAssessment}
 */
public interface EmployeeAssessmentService {

    /**
     * Creates a new EmployeeAssessment.
     *
     * @param employeeAssessment The information of the created CompositeTable.
     * @return The created EmployeeAssessment.
     */
	EmployeeAssessment create(EmployeeAssessment employeeAssessment);


	/**
	 * Finds EmployeeAssessment by id.
	 *
	 * @param employeeAssessmentId The id of the wanted EmployeeAssessment.
	 * @return The found EmployeeAssessment. If no EmployeeAssessment is found, this method returns null.
	 */
	EmployeeAssessment getById(Integer employeeAssessmentId) throws EntityNotFoundException;

	/**
	 * Updates the information of a EmployeeAssessment.
	 *
	 * @param employeeAssessment The information of the updated EmployeeAssessment.
	 * @return The updated EmployeeAssessment.
     *
	 * @throws EntityNotFoundException if no EmployeeAssessment is found with given id.
	 */
	EmployeeAssessment update(EmployeeAssessment employeeAssessment) throws EntityNotFoundException;

    /**
	 * Deletes a EmployeeAssessment.
	 *
	 * @param employeeAssessmentId The id of the deleted EmployeeAssessment.
	 * @return The deleted EmployeeAssessment.
     *
	 * @throws EntityNotFoundException if no EmployeeAssessment is found with the given id.
	 */
	EmployeeAssessment delete(Integer employeeAssessmentId) throws EntityNotFoundException;

	/**
	 * Finds all EmployeeAssessments.
	 *
	 * @return A list of EmployeeAssessments.
	 */
    @Deprecated
	Page<EmployeeAssessment> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all EmployeeAssessments.
	 * @return A list of EmployeeAssessments.
	 */
    Page<EmployeeAssessment> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeAssessments in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the EmployeeAssessment.
	 */
	long count(String query);

    Page<EmployeeAssessment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

