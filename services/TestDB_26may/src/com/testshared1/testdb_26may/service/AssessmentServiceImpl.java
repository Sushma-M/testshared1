/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.Assessment;

/**
 * ServiceImpl object for domain model class Assessment.
 *
 * @see Assessment
 */
@Service("TestDB_26may.AssessmentService")
public class AssessmentServiceImpl implements AssessmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentServiceImpl.class);

    @Autowired
    @Qualifier("TestDB_26may.AssessmentDao")
    private WMGenericDao<Assessment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Assessment, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
    @Override
	public Assessment create(Assessment assessment) {
        LOGGER.debug("Creating a new Assessment with information: {}", assessment);
        return this.wmGenericDao.create(assessment);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Assessment getById(Integer assessmentId) throws EntityNotFoundException {
        LOGGER.debug("Finding Assessment by id: {}", assessmentId);
        Assessment assessment = this.wmGenericDao.findById(assessmentId);
        if (assessment == null){
            LOGGER.debug("No Assessment found with id: {}", assessmentId);
            throw new EntityNotFoundException(String.valueOf(assessmentId));
        }
        return assessment;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDB_26mayTransactionManager")
	@Override
	public Assessment update(Assessment assessment) throws EntityNotFoundException {
        LOGGER.debug("Updating Assessment with information: {}", assessment);
        this.wmGenericDao.update(assessment);

        Integer assessmentId = assessment.getIdAssessment();

        return this.wmGenericDao.findById(assessmentId);
    }

    @Transactional(value = "TestDB_26mayTransactionManager")
	@Override
	public Assessment delete(Integer assessmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Assessment with id: {}", assessmentId);
        Assessment deleted = this.wmGenericDao.findById(assessmentId);
        if (deleted == null) {
            LOGGER.debug("No Assessment found with id: {}", assessmentId);
            throw new EntityNotFoundException(String.valueOf(assessmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public Page<Assessment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Assessments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Page<Assessment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Assessments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB_26may for table Assessment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDB_26mayTransactionManager")
    @SuppressWarnings("unchecked")
	@Override
    public Page<Assessment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable) {
        LOGGER.debug("Fetching all associated");
        return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
    }
}

