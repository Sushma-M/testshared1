/*Copyright (c) 2016-2017 testing.com All Rights Reserved.
 This software is the confidential and proprietary information of testing.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing.com*/

package com.testshared1.testdb_26may.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testshared1.testdb_26may.TypeEmployeeStatus;

/**
 * Service object for domain model class TypeEmployeeStatus.
 *
 * @see {@link TypeEmployeeStatus}
 */
public interface TypeEmployeeStatusService {

    /**
     * Creates a new TypeEmployeeStatus.
     *
     * @param typeEmployeeStatus The information of the created CompositeTable.
     * @return The created TypeEmployeeStatus.
     */
	TypeEmployeeStatus create(TypeEmployeeStatus typeEmployeeStatus);


	/**
	 * Finds TypeEmployeeStatus by id.
	 *
	 * @param typeEmployeeStatusId The id of the wanted TypeEmployeeStatus.
	 * @return The found TypeEmployeeStatus. If no TypeEmployeeStatus is found, this method returns null.
	 */
	TypeEmployeeStatus getById(Integer typeEmployeeStatusId) throws EntityNotFoundException;

	/**
	 * Updates the information of a TypeEmployeeStatus.
	 *
	 * @param typeEmployeeStatus The information of the updated TypeEmployeeStatus.
	 * @return The updated TypeEmployeeStatus.
     *
	 * @throws EntityNotFoundException if no TypeEmployeeStatus is found with given id.
	 */
	TypeEmployeeStatus update(TypeEmployeeStatus typeEmployeeStatus) throws EntityNotFoundException;

    /**
	 * Deletes a TypeEmployeeStatus.
	 *
	 * @param typeEmployeeStatusId The id of the deleted TypeEmployeeStatus.
	 * @return The deleted TypeEmployeeStatus.
     *
	 * @throws EntityNotFoundException if no TypeEmployeeStatus is found with the given id.
	 */
	TypeEmployeeStatus delete(Integer typeEmployeeStatusId) throws EntityNotFoundException;

	/**
	 * Finds all TypeEmployeeStatuses.
	 *
	 * @return A list of TypeEmployeeStatuses.
	 */
    @Deprecated
	Page<TypeEmployeeStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all TypeEmployeeStatuses.
	 * @return A list of TypeEmployeeStatuses.
	 */
    Page<TypeEmployeeStatus> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TypeEmployeeStatuses in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the TypeEmployeeStatus.
	 */
	long count(String query);

    Page<TypeEmployeeStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

